import collections as _collections
import weakref as _weakref
import sys

from vulkan._vulkan import ffi


__version__ = '1.0.49'


_weakkey_dict = _weakref.WeakKeyDictionary()
PY3 = sys.version_info >= (3, 0)


class ProcedureNotFoundError(Exception):
    pass


class ExtensionNotSupportedError(Exception):
    pass


def _cstr(x):
    if not isinstance(x, ffi.CData):
        return x

    t = ffi.typeof(x)
    if 'item' not in dir(t) or t.item.cname != 'char':
        return x

    if PY3:
        return ffi.string(x).decode('ascii')
    else:
        return ffi.string(x)


class _StrWrap(object):
    """Wrap a FFI Cdata object

    This class is a proxy class which auto-convert FFI string to Python
    string. It must be used only on object containing string data.
    Original CFFI string can always be accessed by prefixing the property with
    an underscore.
    """
    def __init__(self, obj):
        self.obj = obj

    def __setattr__(self, key, value):
        if key == 'obj':
            return super(_StrWrap, self).__setattr__(key, value)

        setattr(self.obj, key, value)

    def __getattr__(self, key):
        try:
            attr = getattr(self.obj, key)
        except AttributeError as origin_exc:
            # Remove the first underscore if exists
            if key.startswith('_'):
                try:
                    return getattr(self.obj, key[1:])
                except AttributeError:
                    raise origin_exc
            raise origin_exc

        return _cstr(attr)


def _cast_ptr2(x, _type):
    if isinstance(x, ffi.CData):
        if (_type.item == ffi.typeof(x) or
            (_type.item.cname == 'void' and ffi.typeof(x).kind in
             ['struct', 'union'])):
            return ffi.addressof(x), x
        return x, x

    if isinstance(x, _collections.Iterable):
        if _type.item.kind == 'pointer':
            ptrs = [_cast_ptr(i, _type.item) for i in x]
            ret = ffi.new(_type.item.cname+'[]', [i for i, _ in ptrs])
            _weakkey_dict[ret] = tuple(i for _, i in ptrs if i != ffi.NULL)
        else:
            ret = ffi.new(_type.item.cname+'[]', x)

        return ret, ret

    return ffi.cast(_type, x), x


def _cast_ptr3(x, _type):
    if isinstance(x, str):
        x = x.encode('ascii')
    return _cast_ptr2(x, _type)


_cast_ptr = _cast_ptr3 if PY3 else _cast_ptr2


# Load SDK
_lib_names = ('libvulkan.so.1', 'vulkan-1.dll')
for name in _lib_names:
    try:
        _lib = ffi.dlopen(name)
        break
    except OSError:
        pass
else:
    raise OSError('Cannot find Vulkan SDK version. Please ensure that it is '
                  'installed and that the <sdk_root>/<version>/lib/ folder is '
                  'in the library path')


VK_COMPARE_OP_NEVER = 0
VK_COMPARE_OP__BEGIN_RANGE = 0
VK_COMPARE_OP_NOT_EQUAL = 5
VK_COMPARE_OP_GREATER = 4
VK_COMPARE_OP_LESS_OR_EQUAL = 3
VK_COMPARE_OP_GREATER_OR_EQUAL = 6
VK_COMPARE_OP__RANGE_SIZE = 8
VK_COMPARE_OP_LESS = 1
VK_COMPARE_OP_EQUAL = 2
VK_COMPARE_OP_ALWAYS = 7
VK_COMPARE_OP__MAX_ENUM = 2147483647
VK_COMPARE_OP__END_RANGE = 7
VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
VK_BORDER_COLOR__RANGE_SIZE = 6
VK_BORDER_COLOR__MAX_ENUM = 2147483647
VK_BORDER_COLOR__BEGIN_RANGE = 0
VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5
VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
VK_BORDER_COLOR__END_RANGE = 5
VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3
VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
VK_DESCRIPTOR_TYPE__END_RANGE = 10
VK_DESCRIPTOR_TYPE__MAX_ENUM = 2147483647
VK_DESCRIPTOR_TYPE__RANGE_SIZE = 11
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
VK_DESCRIPTOR_TYPE__BEGIN_RANGE = 0
VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
VK_DESCRIPTOR_TYPE_SAMPLER = 0
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
VK_INDEX_TYPE_UINT32 = 1
VK_INDEX_TYPE__BEGIN_RANGE = 0
VK_INDEX_TYPE__RANGE_SIZE = 2
VK_INDEX_TYPE__MAX_ENUM = 2147483647
VK_INDEX_TYPE__END_RANGE = 1
VK_INDEX_TYPE_UINT16 = 0
VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHX = 0x00000001
VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHX = 0x00000002
VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_KHX__MAX_ENUM = 2147483647
VK_COMPONENT_SWIZZLE_IDENTITY = 0
VK_COMPONENT_SWIZZLE__BEGIN_RANGE = 0
VK_COMPONENT_SWIZZLE_ZERO = 1
VK_COMPONENT_SWIZZLE_G = 4
VK_COMPONENT_SWIZZLE_ONE = 2
VK_COMPONENT_SWIZZLE_B = 5
VK_COMPONENT_SWIZZLE__END_RANGE = 6
VK_COMPONENT_SWIZZLE_A = 6
VK_COMPONENT_SWIZZLE_R = 3
VK_COMPONENT_SWIZZLE__RANGE_SIZE = 7
VK_COMPONENT_SWIZZLE__MAX_ENUM = 2147483647
VK_SYSTEM_ALLOCATION_SCOPE__RANGE_SIZE = 5
VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3
VK_SYSTEM_ALLOCATION_SCOPE__MAX_ENUM = 2147483647
VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1
VK_SYSTEM_ALLOCATION_SCOPE__BEGIN_RANGE = 0
VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2
VK_SYSTEM_ALLOCATION_SCOPE__END_RANGE = 4
VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0
VK_STRUCTURE_TYPE__RANGE_SIZE = 49
VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16
VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13
VK_STRUCTURE_TYPE__BEGIN_RANGE = 0
VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1
VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17
VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21
VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2
VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41
VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30
VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37
VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9
VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42
VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44
VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6
VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35
VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14
VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11
VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38
VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40
VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3
VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33
VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32
VK_STRUCTURE_TYPE__END_RANGE = 48
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22
VK_STRUCTURE_TYPE_APPLICATION_INFO = 0
VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8
VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24
VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15
VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43
VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39
VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7
VK_STRUCTURE_TYPE__MAX_ENUM = 2147483647
VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34
VK_STRUCTURE_TYPE_SUBMIT_INFO = 4
VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12
VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45
VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26
VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47
VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5
VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31
VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46
VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29
VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28
VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25
VK_INTERNAL_ALLOCATION_TYPE__MAX_ENUM = 2147483647
VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0
VK_INTERNAL_ALLOCATION_TYPE__RANGE_SIZE = 1
VK_INTERNAL_ALLOCATION_TYPE__BEGIN_RANGE = 0
VK_INTERNAL_ALLOCATION_TYPE__END_RANGE = 0
VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004
VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002
VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001
VK_SPARSE_IMAGE_FORMAT_FLAG_BITS__MAX_ENUM = 2147483647
VK_FRONT_FACE__RANGE_SIZE = 2
VK_FRONT_FACE_COUNTER_CLOCKWISE = 0
VK_FRONT_FACE__END_RANGE = 1
VK_FRONT_FACE_CLOCKWISE = 1
VK_FRONT_FACE__MAX_ENUM = 2147483647
VK_FRONT_FACE__BEGIN_RANGE = 0
VK_BLEND_OP_REVERSE_SUBTRACT = 2
VK_BLEND_OP_ADD = 0
VK_BLEND_OP_MAX = 4
VK_BLEND_OP__MAX_ENUM = 2147483647
VK_BLEND_OP_MIN = 3
VK_BLEND_OP_SUBTRACT = 1
VK_BLEND_OP__BEGIN_RANGE = 0
VK_BLEND_OP__RANGE_SIZE = 5
VK_BLEND_OP__END_RANGE = 4
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0
VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
VK_PRIMITIVE_TOPOLOGY__BEGIN_RANGE = 0
VK_PRIMITIVE_TOPOLOGY__MAX_ENUM = 2147483647
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
VK_PRIMITIVE_TOPOLOGY__RANGE_SIZE = 11
VK_PRIMITIVE_TOPOLOGY__END_RANGE = 10
VK_COLOR_SPACE_KHR__RANGE_SIZE = 1
VK_COLOR_SPACE_KHR__MAX_ENUM = 2147483647
VK_COLOR_SPACE_KHR__END_RANGE = 0
VK_COLOR_SPACE_KHR__BEGIN_RANGE = 0
VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0
VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
VK_PHYSICAL_DEVICE_TYPE_OTHER = 0
VK_PHYSICAL_DEVICE_TYPE__BEGIN_RANGE = 0
VK_PHYSICAL_DEVICE_TYPE_CPU = 4
VK_PHYSICAL_DEVICE_TYPE__MAX_ENUM = 2147483647
VK_PHYSICAL_DEVICE_TYPE__RANGE_SIZE = 5
VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
VK_PHYSICAL_DEVICE_TYPE__END_RANGE = 4
VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
VK_SAMPLER_ADDRESS_MODE_REPEAT = 0
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
VK_SAMPLER_ADDRESS_MODE__END_RANGE = 3
VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
VK_SAMPLER_ADDRESS_MODE__MAX_ENUM = 2147483647
VK_SAMPLER_ADDRESS_MODE__RANGE_SIZE = 4
VK_SAMPLER_ADDRESS_MODE__BEGIN_RANGE = 0
VK_MEMORY_ALLOCATE_FLAG_BITS_KHX__MAX_ENUM = 2147483647
VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHX = 0x00000001
VK_SPARSE_MEMORY_BIND_FLAG_BITS__MAX_ENUM = 2147483647
VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001
VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800
VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008
VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040
VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010
VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002
VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001
VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020
VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000
VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004
VK_PIPELINE_STAGE_HOST_BIT = 0x00004000
VK_PIPELINE_STAGE_FLAG_BITS__MAX_ENUM = 2147483647
VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000
VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400
VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000
VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200
VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000
VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100
VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080
VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177
VK_FORMAT_R32G32B32A32_SFLOAT = 109
VK_FORMAT_R32G32_SFLOAT = 103
VK_FORMAT_R16G16_USCALED = 79
VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167
VK_FORMAT_R16G16_SSCALED = 80
VK_FORMAT_R16_USCALED = 72
VK_FORMAT_R64G64B64A64_SFLOAT = 121
VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8
VK_FORMAT_R8G8B8A8_UNORM = 37
VK_FORMAT__END_RANGE = 184
VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55
VK_FORMAT_R16G16_UINT = 81
VK_FORMAT_R32G32B32A32_SINT = 108
VK_FORMAT_R8_SINT = 14
VK_FORMAT_R16G16B16_UNORM = 84
VK_FORMAT_D32_SFLOAT = 126
VK_FORMAT_R8G8B8A8_SINT = 42
VK_FORMAT_R16G16B16_UINT = 88
VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164
VK_FORMAT_B8G8R8_UNORM = 30
VK_FORMAT_R16_SINT = 75
VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175
VK_FORMAT_R8G8B8A8_SSCALED = 40
VK_FORMAT_R16G16_UNORM = 77
VK_FORMAT_R8_SSCALED = 12
VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59
VK_FORMAT_D32_SFLOAT_S8_UINT = 130
VK_FORMAT_R8G8_SSCALED = 19
VK_FORMAT_R16_UNORM = 70
VK_FORMAT_BC7_SRGB_BLOCK = 146
VK_FORMAT_BC2_UNORM_BLOCK = 135
VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162
VK_FORMAT_B8G8R8A8_USCALED = 46
VK_FORMAT_B8G8R8_SINT = 35
VK_FORMAT_R16G16B16_SSCALED = 87
VK_FORMAT_R16G16_SFLOAT = 83
VK_FORMAT_R16_UINT = 74
VK_FORMAT_R8G8_SINT = 21
VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181
VK_FORMAT_R8G8B8A8_SRGB = 43
VK_FORMAT_R8G8B8_SSCALED = 26
VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62
VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155
VK_FORMAT_B8G8R8A8_SINT = 49
VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7
VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122
VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176
VK_FORMAT_R16G16B16A16_USCALED = 93
VK_FORMAT_R32G32B32_SINT = 105
VK_FORMAT_B8G8R8_SRGB = 36
VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2
VK_FORMAT_R8G8B8_UNORM = 23
VK_FORMAT_R8_SNORM = 10
VK_FORMAT_R8G8B8A8_USCALED = 39
VK_FORMAT_B8G8R8A8_UINT = 48
VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
VK_FORMAT_UNDEFINED = 0
VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
VK_FORMAT_R8G8B8_SNORM = 24
VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
VK_FORMAT_R8G8B8_USCALED = 25
VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169
VK_FORMAT_B8G8R8A8_SNORM = 45
VK_FORMAT_R8G8_SRGB = 22
VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170
VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168
VK_FORMAT_BC3_UNORM_BLOCK = 137
VK_FORMAT_B8G8R8A8_UNORM = 44
VK_FORMAT_R16_SFLOAT = 76
VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165
VK_FORMAT_R8G8_UINT = 20
VK_FORMAT_R64G64_SFLOAT = 115
VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66
VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178
VK_FORMAT_R16G16B16A16_SFLOAT = 97
VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159
VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3
VK_FORMAT_D24_UNORM_S8_UINT = 129
VK_FORMAT_R32G32_SINT = 102
VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
VK_FORMAT_R32G32_UINT = 101
VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68
VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63
VK_FORMAT_R16_SSCALED = 73
VK_FORMAT_BC3_SRGB_BLOCK = 138
VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
VK_FORMAT_R32G32B32A32_UINT = 107
VK_FORMAT_R5G6B5_UNORM_PACK16 = 4
VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51
VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
VK_FORMAT_EAC_R11_UNORM_BLOCK = 153
VK_FORMAT_D16_UNORM = 124
VK_FORMAT_R8G8_SNORM = 17
VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161
VK_FORMAT_R32_UINT = 98
VK_FORMAT_B8G8R8_USCALED = 32
VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53
VK_FORMAT_R32_SINT = 99
VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163
VK_FORMAT_BC5_UNORM_BLOCK = 141
VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157
VK_FORMAT_R32G32B32_UINT = 104
VK_FORMAT_R64G64_SINT = 114
VK_FORMAT_B8G8R8_UINT = 34
VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133
VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173
VK_FORMAT_R8G8_USCALED = 18
VK_FORMAT_R16G16B16_USCALED = 86
VK_FORMAT_S8_UINT = 127
VK_FORMAT_R16G16B16A16_SSCALED = 94
VK_FORMAT_R16G16B16_SINT = 89
VK_FORMAT_R16G16B16A16_UINT = 95
VK_FORMAT_R8_SRGB = 15
VK_FORMAT_R16_SNORM = 71
VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171
VK_FORMAT_R16G16_SNORM = 78
VK_FORMAT_R16G16B16A16_SINT = 96
VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182
VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156
VK_FORMAT_R4G4_UNORM_PACK8 = 1
VK_FORMAT_R8G8B8_UINT = 27
VK_FORMAT_D16_UNORM_S8_UINT = 128
VK_FORMAT_B8G8R8A8_SRGB = 50
VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158
VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52
VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180
VK_FORMAT_R16G16B16_SNORM = 85
VK_FORMAT_R8G8B8A8_SNORM = 38
VK_FORMAT__MAX_ENUM = 2147483647
VK_FORMAT_BC6H_UFLOAT_BLOCK = 143
VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64
VK_FORMAT_R32_SFLOAT = 100
VK_FORMAT__BEGIN_RANGE = 0
VK_FORMAT_R64_SINT = 111
VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
VK_FORMAT_R32G32B32_SFLOAT = 106
VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174
VK_FORMAT_B8G8R8_SSCALED = 33
VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172
VK_FORMAT_BC7_UNORM_BLOCK = 145
VK_FORMAT_R64G64B64_UINT = 116
VK_FORMAT_X8_D24_UNORM_PACK32 = 125
VK_FORMAT_R64G64B64_SFLOAT = 118
VK_FORMAT_R8_UNORM = 9
VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60
VK_FORMAT_BC4_SNORM_BLOCK = 140
VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184
VK_FORMAT_R8G8B8_SRGB = 29
VK_FORMAT_R64G64_UINT = 113
VK_FORMAT__RANGE_SIZE = 185
VK_FORMAT_R64_SFLOAT = 112
VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134
VK_FORMAT_BC4_UNORM_BLOCK = 139
VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56
VK_FORMAT_BC6H_SFLOAT_BLOCK = 144
VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6
VK_FORMAT_R16G16B16A16_UNORM = 91
VK_FORMAT_R16G16_SINT = 82
VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183
VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69
VK_FORMAT_B8G8R8_SNORM = 31
VK_FORMAT_B8G8R8A8_SSCALED = 47
VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166
VK_FORMAT_R64G64B64_SINT = 117
VK_FORMAT_R16G16B16_SFLOAT = 90
VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65
VK_FORMAT_R8_USCALED = 11
VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131
VK_FORMAT_R8G8B8A8_UINT = 41
VK_FORMAT_EAC_R11_SNORM_BLOCK = 154
VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58
VK_FORMAT_R64G64B64A64_UINT = 119
VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132
VK_FORMAT_R64G64B64A64_SINT = 120
VK_FORMAT_R8_UINT = 13
VK_FORMAT_B5G6R5_UNORM_PACK16 = 5
VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57
VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179
VK_FORMAT_R16G16B16A16_SNORM = 92
VK_FORMAT_R64_UINT = 110
VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
VK_FORMAT_R8G8_UNORM = 16
VK_FORMAT_BC2_SRGB_BLOCK = 136
VK_FORMAT_R8G8B8_SINT = 28
VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160
VK_FORMAT_BC5_SNORM_BLOCK = 142
VK_LOGIC_OP_NO_OP = 5
VK_LOGIC_OP_OR = 7
VK_LOGIC_OP_COPY = 3
VK_LOGIC_OP_OR_REVERSE = 11
VK_LOGIC_OP_INVERT = 10
VK_LOGIC_OP_NAND = 14
VK_LOGIC_OP__RANGE_SIZE = 16
VK_LOGIC_OP_CLEAR = 0
VK_LOGIC_OP__BEGIN_RANGE = 0
VK_LOGIC_OP_AND_REVERSE = 2
VK_LOGIC_OP_AND = 1
VK_LOGIC_OP_NOR = 8
VK_LOGIC_OP__END_RANGE = 15
VK_LOGIC_OP_AND_INVERTED = 4
VK_LOGIC_OP_EQUIVALENT = 9
VK_LOGIC_OP_COPY_INVERTED = 12
VK_LOGIC_OP_XOR = 6
VK_LOGIC_OP_OR_INVERTED = 13
VK_LOGIC_OP_SET = 15
VK_LOGIC_OP__MAX_ENUM = 2147483647
VK_QUERY_RESULT_WAIT_BIT = 0x00000002
VK_QUERY_RESULT_FLAG_BITS__MAX_ENUM = 2147483647
VK_QUERY_RESULT_PARTIAL_BIT = 0x00000008
VK_QUERY_RESULT_64_BIT = 0x00000001
VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004
VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001
VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002
VK_COMMAND_POOL_CREATE_FLAG_BITS__MAX_ENUM = 2147483647
VK_STENCIL_FACE_FRONT_BIT = 0x00000001
VK_STENCIL_FACE_BACK_BIT = 0x00000002
VK_STENCIL_FRONT_AND_BACK = 0x00000003
VK_STENCIL_FACE_FLAG_BITS__MAX_ENUM = 2147483647
VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001
VK_COMMAND_POOL_RESET_FLAG_BITS__MAX_ENUM = 2147483647
VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001
VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002
VK_COMPOSITE_ALPHA_FLAG_BITS_KHR__MAX_ENUM = 2147483647
VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004
VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008
VK_INDIRECT_COMMANDS_TOKEN_TYPE_NVX__RANGE_SIZE = 8
VK_INDIRECT_COMMANDS_TOKEN_TYPE_NVX__BEGIN_RANGE = 0
VK_INDIRECT_COMMANDS_TOKEN_VERTEX_BUFFER_NVX = 3
VK_INDIRECT_COMMANDS_TOKEN_PUSH_CONSTANT_NVX = 4
VK_INDIRECT_COMMANDS_TOKEN_INDEX_BUFFER_NVX = 2
VK_INDIRECT_COMMANDS_TOKEN_TYPE_NVX__MAX_ENUM = 2147483647
VK_INDIRECT_COMMANDS_TOKEN_TYPE_NVX__END_RANGE = 7
VK_INDIRECT_COMMANDS_TOKEN_DRAW_NVX = 6
VK_INDIRECT_COMMANDS_TOKEN_DISPATCH_NVX = 7
VK_INDIRECT_COMMANDS_TOKEN_DRAW_INDEXED_NVX = 5
VK_INDIRECT_COMMANDS_TOKEN_PIPELINE_NVX = 0
VK_INDIRECT_COMMANDS_TOKEN_DESCRIPTOR_SET_NVX = 1
VK_SUBPASS_CONTENTS__MAX_ENUM = 2147483647
VK_SUBPASS_CONTENTS__BEGIN_RANGE = 0
VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
VK_SUBPASS_CONTENTS__END_RANGE = 1
VK_SUBPASS_CONTENTS_INLINE = 0
VK_SUBPASS_CONTENTS__RANGE_SIZE = 2
VK_DEPENDENCY_BY_REGION_BIT = 0x00000001
VK_DEPENDENCY_FLAG_BITS__MAX_ENUM = 2147483647
VK_RASTERIZATION_ORDER_STRICT_AMD = 0
VK_RASTERIZATION_ORDER_AMD__MAX_ENUM = 2147483647
VK_RASTERIZATION_ORDER_AMD__END_RANGE = 1
VK_RASTERIZATION_ORDER_AMD__BEGIN_RANGE = 0
VK_RASTERIZATION_ORDER_RELAXED_AMD = 1
VK_RASTERIZATION_ORDER_AMD__RANGE_SIZE = 2
VK_SAMPLER_MIPMAP_MODE_LINEAR = 1
VK_SAMPLER_MIPMAP_MODE_NEAREST = 0
VK_SAMPLER_MIPMAP_MODE__MAX_ENUM = 2147483647
VK_SAMPLER_MIPMAP_MODE__RANGE_SIZE = 2
VK_SAMPLER_MIPMAP_MODE__BEGIN_RANGE = 0
VK_SAMPLER_MIPMAP_MODE__END_RANGE = 1
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHX = 0x00000004
VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_KHX__MAX_ENUM = 2147483647
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHX = 0x00000002
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHX = 0x00000020
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHX = 0x00000040
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHX = 0x00000001
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHX = 0x00000010
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHX = 0x00000008
VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHX = 0x00000002
VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_KHX__MAX_ENUM = 2147483647
VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHX = 0x00000004
VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHX = 0x00000001
VK_PIPELINE_CREATE_FLAG_BITS__MAX_ENUM = 2147483647
VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001
VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004
VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002
VK_PRESENT_MODE_MAILBOX_KHR = 1
VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3
VK_PRESENT_MODE_KHR__END_RANGE = 3
VK_PRESENT_MODE_IMMEDIATE_KHR = 0
VK_PRESENT_MODE_FIFO_KHR = 2
VK_PRESENT_MODE_KHR__BEGIN_RANGE = 0
VK_PRESENT_MODE_KHR__RANGE_SIZE = 4
VK_PRESENT_MODE_KHR__MAX_ENUM = 2147483647
VK_POLYGON_MODE__MAX_ENUM = 2147483647
VK_POLYGON_MODE_POINT = 2
VK_POLYGON_MODE__RANGE_SIZE = 3
VK_POLYGON_MODE__END_RANGE = 2
VK_POLYGON_MODE_LINE = 1
VK_POLYGON_MODE_FILL = 0
VK_POLYGON_MODE__BEGIN_RANGE = 0
VK_ATTACHMENT_LOAD_OP__RANGE_SIZE = 3
VK_ATTACHMENT_LOAD_OP__MAX_ENUM = 2147483647
VK_ATTACHMENT_LOAD_OP_CLEAR = 1
VK_ATTACHMENT_LOAD_OP_LOAD = 0
VK_ATTACHMENT_LOAD_OP__END_RANGE = 2
VK_ATTACHMENT_LOAD_OP__BEGIN_RANGE = 0
VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2
VK_SAMPLE_COUNT_32_BIT = 0x00000020
VK_SAMPLE_COUNT_8_BIT = 0x00000008
VK_SAMPLE_COUNT_2_BIT = 0x00000002
VK_SAMPLE_COUNT_FLAG_BITS__MAX_ENUM = 2147483647
VK_SAMPLE_COUNT_16_BIT = 0x00000010
VK_SAMPLE_COUNT_64_BIT = 0x00000040
VK_SAMPLE_COUNT_1_BIT = 0x00000001
VK_SAMPLE_COUNT_4_BIT = 0x00000004
VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
VK_IMAGE_LAYOUT__RANGE_SIZE = 9
VK_IMAGE_LAYOUT__BEGIN_RANGE = 0
VK_IMAGE_LAYOUT_PREINITIALIZED = 8
VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
VK_IMAGE_LAYOUT_GENERAL = 1
VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
VK_IMAGE_LAYOUT_UNDEFINED = 0
VK_IMAGE_LAYOUT__MAX_ENUM = 2147483647
VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7
VK_IMAGE_LAYOUT__END_RANGE = 8
VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6
VK_DISCARD_RECTANGLE_MODE_EXT__RANGE_SIZE = 2
VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1
VK_DISCARD_RECTANGLE_MODE_EXT__END_RANGE = 1
VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0
VK_DISCARD_RECTANGLE_MODE_EXT__MAX_ENUM = 2147483647
VK_DISCARD_RECTANGLE_MODE_EXT__BEGIN_RANGE = 0
VK_IMAGE_ASPECT_STENCIL_BIT = 0x00000004
VK_IMAGE_ASPECT_COLOR_BIT = 0x00000001
VK_IMAGE_ASPECT_DEPTH_BIT = 0x00000002
VK_IMAGE_ASPECT_FLAG_BITS__MAX_ENUM = 2147483647
VK_IMAGE_ASPECT_METADATA_BIT = 0x00000008
VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010
VK_ACCESS_HOST_READ_BIT = 0x00002000
VK_ACCESS_MEMORY_READ_BIT = 0x00008000
VK_ACCESS_MEMORY_WRITE_BIT = 0x00010000
VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001
VK_ACCESS_TRANSFER_WRITE_BIT = 0x00001000
VK_ACCESS_HOST_WRITE_BIT = 0x00004000
VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200
VK_ACCESS_TRANSFER_READ_BIT = 0x00000800
VK_ACCESS_SHADER_WRITE_BIT = 0x00000040
VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100
VK_ACCESS_FLAG_BITS__MAX_ENUM = 2147483647
VK_ACCESS_INDEX_READ_BIT = 0x00000002
VK_ACCESS_SHADER_READ_BIT = 0x00000020
VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400
VK_ACCESS_UNIFORM_READ_BIT = 0x00000008
VK_DISPLAY_POWER_STATE_ON_EXT = 2
VK_DISPLAY_POWER_STATE_EXT__BEGIN_RANGE = 0
VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1
VK_DISPLAY_POWER_STATE_EXT__RANGE_SIZE = 3
VK_DISPLAY_POWER_STATE_EXT__MAX_ENUM = 2147483647
VK_DISPLAY_POWER_STATE_OFF_EXT = 0
VK_DISPLAY_POWER_STATE_EXT__END_RANGE = 2
VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHX = 0x00000002
VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHX = 0x00000008
VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_KHX__MAX_ENUM = 2147483647
VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHX = 0x00000001
VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHX = 0x00000004
VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004
VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002
VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010
VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001
VK_MEMORY_PROPERTY_FLAG_BITS__MAX_ENUM = 2147483647
VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008
VK_OBJECT_ENTRY_USAGE_FLAG_BITS_NVX__MAX_ENUM = 2147483647
VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX = 0x00000001
VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX = 0x00000002
VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001
VK_ATTACHMENT_DESCRIPTION_FLAG_BITS__MAX_ENUM = 2147483647
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX = 0x00000002
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX = 0x00000008
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX = 0x00000001
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_NVX__MAX_ENUM = 2147483647
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX = 0x00000004
VK_ATTACHMENT_STORE_OP_STORE = 0
VK_ATTACHMENT_STORE_OP__MAX_ENUM = 2147483647
VK_ATTACHMENT_STORE_OP__RANGE_SIZE = 2
VK_ATTACHMENT_STORE_OP__END_RANGE = 1
VK_ATTACHMENT_STORE_OP__BEGIN_RANGE = 0
VK_ATTACHMENT_STORE_OP_DONT_CARE = 1
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010
VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400
VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002
VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS__MAX_ENUM = 2147483647
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008
VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004
VK_SURFACE_TRANSFORM_FLAG_BITS_KHR__MAX_ENUM = 2147483647
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010
VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002
VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040
VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004
VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080
VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100
VK_DEVICE_EVENT_TYPE_EXT__BEGIN_RANGE = 0
VK_DEVICE_EVENT_TYPE_EXT__END_RANGE = 0
VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0
VK_DEVICE_EVENT_TYPE_EXT__RANGE_SIZE = 1
VK_DEVICE_EVENT_TYPE_EXT__MAX_ENUM = 2147483647
VK_SHARING_MODE_CONCURRENT = 1
VK_SHARING_MODE__BEGIN_RANGE = 0
VK_SHARING_MODE__MAX_ENUM = 2147483647
VK_SHARING_MODE__END_RANGE = 1
VK_SHARING_MODE__RANGE_SIZE = 2
VK_SHARING_MODE_EXCLUSIVE = 0
VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
VK_IMAGE_VIEW_TYPE__END_RANGE = 6
VK_IMAGE_VIEW_TYPE_CUBE = 3
VK_IMAGE_VIEW_TYPE_2D = 1
VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4
VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5
VK_IMAGE_VIEW_TYPE_3D = 2
VK_IMAGE_VIEW_TYPE__RANGE_SIZE = 7
VK_IMAGE_VIEW_TYPE__BEGIN_RANGE = 0
VK_IMAGE_VIEW_TYPE__MAX_ENUM = 2147483647
VK_IMAGE_VIEW_TYPE_1D = 0
VK_VERTEX_INPUT_RATE__END_RANGE = 1
VK_VERTEX_INPUT_RATE__MAX_ENUM = 2147483647
VK_VERTEX_INPUT_RATE__RANGE_SIZE = 2
VK_VERTEX_INPUT_RATE_INSTANCE = 1
VK_VERTEX_INPUT_RATE_VERTEX = 0
VK_VERTEX_INPUT_RATE__BEGIN_RANGE = 0
VK_QUEUE_FLAG_BITS__MAX_ENUM = 2147483647
VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008
VK_QUEUE_COMPUTE_BIT = 0x00000002
VK_QUEUE_TRANSFER_BIT = 0x00000004
VK_QUEUE_GRAPHICS_BIT = 0x00000001
VK_DISPLAY_EVENT_TYPE_EXT__RANGE_SIZE = 1
VK_DISPLAY_EVENT_TYPE_EXT__MAX_ENUM = 2147483647
VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0
VK_DISPLAY_EVENT_TYPE_EXT__BEGIN_RANGE = 0
VK_DISPLAY_EVENT_TYPE_EXT__END_RANGE = 0
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_KHR__END_RANGE = 1
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_KHR__BEGIN_RANGE = 0
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_KHR__MAX_ENUM = 2147483647
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_KHR__RANGE_SIZE = 2
VK_FILTER__RANGE_SIZE = 2
VK_FILTER__END_RANGE = 1
VK_FILTER__MAX_ENUM = 2147483647
VK_FILTER_LINEAR = 1
VK_FILTER__BEGIN_RANGE = 0
VK_FILTER_NEAREST = 0
VK_PIPELINE_BIND_POINT_COMPUTE = 1
VK_PIPELINE_BIND_POINT__BEGIN_RANGE = 0
VK_PIPELINE_BIND_POINT_GRAPHICS = 0
VK_PIPELINE_BIND_POINT__END_RANGE = 1
VK_PIPELINE_BIND_POINT__MAX_ENUM = 2147483647
VK_PIPELINE_BIND_POINT__RANGE_SIZE = 2
VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 0x00000002
VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 0x00000004
VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0x00000001
VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_NV__MAX_ENUM = 2147483647
VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010
VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002
VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008
VK_IMAGE_CREATE_FLAG_BITS__MAX_ENUM = 2147483647
VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004
VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001
VK_QUERY_TYPE_PIPELINE_STATISTICS = 1
VK_QUERY_TYPE__END_RANGE = 2
VK_QUERY_TYPE__RANGE_SIZE = 3
VK_QUERY_TYPE_TIMESTAMP = 2
VK_QUERY_TYPE__MAX_ENUM = 2147483647
VK_QUERY_TYPE_OCCLUSION = 0
VK_QUERY_TYPE__BEGIN_RANGE = 0
VK_DYNAMIC_STATE_LINE_WIDTH = 2
VK_DYNAMIC_STATE_DEPTH_BIAS = 3
VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4
VK_DYNAMIC_STATE__RANGE_SIZE = 9
VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5
VK_DYNAMIC_STATE__BEGIN_RANGE = 0
VK_DYNAMIC_STATE__MAX_ENUM = 2147483647
VK_DYNAMIC_STATE__END_RANGE = 8
VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6
VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7
VK_DYNAMIC_STATE_VIEWPORT = 0
VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8
VK_DYNAMIC_STATE_SCISSOR = 1
VK_PIPELINE_CACHE_HEADER_VERSION__BEGIN_RANGE = 1
VK_PIPELINE_CACHE_HEADER_VERSION__MAX_ENUM = 2147483647
VK_PIPELINE_CACHE_HEADER_VERSION__END_RANGE = 1
VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1
VK_PIPELINE_CACHE_HEADER_VERSION__RANGE_SIZE = 1
VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001
VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004
VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002
VK_COMMAND_BUFFER_USAGE_FLAG_BITS__MAX_ENUM = 2147483647
VK_OBJECT_ENTRY_PUSH_CONSTANT_NVX = 4
VK_OBJECT_ENTRY_PIPELINE_NVX = 1
VK_OBJECT_ENTRY_TYPE_NVX__BEGIN_RANGE = 0
VK_OBJECT_ENTRY_DESCRIPTOR_SET_NVX = 0
VK_OBJECT_ENTRY_VERTEX_BUFFER_NVX = 3
VK_OBJECT_ENTRY_TYPE_NVX__RANGE_SIZE = 5
VK_OBJECT_ENTRY_INDEX_BUFFER_NVX = 2
VK_OBJECT_ENTRY_TYPE_NVX__END_RANGE = 4
VK_OBJECT_ENTRY_TYPE_NVX__MAX_ENUM = 2147483647
VK_CULL_MODE_NONE = 0
VK_CULL_MODE_BACK_BIT = 0x00000002
VK_CULL_MODE_FLAG_BITS__MAX_ENUM = 2147483647
VK_CULL_MODE_FRONT_BIT = 0x00000001
VK_CULL_MODE_FRONT_AND_BACK = 0x00000003
VK_COMMAND_BUFFER_LEVEL__MAX_ENUM = 2147483647
VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0
VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1
VK_COMMAND_BUFFER_LEVEL__END_RANGE = 1
VK_COMMAND_BUFFER_LEVEL__RANGE_SIZE = 2
VK_COMMAND_BUFFER_LEVEL__BEGIN_RANGE = 0
VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040
VK_FORMAT_FEATURE_FLAG_BITS__MAX_ENUM = 2147483647
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020
VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080
VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002
VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010
VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200
VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001
VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004
VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800
VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS__MAX_ENUM = 2147483647
VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001
VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080
VK_IMAGE_USAGE_SAMPLED_BIT = 0x00000004
VK_IMAGE_USAGE_FLAG_BITS__MAX_ENUM = 2147483647
VK_IMAGE_USAGE_STORAGE_BIT = 0x00000008
VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002
VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040
VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001
VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010
VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020
VK_COMMAND_BUFFER_RESET_FLAG_BITS__MAX_ENUM = 2147483647
VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001
VK_ERROR_OUT_OF_HOST_MEMORY = -1
VK_NV_EXTENSION_1_ERROR = -1000013000
VK_ERROR_FEATURE_NOT_PRESENT = -8
VK_INCOMPLETE = 5
VK_ERROR_TOO_MANY_OBJECTS = -10
VK_ERROR_OUT_OF_DATE_KHR = -1000001004
VK_ERROR_MEMORY_MAP_FAILED = -5
VK_RESULT__BEGIN_RANGE = -12
VK_ERROR_VALIDATION_FAILED_EXT = -1000011001
VK_TIMEOUT = 2
VK_SUBOPTIMAL_KHR = 1000001003
VK_ERROR_INITIALIZATION_FAILED = -3
VK_EVENT_RESET = 4
VK_ERROR_INCOMPATIBLE_DRIVER = -9
VK_RESULT__MAX_ENUM = 2147483647
VK_ERROR_FRAGMENTED_POOL = -12
VK_ERROR_SURFACE_LOST_KHR = -1000000000
VK_EVENT_SET = 3
VK_ERROR_LAYER_NOT_PRESENT = -6
VK_ERROR_FORMAT_NOT_SUPPORTED = -11
VK_ERROR_INVALID_EXTERNAL_HANDLE_KHX = -1000072003
VK_ERROR_INVALID_SHADER_NV = -1000012000
VK_RESULT__RANGE_SIZE = 18
VK_ERROR_DEVICE_LOST = -4
VK_ERROR_OUT_OF_POOL_MEMORY_KHR = -1000069000
VK_ERROR_OUT_OF_DEVICE_MEMORY = -2
VK_NOT_READY = 1
VK_RESULT__END_RANGE = 5
VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001
VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001
VK_ERROR_EXTENSION_NOT_PRESENT = -7
VK_SUCCESS = 0
VK_VALIDATION_CHECK_EXT__MAX_ENUM = 2147483647
VK_VALIDATION_CHECK_EXT__RANGE_SIZE = 1
VK_VALIDATION_CHECK_EXT__BEGIN_RANGE = 0
VK_VALIDATION_CHECK_ALL_EXT = 0
VK_VALIDATION_CHECK_EXT__END_RANGE = 0
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHX = 0x00000002
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHX = 0x00000004
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHX = 0x00000001
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FENCE_FD_BIT_KHX = 0x00000010
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHX = 0x00000008
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_KHX__MAX_ENUM = 2147483647
VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT = 1
VK_DEBUG_REPORT_ERROR_EXT__MAX_ENUM = 2147483647
VK_DEBUG_REPORT_ERROR_EXT__END_RANGE = 1
VK_DEBUG_REPORT_ERROR_NONE_EXT = 0
VK_DEBUG_REPORT_ERROR_EXT__BEGIN_RANGE = 0
VK_DEBUG_REPORT_ERROR_EXT__RANGE_SIZE = 2
VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001
VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008
VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_KHR__MAX_ENUM = 2147483647
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004
VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004
VK_BUFFER_CREATE_FLAG_BITS__MAX_ENUM = 2147483647
VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001
VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002
VK_IMAGE_TYPE_3D = 2
VK_IMAGE_TYPE__BEGIN_RANGE = 0
VK_IMAGE_TYPE_2D = 1
VK_IMAGE_TYPE__RANGE_SIZE = 3
VK_IMAGE_TYPE__END_RANGE = 2
VK_IMAGE_TYPE_1D = 0
VK_IMAGE_TYPE__MAX_ENUM = 2147483647
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0
VK_VIEWPORT_COORDINATE_SWIZZLE_NV__RANGE_SIZE = 8
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2
VK_VIEWPORT_COORDINATE_SWIZZLE_NV__BEGIN_RANGE = 0
VK_VIEWPORT_COORDINATE_SWIZZLE_NV__END_RANGE = 7
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1
VK_VIEWPORT_COORDINATE_SWIZZLE_NV__MAX_ENUM = 2147483647
VK_SURFACE_COUNTER_FLAG_BITS_EXT__MAX_ENUM = 2147483647
VK_SURFACE_COUNTER_VBLANK_EXT = 0x00000001
VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHX = 0x00000002
VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHX = 0x00000001
VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHX = 0x00000004
VK_PEER_MEMORY_FEATURE_FLAG_BITS_KHX__MAX_ENUM = 2147483647
VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHX = 0x00000008
VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
VK_BLEND_FACTOR__END_RANGE = 18
VK_BLEND_FACTOR_SRC1_COLOR = 15
VK_BLEND_FACTOR_SRC_ALPHA = 6
VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
VK_BLEND_FACTOR__BEGIN_RANGE = 0
VK_BLEND_FACTOR_SRC1_ALPHA = 17
VK_BLEND_FACTOR_DST_ALPHA = 8
VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
VK_BLEND_FACTOR__RANGE_SIZE = 19
VK_BLEND_FACTOR_SRC_COLOR = 2
VK_BLEND_FACTOR_DST_COLOR = 4
VK_BLEND_FACTOR_CONSTANT_COLOR = 10
VK_BLEND_FACTOR_CONSTANT_ALPHA = 12
VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
VK_BLEND_FACTOR_ONE = 1
VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
VK_BLEND_FACTOR__MAX_ENUM = 2147483647
VK_BLEND_FACTOR_ZERO = 0
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001
VK_QUERY_CONTROL_FLAG_BITS__MAX_ENUM = 2147483647
VK_FENCE_CREATE_FLAG_BITS__MAX_ENUM = 2147483647
VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 0x00000008
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 0x00000004
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 0x00000001
VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_NV__MAX_ENUM = 2147483647
VK_BUFFER_USAGE_FLAG_BITS__MAX_ENUM = 2147483647
VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008
VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001
VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010
VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002
VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020
VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080
VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100
VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040
VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004
VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004
VK_DEBUG_REPORT_FLAG_BITS_EXT__MAX_ENUM = 2147483647
VK_DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008
VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010
VK_DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002
VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001
VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001
VK_MEMORY_HEAP_FLAG_BITS__MAX_ENUM = 2147483647
VK_COLOR_COMPONENT_B_BIT = 0x00000004
VK_COLOR_COMPONENT_FLAG_BITS__MAX_ENUM = 2147483647
VK_COLOR_COMPONENT_A_BIT = 0x00000008
VK_COLOR_COMPONENT_R_BIT = 0x00000001
VK_COLOR_COMPONENT_G_BIT = 0x00000002
VK_STENCIL_OP_INVERT = 5
VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4
VK_STENCIL_OP_DECREMENT_AND_WRAP = 7
VK_STENCIL_OP__MAX_ENUM = 2147483647
VK_STENCIL_OP__END_RANGE = 7
VK_STENCIL_OP_ZERO = 1
VK_STENCIL_OP__RANGE_SIZE = 8
VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3
VK_STENCIL_OP_INCREMENT_AND_WRAP = 6
VK_STENCIL_OP_REPLACE = 2
VK_STENCIL_OP__BEGIN_RANGE = 0
VK_STENCIL_OP_KEEP = 0
VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20
VK_OBJECT_TYPE_FRAMEBUFFER = 24
VK_OBJECT_TYPE_IMAGE = 10
VK_OBJECT_TYPE_DEVICE_MEMORY = 8
VK_OBJECT_TYPE_COMMAND_POOL = 25
VK_OBJECT_TYPE_BUFFER = 9
VK_OBJECT_TYPE_PIPELINE = 19
VK_OBJECT_TYPE_EVENT = 11
VK_OBJECT_TYPE_SHADER_MODULE = 15
VK_OBJECT_TYPE__BEGIN_RANGE = 0
VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17
VK_OBJECT_TYPE_DESCRIPTOR_SET = 23
VK_OBJECT_TYPE_DEVICE = 3
VK_OBJECT_TYPE_SAMPLER = 21
VK_OBJECT_TYPE_QUEUE = 4
VK_OBJECT_TYPE_FENCE = 7
VK_OBJECT_TYPE__END_RANGE = 25
VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2
VK_OBJECT_TYPE__MAX_ENUM = 2147483647
VK_OBJECT_TYPE__RANGE_SIZE = 26
VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22
VK_OBJECT_TYPE_INSTANCE = 1
VK_OBJECT_TYPE_QUERY_POOL = 12
VK_OBJECT_TYPE_PIPELINE_CACHE = 16
VK_OBJECT_TYPE_UNKNOWN = 0
VK_OBJECT_TYPE_RENDER_PASS = 18
VK_OBJECT_TYPE_COMMAND_BUFFER = 6
VK_OBJECT_TYPE_BUFFER_VIEW = 13
VK_OBJECT_TYPE_SEMAPHORE = 5
VK_OBJECT_TYPE_IMAGE_VIEW = 14
VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
VK_DEBUG_REPORT_OBJECT_TYPE_EXT__MAX_ENUM = 2147483647
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28
VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30
VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT = 31
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT = 32
VK_DEBUG_REPORT_OBJECT_TYPE_EXT__END_RANGE = 32
VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
VK_DEBUG_REPORT_OBJECT_TYPE_EXT__RANGE_SIZE = 33
VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
VK_DEBUG_REPORT_OBJECT_TYPE_EXT__BEGIN_RANGE = 0
VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002
VK_SHADER_STAGE_ALL = 0x7FFFFFFF
VK_SHADER_STAGE_FRAGMENT_BIT = 0x00000010
VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F
VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004
VK_SHADER_STAGE_FLAG_BITS__MAX_ENUM = 2147483647
VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020
VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008
VK_SHADER_STAGE_VERTEX_BIT = 0x00000001
VK_IMAGE_TILING_OPTIMAL = 0
VK_IMAGE_TILING__RANGE_SIZE = 2
VK_IMAGE_TILING_LINEAR = 1
VK_IMAGE_TILING__BEGIN_RANGE = 0
VK_IMAGE_TILING__MAX_ENUM = 2147483647
VK_IMAGE_TILING__END_RANGE = 1

def VK_MAKE_VERSION(major, minor, patch):
    return (((major) << 22) | ((minor) << 12) | (patch))


def VK_VERSION_MAJOR(version):
    return version >> 22


def VK_VERSION_MINOR(version):
    return (version >> 12) & 0x3ff


def VK_VERSION_PATCH(version):
    return version & 0xfff


VK_API_VERSION = VK_MAKE_VERSION(1, 0, 0)
VK_API_VERSION_1_0 = VK_MAKE_VERSION(1, 0, 0)
VK_NULL_HANDLE = 0
_UINT64_MAX = ffi.new('unsigned long long int*', 18446744073709551615)
UINT64_MAX = _UINT64_MAX[0]


VK_AMD_shader_explicit_vertex_parameter = 1
VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHX = 1000076001
VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHX = 1000074000
VK_KHX_MULTIVIEW_SPEC_VERSION = 1
VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge"
VK_KHR_EXTENSION_129_SPEC_VERSION = 0
VK_ANDROID_NATIVE_BUFFER_NAME = "VK_ANDROID_native_buffer"
VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000
VK_AMD_EXTENSION_25_EXTENSION_NAME = "VK_AMD_extension_25"
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000
VK_KHR_extension_113 = 1
VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013
VK_NV_glsl_shader = 1
VK_KHR_WIN32_SURFACE_SPEC_VERSION = 5
VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHX = 1000053000
VK_MESA_EXTENSION_127_EXTENSION_NAME = "VK_MESA_extension_127"
VK_AMD_extension_42 = 1
VK_KHR_MAINTENANCE1_SPEC_VERSION = 1
VK_KHR_variable_pointers = 1
VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000
VK_AMD_extension_137 = 1
VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001
VK_NVX_EXTENSION_30_SPEC_VERSION = 0
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000
VK_NVX_extension_52 = 1
VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003
VK_NVX_EXTENSION_48_SPEC_VERSION = 0
VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME = "VK_KHR_wayland_surface"
VK_NVX_EXTENSION_48_EXTENSION_NAME = "VK_NVX_extension_48"
VK_NV_EXTENSION_103_SPEC_VERSION = 0
VK_AMD_rasterization_order = 1
VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000
VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001
VK_KHX_external_memory_capabilities = 1
VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011
VK_KHX_external_semaphore_capabilities = 1
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 1000059008
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = 1000090000
VK_NV_external_memory = 1
VK_ARM_EXTENSION_01_SPEC_VERSION = 0
VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float"
VK_AMD_EXTENSION_24_SPEC_VERSION = 0
VK_AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot"
VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001
VK_AMD_extension_24 = 1
VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000
VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000059005
VK_KHR_extension_130 = 1
VK_GOOGLE_EXTENSION_49_SPEC_VERSION = 0
VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling"
VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc"
VK_FALSE = 0
VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = 1
VK_KHR_extension_146 = 1
VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004
VK_NV_EXTENSION_155_EXTENSION_NAME = "VK_NV_extension_155"
VK_IMG_EXTENSION_108_EXTENSION_NAME = "VK_IMG_extension_108"
VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote"
VK_KHX_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME = "VK_KHX_external_semaphore_win32"
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHX = 1000071002
VK_KHR_EXTENSION_148_EXTENSION_NAME = "VK_EXT_extension_148"
VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
VK_MVK_macos_surface = 1
VK_EXT_debug_report = 1
VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough"
VK_GOOGLE_EXTENSION_50_EXTENSION_NAME = "VK_GOOGLE_extension_50"
VK_IMAGE_CREATE_BIND_SFR_BIT_KHX = 0x00000040
VK_NN_vi_surface = 1
VK_AMD_extension_47 = 1
VK_KHR_relaxed_block_layout_EXTENSION_NAME = "VK_KHR_relaxed_block_layout"
VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000
VK_NVX_extension_51 = 1
VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME = "VK_NV_win32_keyed_mutex"
VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000
VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHX = 1000060011
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHX = 1000060002
VK_NVX_EXTENSION_31_SPEC_VERSION = 0
VK_KHR_extension_94 = 1
VK_KHR_EXTENSION_122_SPEC_VERSION = 0
VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007
VK_MVK_ios_surface = 1
VK_KHX_DEVICE_GROUP_SPEC_VERSION = 1
VK_AMD_extension_32 = 1
VK_EXT_EXTENSION_28_SPEC_VERSION = 0
VK_ARM_EXTENSION_02_EXTENSION_NAME = "VK_ARM_extension_02"
VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX = 0x00040000
VK_AMD_EXTENSION_25_SPEC_VERSION = 0
VK_NV_viewport_array2 = 1
VK_UUID_SIZE = 16
VK_ARM_EXTENSION_01_EXTENSION_NAME = "VK_ARM_extension_01"
VK_AMD_EXTENSION_45_SPEC_VERSION = 0
VK_KHX_device_group_creation = 1
VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = 1
VK_KHR_wayland_surface = 1
VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display"
VK_MVK_IOS_SURFACE_EXTENSION_NAME = "VK_MVK_ios_surface"
VK_EXT_DEBUG_REPORT_SPEC_VERSION = 6
VK_NV_extension_155 = 1
VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = 1
VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008
VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHX = 1000060006
VK_EXT_display_control = 1
VK_AMD_extension_143 = 1
VK_NV_clip_space_w_scaling = 1
VK_SWAPCHAIN_CREATE_BIND_SFR_BIT_KHX = 0x00000001
VK_KHR_extension_115 = 1
VK_KHR_extension_116 = 1
VK_AMD_EXTENSION_40_SPEC_VERSION = 0
VK_KHR_SURFACE_SPEC_VERSION = 25
VK_MESA_EXTENSION_126_SPEC_VERSION = 0
VK_NV_extension_153 = 1
VK_NVX_extension_48 = 1
VK_ANDROID_NATIVE_BUFFER_NUMBER = 11
VK_KHR_extension_131 = 1
VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009
VK_AMD_extension_25 = 1
VK_KHX_EXTERNAL_MEMORY_FD_SPEC_VERSION = 1
VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template"
VK_IMG_EXTENSION_110_EXTENSION_NAME = "VK_IMG_extension_110"
VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHX = 1000060010
VK_IMG_filter_cubic = 1
VK_KHR_EXTENSION_113_SPEC_VERSION = 0
VK_KHR_descriptor_update_template = 1
VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = 1
VK_AMD_extension_39 = 1
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 0x00002000
VK_NV_EXTENSION_154_SPEC_VERSION = 0
VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX = 0x00020000
VK_NV_EXTENSION_151_SPEC_VERSION = 0
VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = 1
VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic"
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHX = 1000071000
VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = 2
VK_KHX_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHX_external_memory_capabilities"
VK_KHR_EXTENSION_82_EXTENSION_NAME = "VK_KHR_extension_82"
VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000
VK_MVK_MACOS_SURFACE_SPEC_VERSION = 2
VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002
VK_AMD_EXTENSION_35_EXTENSION_NAME = "VK_AMD_extension_35"
VK_KHX_external_semaphore_fd = 1
VK_NVX_EXTENSION_31_EXTENSION_NAME = "VK_NVX_extension_31"
VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012
VK_KHR_get_surface_capabilities2 = 1
VK_KHX_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHX_external_semaphore"
VK_KHX_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHX_external_memory"
VK_KHR_EXTENSION_115_EXTENSION_NAME = "VK_KHR_extension_115"
VK_KHX_device_group = 1
VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain"
VK_EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata"
VK_AMD_gpu_shader_half_float = 1
VK_AMD_EXTENSION_138_EXTENSION_NAME = "VK_AMD_extension_138"
VK_KHR_EXTENSION_118_SPEC_VERSION = 0
VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 0x00000001
VK_AMD_extension_40 = 1
VK_IMG_extension_109 = 1
VK_NV_EXTENSION_154_EXTENSION_NAME = "VK_NV_extension_154"
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = 1000059000
VK_KHR_EXTENSION_131_SPEC_VERSION = 0
VK_AMD_EXTENSION_41_EXTENSION_NAME = "VK_AMD_extension_41"
VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = 1
VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001
VK_NV_extension_152 = 1
VK_KHR_EXTENSION_132_SPEC_VERSION = 0
VK_AMD_EXTENSION_33_SPEC_VERSION = 0
VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height"
VK_NV_EXTENSION_53_EXTENSION_NAME = "VK_NV_extension_53"
VK_NV_extension_154 = 1
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001
VK_AMD_EXTENSION_47_EXTENSION_NAME = "VK_AMD_extension_47"
VK_NVX_multiview_per_view_attributes = 1
VK_AMD_extension_144 = 1
VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = 1
VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = 1
VK_AMD_EXTENSION_136_EXTENSION_NAME = "VK_AMD_extension_136"
VK_AMD_EXTENSION_47_SPEC_VERSION = 0
VK_GOOGLE_extension_49 = 1
VK_KHR_EXTENSION_128_EXTENSION_NAME = "VK_KHR_extension_128"
VK_KHR_surface = 1
VK_IMG_EXTENSION_69_EXTENSION_NAME = "VK_IMG_extension_69"
VK_EXT_display_surface_counter = 1
VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = 1
VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain"
VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 1
VK_KHR_EXTENSION_130_SPEC_VERSION = 0
VK_KHR_extension_82 = 1
VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME = "VK_NV_viewport_array2"
VK_AMD_EXTENSION_33_EXTENSION_NAME = "VK_AMD_extension_33"
VK_NV_GLSL_SHADER_SPEC_VERSION = 1
VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME = "VK_NV_external_memory_win32"
VK_IMG_EXTENSION_110_SPEC_VERSION = 0
VK_AMD_EXTENSION_139_EXTENSION_NAME = "VK_AMD_extension_139"
VK_AMD_extension_43 = 1
VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION = 1
VK_ANDROID_native_buffer = 1
VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle"
VK_AMD_EXTENSION_144_EXTENSION_NAME = "VK_AMD_extension_144"
VK_AMD_EXTENSION_42_SPEC_VERSION = 0
VK_NVX_device_generated_commands = 1
VK_AMD_extension_133 = 1
VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax"
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 1000059004
VK_GOOGLE_EXTENSION_49_EXTENSION_NAME = "VK_GOOGLE_extension_49"
VK_NV_EXTENSION_155_SPEC_VERSION = 0
VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000
VK_EXT_HDR_METADATA_SPEC_VERSION = 1
VK_KHR_relaxed_block_layout_SPEC_VERSION = 0
VK_QUEUE_FAMILY_EXTERNAL_KHX = None
VK_KHR_MAINTENANCE1_EXTENSION_NAME = "VK_KHR_maintenance1"
VK_KHR_android_surface = 1
VK_AMD_EXTENSION_143_EXTENSION_NAME = "VK_AMD_extension_143"
VK_NV_extension_101 = 1
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHX = 1000076000
VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = 1
VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION = 1
VK_KHX_external_memory = 1
VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX = 1000086003
VK_AMD_EXTENSION_133_SPEC_VERSION = 0
VK_KHR_EXTENSION_118_EXTENSION_NAME = "VK_KHR_extension_118"
VK_ATTACHMENT_UNUSED = 4294967295
VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHX = 1000078001
VK_KHR_XCB_SURFACE_EXTENSION_NAME = "VK_KHR_xcb_surface"
VK_KHR_shared_presentable_image = 1
VK_MAX_DEVICE_GROUP_SIZE_KHX = None
VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHX = 1000071003
VK_NVX_extension_29 = 1
VK_EXT_acquire_xlib_display = 1
VK_EXT_hdr_metadata = 1
VK_KHR_EXTENSION_131_EXTENSION_NAME = "VK_KHR_extension_131"
VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker"
VK_AMD_extension_45 = 1
VK_AMD_EXTENSION_142_EXTENSION_NAME = "VK_AMD_extension_142"
VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHX = 1000070000
VK_LOD_CLAMP_NONE = 1000.0
VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005
VK_AMD_EXTENSION_45_EXTENSION_NAME = "VK_AMD_extension_45"
VK_AMD_EXTENSION_46_SPEC_VERSION = 0
VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000
VK_AMD_extension_138 = 1
VK_AMD_EXTENSION_135_SPEC_VERSION = 0
VK_KHR_WAYLAND_SURFACE_SPEC_VERSION = 6
VK_NVX_EXTENSION_30_EXTENSION_NAME = "VK_NVX_extension_30"
VK_KHR_EXTENSION_129_EXTENSION_NAME = "VK_EXT_extension_129"
VK_NV_EXTENSION_149_SPEC_VERSION = 0
VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2"
VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001
VK_KHX_WIN32_KEYED_MUTEX_SPEC_VERSION = 1
VK_AMD_draw_indirect_count = 1
VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities"
VK_REMAINING_MIP_LEVELS = 4294967295
VK_KHX_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHX_external_semaphore_fd"
VK_KHX_external_semaphore = 1
VK_KHR_EXTENSION_119_EXTENSION_NAME = "VK_KHR_extension_119"
VK_KHR_XLIB_SURFACE_SPEC_VERSION = 6
VK_AMD_extension_141 = 1
VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control"
VK_DEPENDENCY_VIEW_LOCAL_BIT_KHX = 0x00000002
VK_IMG_extension_69 = 1
VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000
VK_NVX_extension_30 = 1
VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000
VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1
VK_NV_geometry_shader_passthrough = 1
VK_AMD_gcn_shader = 1
VK_AMD_extension_139 = 1
VK_NVX_EXTENSION_51_EXTENSION_NAME = "VK_NVX_extension_51"
VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHX = 1000074001
VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000
VK_KHR_EXTENSION_113_EXTENSION_NAME = "VK_KHR_extension_113"
VK_IMG_EXTENSION_109_SPEC_VERSION = 0
VK_AMD_EXTENSION_141_SPEC_VERSION = 0
VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION = 4
VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags"
VK_KHR_EXTENSION_117_SPEC_VERSION = 0
VK_AMD_EXTENSION_40_EXTENSION_NAME = "VK_AMD_extension_40"
VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003
VK_AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader"
VK_NV_extension_53 = 1
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000
VK_KHR_extension_117 = 1
VK_NV_EXTENSION_103_EXTENSION_NAME = "VK_NV_extension_103"
VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006
VK_KHX_DEVICE_GROUP_CREATION_SPEC_VERSION = 1
VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000
VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX = 1000086001
VK_AMD_extension_18 = 1
VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001
VK_MESA_extension_126 = 1
VK_NN_VI_SURFACE_EXTENSION_NAME = "VK_NN_vi_surface"
VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = 1
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHX = 1000060009
VK_AMD_EXTENSION_139_SPEC_VERSION = 0
VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001
VK_KHR_relaxed_block_layout = 1
VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHX = 1000060005
VK_KHR_DISPLAY_SPEC_VERSION = 21
VK_AMD_EXTENSION_142_SPEC_VERSION = 0
VK_KHR_EXTENSION_114_EXTENSION_NAME = "VK_KHR_extension_114"
VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface"
VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = 1
VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059003
VK_KHX_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1
VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000
VK_GOOGLE_EXTENSION_50_SPEC_VERSION = 0
VK_KHR_extension_147_EXTENSION_NAME = "VK_KHR_extension_147"
VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002
VK_IMG_EXTENSION_108_SPEC_VERSION = 0
VK_AMD_SHADER_BALLOT_SPEC_VERSION = 1
VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = 1
VK_IMG_extension_111 = 1
VK_KHR_extension_147 = 1
VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4
VK_KHX_WIN32_KEYED_MUTEX_EXTENSION_NAME = "VK_KHX_win32_keyed_mutex"
VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002
VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHX = 1000060008
VK_AMD_extension_41 = 1
VK_KHR_EXTENSION_117_EXTENSION_NAME = "VK_KHR_extension_117"
VK_NV_extension_150 = 1
VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report"
VK_AMD_extension_142 = 1
VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = 1
VK_KHR_maintenance1 = 1
VK_QUEUE_FAMILY_IGNORED = 4294967295
VK_MAX_MEMORY_TYPES = 32
VK_KHR_XLIB_SURFACE_EXTENSION_NAME = "VK_KHR_xlib_surface"
VK_NV_EXTENSION_101_SPEC_VERSION = 0
VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = 1
VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage"
VK_AMD_extension_46 = 1
VK_KHR_extension_114 = 1
VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007
VK_KHR_EXTENSION_116_SPEC_VERSION = 0
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000
VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor"
VK_AMD_extension_140 = 1
VK_AMD_EXTENSION_43_SPEC_VERSION = 0
VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001
VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace"
VK_KHR_variable_pointers_EXTENSION_NAME = "VK_KHR_variable_pointers"
VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = 1000059002
VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation"
VK_KHX_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = 1
VK_NV_EXTENSION_104_SPEC_VERSION = 0
VK_IMG_EXTENSION_107_SPEC_VERSION = 0
VK_NV_EXTENSION_104_EXTENSION_NAME = "VK_NV_extension_104"
VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002
VK_NV_EXTENSION_152_SPEC_VERSION = 0
VK_FILTER_CUBIC_IMG = 1000015000
VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = 0x00000020
VK_EXT_validation_flags = 1
VK_AMD_EXTENSION_39_EXTENSION_NAME = "VK_AMD_extension_39"
VK_NV_external_memory_capabilities = 1
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000
VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHX = 1000060012
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHX = 1000060000
VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter"
VK_IMG_extension_107 = 1
VK_OBJECT_TYPE_OBJECT_TABLE_NVX = 1000086000
VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count"
VK_KHR_EXTENSION_148_SPEC_VERSION = 0
VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = 1
VK_KHX_EXTERNAL_MEMORY_SPEC_VERSION = 1
VK_OBJECT_TYPE_SURFACE_KHR = 1000000000
VK_AMD_EXTENSION_133_EXTENSION_NAME = "VK_AMD_extension_133"
VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles"
VK_KHR_MIR_SURFACE_SPEC_VERSION = 4
VK_AMD_GCN_SHADER_SPEC_VERSION = 1
VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot"
VK_SUBPASS_EXTERNAL = 4294967295
VK_AMD_EXTENSION_39_SPEC_VERSION = 0
VK_NV_dedicated_allocation = 1
VK_EXT_discard_rectangles = 1
VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = 0x00004000
VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000
VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader"
VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = 1
VK_AMD_EXTENSION_137_SPEC_VERSION = 0
VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000
VK_NV_EXTENSION_153_EXTENSION_NAME = "VK_NV_extension_153"
VK_NV_extension_1 = 1
VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX = 1000086000
VK_KHR_extension_128 = 1
VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHX = 0x00000008
VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = 1
VK_AMD_EXTENSION_44_EXTENSION_NAME = "VK_AMD_extension_44"
VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059007
VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = 1
VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHX = 1000072002
VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = 1
VK_NN_VI_SURFACE_SPEC_VERSION = 1
VK_EXT_direct_mode_display = 1
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHX = 1000072000
VK_EXT_extension_148 = 1
VK_AMD_EXTENSION_140_EXTENSION_NAME = "VK_AMD_extension_140"
VK_EXT_debug_marker = 1
VK_NV_EXTENSION_150_SPEC_VERSION = 0
VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NVX_device_generated_commands"
VK_AMD_shader_trinary_minmax = 1
VK_KHR_EXTENSION_128_SPEC_VERSION = 0
VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = 1
VK_IMG_EXTENSION_107_EXTENSION_NAME = "VK_IMG_extension_107"
VK_IMG_extension_110 = 1
VK_KHR_display_swapchain = 1
VK_NV_extension_149 = 1
VK_NV_win32_keyed_mutex = 1
VK_AMD_EXTENSION_32_EXTENSION_NAME = "VK_AMD_extension_32"
VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHX = 1000077000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHX = 1000053001
VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = 1
VK_AMD_negative_viewport_height = 1
VK_KHR_extension_118 = 1
VK_MAX_EXTENSION_NAME_SIZE = 256
VK_KHX_EXTERNAL_MEMORY_WIN32_SPEC_VERSION = 1
VK_AMD_EXTENSION_18_EXTENSION_NAME = "VK_AMD_extension_18"
VK_REMAINING_ARRAY_LAYERS = 4294967295
VK_AMD_EXTENSION_134_EXTENSION_NAME = "VK_AMD_extension_134"
VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002
VK_KHR_extension_146_SPEC_VERSION = 0
VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 9
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000
VK_AMD_EXTENSION_140_SPEC_VERSION = 0
VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHX = 1000070001
VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000
VK_KHR_xlib_surface = 1
VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHX = 1000060001
VK_KHR_EXTENSION_132_EXTENSION_NAME = "VK_KHR_extension_132"
VK_EXT_extension_28 = 1
VK_NVX_EXTENSION_52_SPEC_VERSION = 0
VK_NV_EXTENSION_156_SPEC_VERSION = 0
VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000
VK_KHR_WIN32_SURFACE_EXTENSION_NAME = "VK_KHR_win32_surface"
VK_KHR_extension_84 = 1
VK_AMD_EXTENSION_44_SPEC_VERSION = 0
VK_AMD_EXTENSION_143_SPEC_VERSION = 0
VK_KHR_EXTENSION_83_EXTENSION_NAME = "VK_KHR_extension_83"
VK_AMD_EXTENSION_20_EXTENSION_NAME = "VK_AMD_extension_20"
VK_KHR_shader_draw_parameters = 1
VK_IMG_EXTENSION_111_SPEC_VERSION = 0
VK_AMD_extension_134 = 1
VK_MVK_IOS_SURFACE_SPEC_VERSION = 2
VK_KHR_EXTENSION_94_EXTENSION_NAME = "VK_KHR_extension_94"
VK_IMG_EXTENSION_111_EXTENSION_NAME = "VK_IMG_extension_111"
VK_KHR_EXTENSION_116_EXTENSION_NAME = "VK_KHR_extension_116"
VK_MESA_EXTENSION_126_EXTENSION_NAME = "VK_MESA_extension_126"
VK_KHR_sampler_mirror_clamp_to_edge = 1
VK_AMD_EXTENSION_35_SPEC_VERSION = 0
VK_GOOGLE_display_timing = 1
VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000
VK_PIPELINE_CREATE_DISPATCH_BASE_KHX = 0x00000010
VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHX = 1000060003
VK_NV_extension_104 = 1
VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHX = 1000060007
VK_MVK_moltenvk = 1
VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256
VK_MVK_MACOS_SURFACE_EXTENSION_NAME = "VK_MVK_macos_surface"
VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002
VK_EXT_swapchain_colorspace = 1
VK_AMD_EXTENSION_144_SPEC_VERSION = 0
VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes"
VK_KHR_EXTENSION_82_SPEC_VERSION = 0
VK_KHR_XCB_SURFACE_SPEC_VERSION = 6
VK_AMD_EXTENSION_18_SPEC_VERSION = 0
VK_NV_extension_103 = 1
VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image"
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHX = 1000071004
VK_KHX_EXTERNAL_SEMAPHORE_SPEC_VERSION = 1
VK_KHR_EXTENSION_84_SPEC_VERSION = 0
VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order"
VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2"
VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000
VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter"
VK_AMD_EXTENSION_24_EXTENSION_NAME = "VK_AMD_extension_24"
VK_AMD_EXTENSION_138_SPEC_VERSION = 0
VK_EXT_DEBUG_MARKER_SPEC_VERSION = 4
VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory"
VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010
VK_KHX_multiview = 1
VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX = 1000086005
VK_MESA_EXTENSION_127_SPEC_VERSION = 0
VK_AMD_extension_20 = 1
VK_KHR_extension_147_SPEC_VERSION = 0
VK_KHR_EXTENSION_83_SPEC_VERSION = 0
VK_NV_EXTENSION_152_EXTENSION_NAME = "VK_NV_extension_152"
VK_KHR_EXTENSION_122_EXTENSION_NAME = "VK_KHR_extension_122"
VK_NV_EXTENSION_1_SPEC_VERSION = 0
VK_KHR_MIR_SURFACE_EXTENSION_NAME = "VK_KHR_mir_surface"
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000
VK_NVX_extension_31 = 1
VK_NV_extension_151 = 1
VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHX = 1000075000
VK_NV_sample_mask_override_coverage = 1
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000
VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = 1
VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000
VK_AMD_EXTENSION_137_EXTENSION_NAME = "VK_AMD_extension_137"
VK_ARM_extension_01 = 1
VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION = 1
VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHX = 1000073002
VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 0x00000001
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHX = 1000072001
VK_EXT_shader_subgroup_ballot = 1
VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000
VK_KHR_ANDROID_SURFACE_SPEC_VERSION = 6
VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005
VK_NV_EXTENSION_149_EXTENSION_NAME = "VK_NV_extension_149"
VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing"
VK_EXT_EXTENSION_28_EXTENSION_NAME = "VK_NV_extension_28"
VK_KHR_win32_surface = 1
VK_TRUE = 1
VK_KHX_external_memory_fd = 1
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001
VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = 1
VK_AMD_EXTENSION_17_EXTENSION_NAME = "VK_AMD_extension_17"
VK_KHR_mir_surface = 1
VK_AMD_shader_ballot = 1
VK_NV_EXTENSION_156_EXTENSION_NAME = "VK_NV_extension_156"
VK_KHR_xcb_surface = 1
VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHX = 1000060004
VK_MVK_MOLTENVK_SPEC_VERSION = 0
VK_AMD_EXTENSION_20_SPEC_VERSION = 0
VK_KHX_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME = "VK_KHX_external_memory_win32"
VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000
VK_KHR_ANDROID_SURFACE_EXTENSION_NAME = "VK_KHR_android_surface"
VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX = 1000086001
VK_KHX_win32_keyed_mutex = 1
VK_KHR_extension_83 = 1
VK_AMD_EXTENSION_41_SPEC_VERSION = 0
VK_AMD_EXTENSION_17_SPEC_VERSION = 0
VK_MAX_MEMORY_HEAPS = 16
VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001
VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001
VK_KHX_DEVICE_GROUP_EXTENSION_NAME = "VK_KHX_device_group"
VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHX = 1000079000
VK_NVX_EXTENSION_52_EXTENSION_NAME = "VK_NVX_extension_52"
VK_NV_extension_156 = 1
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000
VK_MESA_extension_127 = 1
VK_EXT_extension_129 = 1
VK_KHR_variable_pointers_SPEC_VERSION = 0
VK_KHR_EXTENSION_130_EXTENSION_NAME = "VK_KHR_extension_130"
VK_IMG_FILTER_CUBIC_SPEC_VERSION = 1
VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001
VK_KHX_external_memory_win32 = 1
VK_NV_EXTENSION_1_EXTENSION_NAME = "VK_NV_extension_1"
VK_MVK_MOLTENVK_EXTENSION_NAME = "VK_MVK_moltenvk"
VK_AMD_EXTENSION_135_EXTENSION_NAME = "VK_AMD_extension_135"
VK_DEPENDENCY_DEVICE_GROUP_BIT_KHX = 0x00000004
VK_IMG_FORMAT_PVRTC_SPEC_VERSION = 1
VK_KHR_swapchain = 1
VK_NV_external_memory_win32 = 1
VK_KHR_incremental_present = 1
VK_KHR_extension_122 = 1
VK_KHR_display = 1
VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = 1
VK_NVX_EXTENSION_29_SPEC_VERSION = 0
VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHX = 1000073001
VK_AMD_extension_33 = 1
VK_KHX_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHX_device_group_creation"
VK_GOOGLE_extension_50 = 1
VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = 1
VK_KHX_MULTIVIEW_EXTENSION_NAME = "VK_KHX_multiview"
VK_NV_EXTENSION_153_SPEC_VERSION = 0
VK_NV_EXTENSION_102_SPEC_VERSION = 0
VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004
VK_KHX_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHX_external_memory_fd"
VK_AMD_EXTENSION_42_EXTENSION_NAME = "VK_AMD_extension_42"
VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION = 1
VK_KHX_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = 1
VK_AMD_EXTENSION_46_EXTENSION_NAME = "VK_AMD_extension_46"
VK_EXT_shader_subgroup_vote = 1
VK_MAX_DESCRIPTION_SIZE = 256
VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX = 0x00020000
VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX = 1000086002
VK_KHR_SWAPCHAIN_SPEC_VERSION = 68
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000
VK_AMD_extension_44 = 1
VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = 1
VK_AMD_EXTENSION_32_SPEC_VERSION = 0
VK_KHX_external_semaphore_win32 = 1
VK_NV_extension_102 = 1
VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000
VK_KHR_EXTENSION_119_SPEC_VERSION = 0
VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHX = 0x00000002
VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHX = 1000078000
VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display"
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1000059001
VK_ARM_extension_02 = 1
VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHX = 1000071001
VK_KHR_EXTENSION_114_SPEC_VERSION = 0
VK_LUID_SIZE_KHX = None
VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present"
VK_KHX_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHX_external_semaphore_capabilities"
VK_NVX_EXTENSION_51_SPEC_VERSION = 0
VK_NV_EXTENSION_151_EXTENSION_NAME = "VK_NV_extension_151"
VK_AMD_extension_17 = 1
VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters"
VK_AMD_EXTENSION_141_EXTENSION_NAME = "VK_AMD_extension_141"
VK_NV_EXTENSION_53_SPEC_VERSION = 0
VK_KHR_EXTENSION_84_EXTENSION_NAME = "VK_KHR_extension_84"
VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000
VK_KHR_extension_119 = 1
VK_NV_viewport_swizzle = 1
VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX = 1000086004
VK_KHR_extension_146_EXTENSION_NAME = "VK_KHR_extension_146"
VK_KHR_EXTENSION_115_SPEC_VERSION = 0
VK_KHR_push_descriptor = 1
VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_xlib_display"
VK_NV_EXTENSION_102_EXTENSION_NAME = "VK_NV_extension_102"
VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002
VK_KHR_extension_132 = 1
VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = 1
VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHX = 1000078002
VK_AMD_extension_35 = 1
VK_IMG_EXTENSION_109_EXTENSION_NAME = "VK_IMG_extension_109"
VK_AMD_EXTENSION_43_EXTENSION_NAME = "VK_AMD_extension_43"
VK_KHR_EXTENSION_94_SPEC_VERSION = 0
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 1000059006
VK_IMG_extension_108 = 1
VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR = 1000007000
VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000
VK_ARM_EXTENSION_02_SPEC_VERSION = 0
VK_AMD_extension_136 = 1
VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHX = 1000053002
VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = 0x00008000
VK_IMG_format_pvrtc = 1
VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000
VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000
VK_KHX_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION = 1
VK_IMG_EXTENSION_69_SPEC_VERSION = 0
VK_NV_EXTENSION_150_EXTENSION_NAME = "VK_NV_extension_150"
VK_AMD_EXTENSION_136_SPEC_VERSION = 0
VK_KHR_get_physical_device_properties2 = 1
VK_WHOLE_SIZE = -1
VK_NVX_EXTENSION_29_EXTENSION_NAME = "VK_NVX_extension_29"
VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHX = 1000073000
VK_NV_EXTENSION_101_EXTENSION_NAME = "VK_NV_extension_101"
VK_AMD_EXTENSION_134_SPEC_VERSION = 0
VK_AMD_extension_135 = 1
VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000
VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = 1

VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT



class VkException(Exception):
    pass


class VkError(Exception):
    pass


class VkSuboptimalKhr(VkException):
    pass
class VkErrorOutOfDateKhr(VkException):
    pass
class VkEventSet(VkException):
    pass
class VkNotReady(VkException):
    pass
class VkTimeout(VkException):
    pass
class VkEventReset(VkException):
    pass
class VkErrorDeviceLost(VkException):
    pass
class VkIncomplete(VkException):
    pass

class VkErrorSurfaceLostKhr(VkError):
    pass
class VkErrorOutOfHostMemory(VkError):
    pass
class VkErrorOutOfDeviceMemory(VkError):
    pass
class VkErrorFormatNotSupported(VkError):
    pass
class VkErrorInitializationFailed(VkError):
    pass
class VkErrorIncompatibleDisplayKhr(VkError):
    pass
class VkErrorFeatureNotPresent(VkError):
    pass
class VkErrorFragmentedPool(VkError):
    pass
class VkErrorExtensionNotPresent(VkError):
    pass
class VkErrorNativeWindowInUseKhr(VkError):
    pass
class VkErrorOutOfPoolMemoryKhr(VkError):
    pass
class VkErrorMemoryMapFailed(VkError):
    pass
class VkErrorTooManyObjects(VkError):
    pass
class VkErrorLayerNotPresent(VkError):
    pass
class VkErrorIncompatibleDriver(VkError):
    pass
class VkErrorInvalidExternalHandleKhx(VkError):
    pass
class VkErrorInvalidShaderNv(VkError):
    pass

_exception_codes = {
    1000001003:VkSuboptimalKhr,
    -1000001004:VkErrorOutOfDateKhr,
    3:VkEventSet,
    1:VkNotReady,
    2:VkTimeout,
    4:VkEventReset,
    -4:VkErrorDeviceLost,
    5:VkIncomplete,

    -1000000000:VkErrorSurfaceLostKhr,
    -1:VkErrorOutOfHostMemory,
    -2:VkErrorOutOfDeviceMemory,
    -11:VkErrorFormatNotSupported,
    -3:VkErrorInitializationFailed,
    -1000003001:VkErrorIncompatibleDisplayKhr,
    -8:VkErrorFeatureNotPresent,
    -12:VkErrorFragmentedPool,
    -7:VkErrorExtensionNotPresent,
    -1000000001:VkErrorNativeWindowInUseKhr,
    -1000069000:VkErrorOutOfPoolMemoryKhr,
    -5:VkErrorMemoryMapFailed,
    -10:VkErrorTooManyObjects,
    -6:VkErrorLayerNotPresent,
    -9:VkErrorIncompatibleDriver,
    -1000072003:VkErrorInvalidExternalHandleKhx,
    -1000012000:VkErrorInvalidShaderNv,
}

_internal_vkInternalAllocationNotification = None

@ffi.callback('PFN_vkInternalAllocationNotification')
def _external_vkInternalAllocationNotification(*args):
    return _internal_vkInternalAllocationNotification(*[_cstr(x) for x in args])
_internal_vkReallocationFunction = None

@ffi.callback('PFN_vkReallocationFunction')
def _external_vkReallocationFunction(*args):
    return _internal_vkReallocationFunction(*[_cstr(x) for x in args])
_internal_vkFreeFunction = None

@ffi.callback('PFN_vkFreeFunction')
def _external_vkFreeFunction(*args):
    return _internal_vkFreeFunction(*[_cstr(x) for x in args])
_internal_vkDebugReportCallbackEXT = None

@ffi.callback('PFN_vkDebugReportCallbackEXT')
def _external_vkDebugReportCallbackEXT(*args):
    return _internal_vkDebugReportCallbackEXT(*[_cstr(x) for x in args])
_internal_vkInternalFreeNotification = None

@ffi.callback('PFN_vkInternalFreeNotification')
def _external_vkInternalFreeNotification(*args):
    return _internal_vkInternalFreeNotification(*[_cstr(x) for x in args])
_internal_vkVoidFunction = None

@ffi.callback('PFN_vkVoidFunction')
def _external_vkVoidFunction(*args):
    return _internal_vkVoidFunction(*[_cstr(x) for x in args])
_internal_vkAllocationFunction = None

@ffi.callback('PFN_vkAllocationFunction')
def _external_vkAllocationFunction(*args):
    return _internal_vkAllocationFunction(*[_cstr(x) for x in args])


def _get_pfn_name(struct_name):
    if struct_name == 'VkAllocationCallbacks':
        return 'vkInternalAllocationNotification'
    if struct_name == 'VkAllocationCallbacks':
        return 'vkReallocationFunction'
    if struct_name == 'VkAllocationCallbacks':
        return 'vkFreeFunction'
    if struct_name == 'VkDebugReportCallbackCreateInfoEXT':
        return 'vkDebugReportCallbackEXT'
    if struct_name == 'VkAllocationCallbacks':
        return 'vkInternalFreeNotification'
    if struct_name == 'VkAllocationCallbacks':
        return 'vkVoidFunction'
    if struct_name == 'VkAllocationCallbacks':
        return 'vkAllocationFunction'


def _new(ctype, **kwargs):
    _type = ffi.typeof(ctype)

    # keep only valued kwargs
    kwargs = {k: kwargs[k] for k in kwargs if kwargs[k]}

    # cast pointer
    ptrs = {}
    pfns = {}
    pcs = {}
    for k, v in kwargs.items():
        # convert tuple pair to dict
        ktype = dict(_type.fields)[k].type

        if k == 'pCode':
            pcs[k] = ffi.cast('uint32_t*', ffi.from_buffer(v))
        elif k.startswith('pfn'):
            pfn_name = _get_pfn_name(ctype)
            mod = sys.modules[__name__]
            setattr(mod, '_internal_' + pfn_name, v)
            pfns[k] = getattr(mod, '_external_' + pfn_name)
        elif ktype.kind == 'pointer':
            ptrs[k] = _cast_ptr(v, ktype)

    # init object
    init = dict(kwargs,  **{k: v for k, (v, _) in ptrs.items()})
    init.update(pfns)
    init.update(pcs)

    ret = ffi.new(_type.cname + '*', init)[0]

    # reference created pointer in the object
    _weakkey_dict[ret] = [v for _, v in ptrs.values() if v != ffi.NULL]
    if pcs:
        _weakkey_dict[ret].extend([x for x in pcs.values()])

    return ret



def VkOffset2D(x=None,y=None,):
    return _new('VkOffset2D', x=x,y=y)
def VkOffset3D(x=None,y=None,z=None,):
    return _new('VkOffset3D', x=x,y=y,z=z)
def VkExtent2D(width=None,height=None,):
    return _new('VkExtent2D', width=width,height=height)
def VkExtent3D(width=None,height=None,depth=None,):
    return _new('VkExtent3D', width=width,height=height,depth=depth)
def VkViewport(x=None,y=None,width=None,height=None,minDepth=None,maxDepth=None,):
    return _new('VkViewport', x=x,y=y,width=width,height=height,minDepth=minDepth,maxDepth=maxDepth)
def VkRect2D(offset=None,extent=None,):
    return _new('VkRect2D', offset=offset,extent=extent)
def VkRect3D(offset=None,extent=None,):
    return _new('VkRect3D', offset=offset,extent=extent)
def VkClearRect(rect=None,baseArrayLayer=None,layerCount=None,):
    return _new('VkClearRect', rect=rect,baseArrayLayer=baseArrayLayer,layerCount=layerCount)
def VkComponentMapping(r=None,g=None,b=None,a=None,):
    return _new('VkComponentMapping', r=r,g=g,b=b,a=a)
def VkPhysicalDeviceProperties(apiVersion=None,driverVersion=None,vendorID=None,deviceID=None,deviceType=None,deviceName=None,pipelineCacheUUID=None,limits=None,sparseProperties=None,):
    return _new('VkPhysicalDeviceProperties', apiVersion=apiVersion,driverVersion=driverVersion,vendorID=vendorID,deviceID=deviceID,deviceType=deviceType,deviceName=deviceName,pipelineCacheUUID=pipelineCacheUUID,limits=limits,sparseProperties=sparseProperties)
def VkExtensionProperties(extensionName=None,specVersion=None,):
    return _new('VkExtensionProperties', extensionName=extensionName,specVersion=specVersion)
def VkLayerProperties(layerName=None,specVersion=None,implementationVersion=None,description=None,):
    return _new('VkLayerProperties', layerName=layerName,specVersion=specVersion,implementationVersion=implementationVersion,description=description)
def VkApplicationInfo(sType=None,pNext=None,pApplicationName=None,applicationVersion=None,pEngineName=None,engineVersion=None,apiVersion=None,):
    return _new('VkApplicationInfo', sType=sType,pNext=pNext,pApplicationName=pApplicationName,applicationVersion=applicationVersion,pEngineName=pEngineName,engineVersion=engineVersion,apiVersion=apiVersion)
def VkAllocationCallbacks(pUserData=None,pfnAllocation=None,pfnReallocation=None,pfnFree=None,pfnInternalAllocation=None,pfnInternalFree=None,):
    return _new('VkAllocationCallbacks', pUserData=pUserData,pfnAllocation=pfnAllocation,pfnReallocation=pfnReallocation,pfnFree=pfnFree,pfnInternalAllocation=pfnInternalAllocation,pfnInternalFree=pfnInternalFree)
def VkDeviceQueueCreateInfo(sType=None,pNext=None,flags=None,queueFamilyIndex=None,queueCount=None,pQueuePriorities=None,):
    return _new('VkDeviceQueueCreateInfo', sType=sType,pNext=pNext,flags=flags,queueFamilyIndex=queueFamilyIndex,queueCount=queueCount,pQueuePriorities=pQueuePriorities)
def VkDeviceCreateInfo(sType=None,pNext=None,flags=None,queueCreateInfoCount=None,pQueueCreateInfos=None,enabledLayerCount=None,ppEnabledLayerNames=None,enabledExtensionCount=None,ppEnabledExtensionNames=None,pEnabledFeatures=None,):
    return _new('VkDeviceCreateInfo', sType=sType,pNext=pNext,flags=flags,queueCreateInfoCount=queueCreateInfoCount,pQueueCreateInfos=pQueueCreateInfos,enabledLayerCount=enabledLayerCount,ppEnabledLayerNames=ppEnabledLayerNames,enabledExtensionCount=enabledExtensionCount,ppEnabledExtensionNames=ppEnabledExtensionNames,pEnabledFeatures=pEnabledFeatures)
def VkInstanceCreateInfo(sType=None,pNext=None,flags=None,pApplicationInfo=None,enabledLayerCount=None,ppEnabledLayerNames=None,enabledExtensionCount=None,ppEnabledExtensionNames=None,):
    return _new('VkInstanceCreateInfo', sType=sType,pNext=pNext,flags=flags,pApplicationInfo=pApplicationInfo,enabledLayerCount=enabledLayerCount,ppEnabledLayerNames=ppEnabledLayerNames,enabledExtensionCount=enabledExtensionCount,ppEnabledExtensionNames=ppEnabledExtensionNames)
def VkQueueFamilyProperties(queueFlags=None,queueCount=None,timestampValidBits=None,minImageTransferGranularity=None,):
    return _new('VkQueueFamilyProperties', queueFlags=queueFlags,queueCount=queueCount,timestampValidBits=timestampValidBits,minImageTransferGranularity=minImageTransferGranularity)
def VkPhysicalDeviceMemoryProperties(memoryTypeCount=None,memoryTypes=None,memoryHeapCount=None,memoryHeaps=None,):
    return _new('VkPhysicalDeviceMemoryProperties', memoryTypeCount=memoryTypeCount,memoryTypes=memoryTypes,memoryHeapCount=memoryHeapCount,memoryHeaps=memoryHeaps)
def VkMemoryAllocateInfo(sType=None,pNext=None,allocationSize=None,memoryTypeIndex=None,):
    return _new('VkMemoryAllocateInfo', sType=sType,pNext=pNext,allocationSize=allocationSize,memoryTypeIndex=memoryTypeIndex)
def VkMemoryRequirements(size=None,alignment=None,memoryTypeBits=None,):
    return _new('VkMemoryRequirements', size=size,alignment=alignment,memoryTypeBits=memoryTypeBits)
def VkSparseImageFormatProperties(aspectMask=None,imageGranularity=None,flags=None,):
    return _new('VkSparseImageFormatProperties', aspectMask=aspectMask,imageGranularity=imageGranularity,flags=flags)
def VkSparseImageMemoryRequirements(formatProperties=None,imageMipTailFirstLod=None,imageMipTailSize=None,imageMipTailOffset=None,imageMipTailStride=None,):
    return _new('VkSparseImageMemoryRequirements', formatProperties=formatProperties,imageMipTailFirstLod=imageMipTailFirstLod,imageMipTailSize=imageMipTailSize,imageMipTailOffset=imageMipTailOffset,imageMipTailStride=imageMipTailStride)
def VkMemoryType(propertyFlags=None,heapIndex=None,):
    return _new('VkMemoryType', propertyFlags=propertyFlags,heapIndex=heapIndex)
def VkMemoryHeap(size=None,flags=None,):
    return _new('VkMemoryHeap', size=size,flags=flags)
def VkMappedMemoryRange(sType=None,pNext=None,memory=None,offset=None,size=None,):
    return _new('VkMappedMemoryRange', sType=sType,pNext=pNext,memory=memory,offset=offset,size=size)
def VkFormatProperties(linearTilingFeatures=None,optimalTilingFeatures=None,bufferFeatures=None,):
    return _new('VkFormatProperties', linearTilingFeatures=linearTilingFeatures,optimalTilingFeatures=optimalTilingFeatures,bufferFeatures=bufferFeatures)
def VkImageFormatProperties(maxExtent=None,maxMipLevels=None,maxArrayLayers=None,sampleCounts=None,maxResourceSize=None,):
    return _new('VkImageFormatProperties', maxExtent=maxExtent,maxMipLevels=maxMipLevels,maxArrayLayers=maxArrayLayers,sampleCounts=sampleCounts,maxResourceSize=maxResourceSize)
def VkDescriptorBufferInfo(buffer=None,offset=None,range=None,):
    return _new('VkDescriptorBufferInfo', buffer=buffer,offset=offset,range=range)
def VkDescriptorImageInfo(sampler=None,imageView=None,imageLayout=None,):
    return _new('VkDescriptorImageInfo', sampler=sampler,imageView=imageView,imageLayout=imageLayout)
def VkWriteDescriptorSet(sType=None,pNext=None,dstSet=None,dstBinding=None,dstArrayElement=None,descriptorCount=None,descriptorType=None,pImageInfo=None,pBufferInfo=None,pTexelBufferView=None,):
    return _new('VkWriteDescriptorSet', sType=sType,pNext=pNext,dstSet=dstSet,dstBinding=dstBinding,dstArrayElement=dstArrayElement,descriptorCount=descriptorCount,descriptorType=descriptorType,pImageInfo=pImageInfo,pBufferInfo=pBufferInfo,pTexelBufferView=pTexelBufferView)
def VkCopyDescriptorSet(sType=None,pNext=None,srcSet=None,srcBinding=None,srcArrayElement=None,dstSet=None,dstBinding=None,dstArrayElement=None,descriptorCount=None,):
    return _new('VkCopyDescriptorSet', sType=sType,pNext=pNext,srcSet=srcSet,srcBinding=srcBinding,srcArrayElement=srcArrayElement,dstSet=dstSet,dstBinding=dstBinding,dstArrayElement=dstArrayElement,descriptorCount=descriptorCount)
def VkBufferCreateInfo(sType=None,pNext=None,flags=None,size=None,usage=None,sharingMode=None,queueFamilyIndexCount=None,pQueueFamilyIndices=None,):
    return _new('VkBufferCreateInfo', sType=sType,pNext=pNext,flags=flags,size=size,usage=usage,sharingMode=sharingMode,queueFamilyIndexCount=queueFamilyIndexCount,pQueueFamilyIndices=pQueueFamilyIndices)
def VkBufferViewCreateInfo(sType=None,pNext=None,flags=None,buffer=None,format=None,offset=None,range=None,):
    return _new('VkBufferViewCreateInfo', sType=sType,pNext=pNext,flags=flags,buffer=buffer,format=format,offset=offset,range=range)
def VkImageSubresource(aspectMask=None,mipLevel=None,arrayLayer=None,):
    return _new('VkImageSubresource', aspectMask=aspectMask,mipLevel=mipLevel,arrayLayer=arrayLayer)
def VkImageSubresourceLayers(aspectMask=None,mipLevel=None,baseArrayLayer=None,layerCount=None,):
    return _new('VkImageSubresourceLayers', aspectMask=aspectMask,mipLevel=mipLevel,baseArrayLayer=baseArrayLayer,layerCount=layerCount)
def VkImageSubresourceRange(aspectMask=None,baseMipLevel=None,levelCount=None,baseArrayLayer=None,layerCount=None,):
    return _new('VkImageSubresourceRange', aspectMask=aspectMask,baseMipLevel=baseMipLevel,levelCount=levelCount,baseArrayLayer=baseArrayLayer,layerCount=layerCount)
def VkMemoryBarrier(sType=None,pNext=None,srcAccessMask=None,dstAccessMask=None,):
    return _new('VkMemoryBarrier', sType=sType,pNext=pNext,srcAccessMask=srcAccessMask,dstAccessMask=dstAccessMask)
def VkBufferMemoryBarrier(sType=None,pNext=None,srcAccessMask=None,dstAccessMask=None,srcQueueFamilyIndex=None,dstQueueFamilyIndex=None,buffer=None,offset=None,size=None,):
    return _new('VkBufferMemoryBarrier', sType=sType,pNext=pNext,srcAccessMask=srcAccessMask,dstAccessMask=dstAccessMask,srcQueueFamilyIndex=srcQueueFamilyIndex,dstQueueFamilyIndex=dstQueueFamilyIndex,buffer=buffer,offset=offset,size=size)
def VkImageMemoryBarrier(sType=None,pNext=None,srcAccessMask=None,dstAccessMask=None,oldLayout=None,newLayout=None,srcQueueFamilyIndex=None,dstQueueFamilyIndex=None,image=None,subresourceRange=None,):
    return _new('VkImageMemoryBarrier', sType=sType,pNext=pNext,srcAccessMask=srcAccessMask,dstAccessMask=dstAccessMask,oldLayout=oldLayout,newLayout=newLayout,srcQueueFamilyIndex=srcQueueFamilyIndex,dstQueueFamilyIndex=dstQueueFamilyIndex,image=image,subresourceRange=subresourceRange)
def VkImageCreateInfo(sType=None,pNext=None,flags=None,imageType=None,format=None,extent=None,mipLevels=None,arrayLayers=None,samples=None,tiling=None,usage=None,sharingMode=None,queueFamilyIndexCount=None,pQueueFamilyIndices=None,initialLayout=None,):
    return _new('VkImageCreateInfo', sType=sType,pNext=pNext,flags=flags,imageType=imageType,format=format,extent=extent,mipLevels=mipLevels,arrayLayers=arrayLayers,samples=samples,tiling=tiling,usage=usage,sharingMode=sharingMode,queueFamilyIndexCount=queueFamilyIndexCount,pQueueFamilyIndices=pQueueFamilyIndices,initialLayout=initialLayout)
def VkSubresourceLayout(offset=None,size=None,rowPitch=None,arrayPitch=None,depthPitch=None,):
    return _new('VkSubresourceLayout', offset=offset,size=size,rowPitch=rowPitch,arrayPitch=arrayPitch,depthPitch=depthPitch)
def VkImageViewCreateInfo(sType=None,pNext=None,flags=None,image=None,viewType=None,format=None,components=None,subresourceRange=None,):
    return _new('VkImageViewCreateInfo', sType=sType,pNext=pNext,flags=flags,image=image,viewType=viewType,format=format,components=components,subresourceRange=subresourceRange)
def VkBufferCopy(srcOffset=None,dstOffset=None,size=None,):
    return _new('VkBufferCopy', srcOffset=srcOffset,dstOffset=dstOffset,size=size)
def VkSparseMemoryBind(resourceOffset=None,size=None,memory=None,memoryOffset=None,flags=None,):
    return _new('VkSparseMemoryBind', resourceOffset=resourceOffset,size=size,memory=memory,memoryOffset=memoryOffset,flags=flags)
def VkSparseImageMemoryBind(subresource=None,offset=None,extent=None,memory=None,memoryOffset=None,flags=None,):
    return _new('VkSparseImageMemoryBind', subresource=subresource,offset=offset,extent=extent,memory=memory,memoryOffset=memoryOffset,flags=flags)
def VkSparseBufferMemoryBindInfo(buffer=None,bindCount=None,pBinds=None,):
    return _new('VkSparseBufferMemoryBindInfo', buffer=buffer,bindCount=bindCount,pBinds=pBinds)
def VkSparseImageOpaqueMemoryBindInfo(image=None,bindCount=None,pBinds=None,):
    return _new('VkSparseImageOpaqueMemoryBindInfo', image=image,bindCount=bindCount,pBinds=pBinds)
def VkSparseImageMemoryBindInfo(image=None,bindCount=None,pBinds=None,):
    return _new('VkSparseImageMemoryBindInfo', image=image,bindCount=bindCount,pBinds=pBinds)
def VkBindSparseInfo(sType=None,pNext=None,waitSemaphoreCount=None,pWaitSemaphores=None,bufferBindCount=None,pBufferBinds=None,imageOpaqueBindCount=None,pImageOpaqueBinds=None,imageBindCount=None,pImageBinds=None,signalSemaphoreCount=None,pSignalSemaphores=None,):
    return _new('VkBindSparseInfo', sType=sType,pNext=pNext,waitSemaphoreCount=waitSemaphoreCount,pWaitSemaphores=pWaitSemaphores,bufferBindCount=bufferBindCount,pBufferBinds=pBufferBinds,imageOpaqueBindCount=imageOpaqueBindCount,pImageOpaqueBinds=pImageOpaqueBinds,imageBindCount=imageBindCount,pImageBinds=pImageBinds,signalSemaphoreCount=signalSemaphoreCount,pSignalSemaphores=pSignalSemaphores)
def VkImageCopy(srcSubresource=None,srcOffset=None,dstSubresource=None,dstOffset=None,extent=None,):
    return _new('VkImageCopy', srcSubresource=srcSubresource,srcOffset=srcOffset,dstSubresource=dstSubresource,dstOffset=dstOffset,extent=extent)
def VkImageBlit(srcSubresource=None,srcOffsets=None,dstSubresource=None,dstOffsets=None,):
    return _new('VkImageBlit', srcSubresource=srcSubresource,srcOffsets=srcOffsets,dstSubresource=dstSubresource,dstOffsets=dstOffsets)
def VkBufferImageCopy(bufferOffset=None,bufferRowLength=None,bufferImageHeight=None,imageSubresource=None,imageOffset=None,imageExtent=None,):
    return _new('VkBufferImageCopy', bufferOffset=bufferOffset,bufferRowLength=bufferRowLength,bufferImageHeight=bufferImageHeight,imageSubresource=imageSubresource,imageOffset=imageOffset,imageExtent=imageExtent)
def VkImageResolve(srcSubresource=None,srcOffset=None,dstSubresource=None,dstOffset=None,extent=None,):
    return _new('VkImageResolve', srcSubresource=srcSubresource,srcOffset=srcOffset,dstSubresource=dstSubresource,dstOffset=dstOffset,extent=extent)
def VkShaderModuleCreateInfo(sType=None,pNext=None,flags=None,codeSize=None,pCode=None,):
    return _new('VkShaderModuleCreateInfo', sType=sType,pNext=pNext,flags=flags,codeSize=codeSize,pCode=pCode)
def VkDescriptorSetLayoutBinding(binding=None,descriptorType=None,descriptorCount=None,stageFlags=None,pImmutableSamplers=None,):
    return _new('VkDescriptorSetLayoutBinding', binding=binding,descriptorType=descriptorType,descriptorCount=descriptorCount,stageFlags=stageFlags,pImmutableSamplers=pImmutableSamplers)
def VkDescriptorSetLayoutCreateInfo(sType=None,pNext=None,flags=None,bindingCount=None,pBindings=None,):
    return _new('VkDescriptorSetLayoutCreateInfo', sType=sType,pNext=pNext,flags=flags,bindingCount=bindingCount,pBindings=pBindings)
def VkDescriptorPoolSize(type=None,descriptorCount=None,):
    return _new('VkDescriptorPoolSize', type=type,descriptorCount=descriptorCount)
def VkDescriptorPoolCreateInfo(sType=None,pNext=None,flags=None,maxSets=None,poolSizeCount=None,pPoolSizes=None,):
    return _new('VkDescriptorPoolCreateInfo', sType=sType,pNext=pNext,flags=flags,maxSets=maxSets,poolSizeCount=poolSizeCount,pPoolSizes=pPoolSizes)
def VkDescriptorSetAllocateInfo(sType=None,pNext=None,descriptorPool=None,descriptorSetCount=None,pSetLayouts=None,):
    return _new('VkDescriptorSetAllocateInfo', sType=sType,pNext=pNext,descriptorPool=descriptorPool,descriptorSetCount=descriptorSetCount,pSetLayouts=pSetLayouts)
def VkSpecializationMapEntry(constantID=None,offset=None,size=None,):
    return _new('VkSpecializationMapEntry', constantID=constantID,offset=offset,size=size)
def VkSpecializationInfo(mapEntryCount=None,pMapEntries=None,dataSize=None,pData=None,):
    return _new('VkSpecializationInfo', mapEntryCount=mapEntryCount,pMapEntries=pMapEntries,dataSize=dataSize,pData=pData)
def VkPipelineShaderStageCreateInfo(sType=None,pNext=None,flags=None,stage=None,module=None,pName=None,pSpecializationInfo=None,):
    return _new('VkPipelineShaderStageCreateInfo', sType=sType,pNext=pNext,flags=flags,stage=stage,module=module,pName=pName,pSpecializationInfo=pSpecializationInfo)
def VkComputePipelineCreateInfo(sType=None,pNext=None,flags=None,stage=None,layout=None,basePipelineHandle=None,basePipelineIndex=None,):
    return _new('VkComputePipelineCreateInfo', sType=sType,pNext=pNext,flags=flags,stage=stage,layout=layout,basePipelineHandle=basePipelineHandle,basePipelineIndex=basePipelineIndex)
def VkVertexInputBindingDescription(binding=None,stride=None,inputRate=None,):
    return _new('VkVertexInputBindingDescription', binding=binding,stride=stride,inputRate=inputRate)
def VkVertexInputAttributeDescription(location=None,binding=None,format=None,offset=None,):
    return _new('VkVertexInputAttributeDescription', location=location,binding=binding,format=format,offset=offset)
def VkPipelineVertexInputStateCreateInfo(sType=None,pNext=None,flags=None,vertexBindingDescriptionCount=None,pVertexBindingDescriptions=None,vertexAttributeDescriptionCount=None,pVertexAttributeDescriptions=None,):
    return _new('VkPipelineVertexInputStateCreateInfo', sType=sType,pNext=pNext,flags=flags,vertexBindingDescriptionCount=vertexBindingDescriptionCount,pVertexBindingDescriptions=pVertexBindingDescriptions,vertexAttributeDescriptionCount=vertexAttributeDescriptionCount,pVertexAttributeDescriptions=pVertexAttributeDescriptions)
def VkPipelineInputAssemblyStateCreateInfo(sType=None,pNext=None,flags=None,topology=None,primitiveRestartEnable=None,):
    return _new('VkPipelineInputAssemblyStateCreateInfo', sType=sType,pNext=pNext,flags=flags,topology=topology,primitiveRestartEnable=primitiveRestartEnable)
def VkPipelineTessellationStateCreateInfo(sType=None,pNext=None,flags=None,patchControlPoints=None,):
    return _new('VkPipelineTessellationStateCreateInfo', sType=sType,pNext=pNext,flags=flags,patchControlPoints=patchControlPoints)
def VkPipelineViewportStateCreateInfo(sType=None,pNext=None,flags=None,viewportCount=None,pViewports=None,scissorCount=None,pScissors=None,):
    return _new('VkPipelineViewportStateCreateInfo', sType=sType,pNext=pNext,flags=flags,viewportCount=viewportCount,pViewports=pViewports,scissorCount=scissorCount,pScissors=pScissors)
def VkPipelineRasterizationStateCreateInfo(sType=None,pNext=None,flags=None,depthClampEnable=None,rasterizerDiscardEnable=None,polygonMode=None,cullMode=None,frontFace=None,depthBiasEnable=None,depthBiasConstantFactor=None,depthBiasClamp=None,depthBiasSlopeFactor=None,lineWidth=None,):
    return _new('VkPipelineRasterizationStateCreateInfo', sType=sType,pNext=pNext,flags=flags,depthClampEnable=depthClampEnable,rasterizerDiscardEnable=rasterizerDiscardEnable,polygonMode=polygonMode,cullMode=cullMode,frontFace=frontFace,depthBiasEnable=depthBiasEnable,depthBiasConstantFactor=depthBiasConstantFactor,depthBiasClamp=depthBiasClamp,depthBiasSlopeFactor=depthBiasSlopeFactor,lineWidth=lineWidth)
def VkPipelineMultisampleStateCreateInfo(sType=None,pNext=None,flags=None,rasterizationSamples=None,sampleShadingEnable=None,minSampleShading=None,pSampleMask=None,alphaToCoverageEnable=None,alphaToOneEnable=None,):
    return _new('VkPipelineMultisampleStateCreateInfo', sType=sType,pNext=pNext,flags=flags,rasterizationSamples=rasterizationSamples,sampleShadingEnable=sampleShadingEnable,minSampleShading=minSampleShading,pSampleMask=pSampleMask,alphaToCoverageEnable=alphaToCoverageEnable,alphaToOneEnable=alphaToOneEnable)
def VkPipelineColorBlendAttachmentState(blendEnable=None,srcColorBlendFactor=None,dstColorBlendFactor=None,colorBlendOp=None,srcAlphaBlendFactor=None,dstAlphaBlendFactor=None,alphaBlendOp=None,colorWriteMask=None,):
    return _new('VkPipelineColorBlendAttachmentState', blendEnable=blendEnable,srcColorBlendFactor=srcColorBlendFactor,dstColorBlendFactor=dstColorBlendFactor,colorBlendOp=colorBlendOp,srcAlphaBlendFactor=srcAlphaBlendFactor,dstAlphaBlendFactor=dstAlphaBlendFactor,alphaBlendOp=alphaBlendOp,colorWriteMask=colorWriteMask)
def VkPipelineColorBlendStateCreateInfo(sType=None,pNext=None,flags=None,logicOpEnable=None,logicOp=None,attachmentCount=None,pAttachments=None,blendConstants=None,):
    return _new('VkPipelineColorBlendStateCreateInfo', sType=sType,pNext=pNext,flags=flags,logicOpEnable=logicOpEnable,logicOp=logicOp,attachmentCount=attachmentCount,pAttachments=pAttachments,blendConstants=blendConstants)
def VkPipelineDynamicStateCreateInfo(sType=None,pNext=None,flags=None,dynamicStateCount=None,pDynamicStates=None,):
    return _new('VkPipelineDynamicStateCreateInfo', sType=sType,pNext=pNext,flags=flags,dynamicStateCount=dynamicStateCount,pDynamicStates=pDynamicStates)
def VkStencilOpState(failOp=None,passOp=None,depthFailOp=None,compareOp=None,compareMask=None,writeMask=None,reference=None,):
    return _new('VkStencilOpState', failOp=failOp,passOp=passOp,depthFailOp=depthFailOp,compareOp=compareOp,compareMask=compareMask,writeMask=writeMask,reference=reference)
def VkPipelineDepthStencilStateCreateInfo(sType=None,pNext=None,flags=None,depthTestEnable=None,depthWriteEnable=None,depthCompareOp=None,depthBoundsTestEnable=None,stencilTestEnable=None,front=None,back=None,minDepthBounds=None,maxDepthBounds=None,):
    return _new('VkPipelineDepthStencilStateCreateInfo', sType=sType,pNext=pNext,flags=flags,depthTestEnable=depthTestEnable,depthWriteEnable=depthWriteEnable,depthCompareOp=depthCompareOp,depthBoundsTestEnable=depthBoundsTestEnable,stencilTestEnable=stencilTestEnable,front=front,back=back,minDepthBounds=minDepthBounds,maxDepthBounds=maxDepthBounds)
def VkGraphicsPipelineCreateInfo(sType=None,pNext=None,flags=None,stageCount=None,pStages=None,pVertexInputState=None,pInputAssemblyState=None,pTessellationState=None,pViewportState=None,pRasterizationState=None,pMultisampleState=None,pDepthStencilState=None,pColorBlendState=None,pDynamicState=None,layout=None,renderPass=None,subpass=None,basePipelineHandle=None,basePipelineIndex=None,):
    return _new('VkGraphicsPipelineCreateInfo', sType=sType,pNext=pNext,flags=flags,stageCount=stageCount,pStages=pStages,pVertexInputState=pVertexInputState,pInputAssemblyState=pInputAssemblyState,pTessellationState=pTessellationState,pViewportState=pViewportState,pRasterizationState=pRasterizationState,pMultisampleState=pMultisampleState,pDepthStencilState=pDepthStencilState,pColorBlendState=pColorBlendState,pDynamicState=pDynamicState,layout=layout,renderPass=renderPass,subpass=subpass,basePipelineHandle=basePipelineHandle,basePipelineIndex=basePipelineIndex)
def VkPipelineCacheCreateInfo(sType=None,pNext=None,flags=None,initialDataSize=None,pInitialData=None,):
    return _new('VkPipelineCacheCreateInfo', sType=sType,pNext=pNext,flags=flags,initialDataSize=initialDataSize,pInitialData=pInitialData)
def VkPushConstantRange(stageFlags=None,offset=None,size=None,):
    return _new('VkPushConstantRange', stageFlags=stageFlags,offset=offset,size=size)
def VkPipelineLayoutCreateInfo(sType=None,pNext=None,flags=None,setLayoutCount=None,pSetLayouts=None,pushConstantRangeCount=None,pPushConstantRanges=None,):
    return _new('VkPipelineLayoutCreateInfo', sType=sType,pNext=pNext,flags=flags,setLayoutCount=setLayoutCount,pSetLayouts=pSetLayouts,pushConstantRangeCount=pushConstantRangeCount,pPushConstantRanges=pPushConstantRanges)
def VkSamplerCreateInfo(sType=None,pNext=None,flags=None,magFilter=None,minFilter=None,mipmapMode=None,addressModeU=None,addressModeV=None,addressModeW=None,mipLodBias=None,anisotropyEnable=None,maxAnisotropy=None,compareEnable=None,compareOp=None,minLod=None,maxLod=None,borderColor=None,unnormalizedCoordinates=None,):
    return _new('VkSamplerCreateInfo', sType=sType,pNext=pNext,flags=flags,magFilter=magFilter,minFilter=minFilter,mipmapMode=mipmapMode,addressModeU=addressModeU,addressModeV=addressModeV,addressModeW=addressModeW,mipLodBias=mipLodBias,anisotropyEnable=anisotropyEnable,maxAnisotropy=maxAnisotropy,compareEnable=compareEnable,compareOp=compareOp,minLod=minLod,maxLod=maxLod,borderColor=borderColor,unnormalizedCoordinates=unnormalizedCoordinates)
def VkCommandPoolCreateInfo(sType=None,pNext=None,flags=None,queueFamilyIndex=None,):
    return _new('VkCommandPoolCreateInfo', sType=sType,pNext=pNext,flags=flags,queueFamilyIndex=queueFamilyIndex)
def VkCommandBufferAllocateInfo(sType=None,pNext=None,commandPool=None,level=None,commandBufferCount=None,):
    return _new('VkCommandBufferAllocateInfo', sType=sType,pNext=pNext,commandPool=commandPool,level=level,commandBufferCount=commandBufferCount)
def VkCommandBufferInheritanceInfo(sType=None,pNext=None,renderPass=None,subpass=None,framebuffer=None,occlusionQueryEnable=None,queryFlags=None,pipelineStatistics=None,):
    return _new('VkCommandBufferInheritanceInfo', sType=sType,pNext=pNext,renderPass=renderPass,subpass=subpass,framebuffer=framebuffer,occlusionQueryEnable=occlusionQueryEnable,queryFlags=queryFlags,pipelineStatistics=pipelineStatistics)
def VkCommandBufferBeginInfo(sType=None,pNext=None,flags=None,pInheritanceInfo=None,):
    return _new('VkCommandBufferBeginInfo', sType=sType,pNext=pNext,flags=flags,pInheritanceInfo=pInheritanceInfo)
def VkRenderPassBeginInfo(sType=None,pNext=None,renderPass=None,framebuffer=None,renderArea=None,clearValueCount=None,pClearValues=None,):
    return _new('VkRenderPassBeginInfo', sType=sType,pNext=pNext,renderPass=renderPass,framebuffer=framebuffer,renderArea=renderArea,clearValueCount=clearValueCount,pClearValues=pClearValues)
def VkClearColorValue(float32=None,int32=None,uint32=None,):
    return _new('VkClearColorValue', float32=float32,int32=int32,uint32=uint32)
def VkClearDepthStencilValue(depth=None,stencil=None,):
    return _new('VkClearDepthStencilValue', depth=depth,stencil=stencil)
def VkClearValue(color=None,depthStencil=None,):
    return _new('VkClearValue', color=color,depthStencil=depthStencil)
def VkClearAttachment(aspectMask=None,colorAttachment=None,clearValue=None,):
    return _new('VkClearAttachment', aspectMask=aspectMask,colorAttachment=colorAttachment,clearValue=clearValue)
def VkAttachmentDescription(flags=None,format=None,samples=None,loadOp=None,storeOp=None,stencilLoadOp=None,stencilStoreOp=None,initialLayout=None,finalLayout=None,):
    return _new('VkAttachmentDescription', flags=flags,format=format,samples=samples,loadOp=loadOp,storeOp=storeOp,stencilLoadOp=stencilLoadOp,stencilStoreOp=stencilStoreOp,initialLayout=initialLayout,finalLayout=finalLayout)
def VkAttachmentReference(attachment=None,layout=None,):
    return _new('VkAttachmentReference', attachment=attachment,layout=layout)
def VkSubpassDescription(flags=None,pipelineBindPoint=None,inputAttachmentCount=None,pInputAttachments=None,colorAttachmentCount=None,pColorAttachments=None,pResolveAttachments=None,pDepthStencilAttachment=None,preserveAttachmentCount=None,pPreserveAttachments=None,):
    return _new('VkSubpassDescription', flags=flags,pipelineBindPoint=pipelineBindPoint,inputAttachmentCount=inputAttachmentCount,pInputAttachments=pInputAttachments,colorAttachmentCount=colorAttachmentCount,pColorAttachments=pColorAttachments,pResolveAttachments=pResolveAttachments,pDepthStencilAttachment=pDepthStencilAttachment,preserveAttachmentCount=preserveAttachmentCount,pPreserveAttachments=pPreserveAttachments)
def VkSubpassDependency(srcSubpass=None,dstSubpass=None,srcStageMask=None,dstStageMask=None,srcAccessMask=None,dstAccessMask=None,dependencyFlags=None,):
    return _new('VkSubpassDependency', srcSubpass=srcSubpass,dstSubpass=dstSubpass,srcStageMask=srcStageMask,dstStageMask=dstStageMask,srcAccessMask=srcAccessMask,dstAccessMask=dstAccessMask,dependencyFlags=dependencyFlags)
def VkRenderPassCreateInfo(sType=None,pNext=None,flags=None,attachmentCount=None,pAttachments=None,subpassCount=None,pSubpasses=None,dependencyCount=None,pDependencies=None,):
    return _new('VkRenderPassCreateInfo', sType=sType,pNext=pNext,flags=flags,attachmentCount=attachmentCount,pAttachments=pAttachments,subpassCount=subpassCount,pSubpasses=pSubpasses,dependencyCount=dependencyCount,pDependencies=pDependencies)
def VkEventCreateInfo(sType=None,pNext=None,flags=None,):
    return _new('VkEventCreateInfo', sType=sType,pNext=pNext,flags=flags)
def VkFenceCreateInfo(sType=None,pNext=None,flags=None,):
    return _new('VkFenceCreateInfo', sType=sType,pNext=pNext,flags=flags)
def VkPhysicalDeviceFeatures(robustBufferAccess=None,fullDrawIndexUint32=None,imageCubeArray=None,independentBlend=None,geometryShader=None,tessellationShader=None,sampleRateShading=None,dualSrcBlend=None,logicOp=None,multiDrawIndirect=None,drawIndirectFirstInstance=None,depthClamp=None,depthBiasClamp=None,fillModeNonSolid=None,depthBounds=None,wideLines=None,largePoints=None,alphaToOne=None,multiViewport=None,samplerAnisotropy=None,textureCompressionETC2=None,textureCompressionASTC_LDR=None,textureCompressionBC=None,occlusionQueryPrecise=None,pipelineStatisticsQuery=None,vertexPipelineStoresAndAtomics=None,fragmentStoresAndAtomics=None,shaderTessellationAndGeometryPointSize=None,shaderImageGatherExtended=None,shaderStorageImageExtendedFormats=None,shaderStorageImageMultisample=None,shaderStorageImageReadWithoutFormat=None,shaderStorageImageWriteWithoutFormat=None,shaderUniformBufferArrayDynamicIndexing=None,shaderSampledImageArrayDynamicIndexing=None,shaderStorageBufferArrayDynamicIndexing=None,shaderStorageImageArrayDynamicIndexing=None,shaderClipDistance=None,shaderCullDistance=None,shaderFloat64=None,shaderInt64=None,shaderInt16=None,shaderResourceResidency=None,shaderResourceMinLod=None,sparseBinding=None,sparseResidencyBuffer=None,sparseResidencyImage2D=None,sparseResidencyImage3D=None,sparseResidency2Samples=None,sparseResidency4Samples=None,sparseResidency8Samples=None,sparseResidency16Samples=None,sparseResidencyAliased=None,variableMultisampleRate=None,inheritedQueries=None,):
    return _new('VkPhysicalDeviceFeatures', robustBufferAccess=robustBufferAccess,fullDrawIndexUint32=fullDrawIndexUint32,imageCubeArray=imageCubeArray,independentBlend=independentBlend,geometryShader=geometryShader,tessellationShader=tessellationShader,sampleRateShading=sampleRateShading,dualSrcBlend=dualSrcBlend,logicOp=logicOp,multiDrawIndirect=multiDrawIndirect,drawIndirectFirstInstance=drawIndirectFirstInstance,depthClamp=depthClamp,depthBiasClamp=depthBiasClamp,fillModeNonSolid=fillModeNonSolid,depthBounds=depthBounds,wideLines=wideLines,largePoints=largePoints,alphaToOne=alphaToOne,multiViewport=multiViewport,samplerAnisotropy=samplerAnisotropy,textureCompressionETC2=textureCompressionETC2,textureCompressionASTC_LDR=textureCompressionASTC_LDR,textureCompressionBC=textureCompressionBC,occlusionQueryPrecise=occlusionQueryPrecise,pipelineStatisticsQuery=pipelineStatisticsQuery,vertexPipelineStoresAndAtomics=vertexPipelineStoresAndAtomics,fragmentStoresAndAtomics=fragmentStoresAndAtomics,shaderTessellationAndGeometryPointSize=shaderTessellationAndGeometryPointSize,shaderImageGatherExtended=shaderImageGatherExtended,shaderStorageImageExtendedFormats=shaderStorageImageExtendedFormats,shaderStorageImageMultisample=shaderStorageImageMultisample,shaderStorageImageReadWithoutFormat=shaderStorageImageReadWithoutFormat,shaderStorageImageWriteWithoutFormat=shaderStorageImageWriteWithoutFormat,shaderUniformBufferArrayDynamicIndexing=shaderUniformBufferArrayDynamicIndexing,shaderSampledImageArrayDynamicIndexing=shaderSampledImageArrayDynamicIndexing,shaderStorageBufferArrayDynamicIndexing=shaderStorageBufferArrayDynamicIndexing,shaderStorageImageArrayDynamicIndexing=shaderStorageImageArrayDynamicIndexing,shaderClipDistance=shaderClipDistance,shaderCullDistance=shaderCullDistance,shaderFloat64=shaderFloat64,shaderInt64=shaderInt64,shaderInt16=shaderInt16,shaderResourceResidency=shaderResourceResidency,shaderResourceMinLod=shaderResourceMinLod,sparseBinding=sparseBinding,sparseResidencyBuffer=sparseResidencyBuffer,sparseResidencyImage2D=sparseResidencyImage2D,sparseResidencyImage3D=sparseResidencyImage3D,sparseResidency2Samples=sparseResidency2Samples,sparseResidency4Samples=sparseResidency4Samples,sparseResidency8Samples=sparseResidency8Samples,sparseResidency16Samples=sparseResidency16Samples,sparseResidencyAliased=sparseResidencyAliased,variableMultisampleRate=variableMultisampleRate,inheritedQueries=inheritedQueries)
def VkPhysicalDeviceSparseProperties(residencyStandard2DBlockShape=None,residencyStandard2DMultisampleBlockShape=None,residencyStandard3DBlockShape=None,residencyAlignedMipSize=None,residencyNonResidentStrict=None,):
    return _new('VkPhysicalDeviceSparseProperties', residencyStandard2DBlockShape=residencyStandard2DBlockShape,residencyStandard2DMultisampleBlockShape=residencyStandard2DMultisampleBlockShape,residencyStandard3DBlockShape=residencyStandard3DBlockShape,residencyAlignedMipSize=residencyAlignedMipSize,residencyNonResidentStrict=residencyNonResidentStrict)
def VkPhysicalDeviceLimits(maxImageDimension1D=None,maxImageDimension2D=None,maxImageDimension3D=None,maxImageDimensionCube=None,maxImageArrayLayers=None,maxTexelBufferElements=None,maxUniformBufferRange=None,maxStorageBufferRange=None,maxPushConstantsSize=None,maxMemoryAllocationCount=None,maxSamplerAllocationCount=None,bufferImageGranularity=None,sparseAddressSpaceSize=None,maxBoundDescriptorSets=None,maxPerStageDescriptorSamplers=None,maxPerStageDescriptorUniformBuffers=None,maxPerStageDescriptorStorageBuffers=None,maxPerStageDescriptorSampledImages=None,maxPerStageDescriptorStorageImages=None,maxPerStageDescriptorInputAttachments=None,maxPerStageResources=None,maxDescriptorSetSamplers=None,maxDescriptorSetUniformBuffers=None,maxDescriptorSetUniformBuffersDynamic=None,maxDescriptorSetStorageBuffers=None,maxDescriptorSetStorageBuffersDynamic=None,maxDescriptorSetSampledImages=None,maxDescriptorSetStorageImages=None,maxDescriptorSetInputAttachments=None,maxVertexInputAttributes=None,maxVertexInputBindings=None,maxVertexInputAttributeOffset=None,maxVertexInputBindingStride=None,maxVertexOutputComponents=None,maxTessellationGenerationLevel=None,maxTessellationPatchSize=None,maxTessellationControlPerVertexInputComponents=None,maxTessellationControlPerVertexOutputComponents=None,maxTessellationControlPerPatchOutputComponents=None,maxTessellationControlTotalOutputComponents=None,maxTessellationEvaluationInputComponents=None,maxTessellationEvaluationOutputComponents=None,maxGeometryShaderInvocations=None,maxGeometryInputComponents=None,maxGeometryOutputComponents=None,maxGeometryOutputVertices=None,maxGeometryTotalOutputComponents=None,maxFragmentInputComponents=None,maxFragmentOutputAttachments=None,maxFragmentDualSrcAttachments=None,maxFragmentCombinedOutputResources=None,maxComputeSharedMemorySize=None,maxComputeWorkGroupCount=None,maxComputeWorkGroupInvocations=None,maxComputeWorkGroupSize=None,subPixelPrecisionBits=None,subTexelPrecisionBits=None,mipmapPrecisionBits=None,maxDrawIndexedIndexValue=None,maxDrawIndirectCount=None,maxSamplerLodBias=None,maxSamplerAnisotropy=None,maxViewports=None,maxViewportDimensions=None,viewportBoundsRange=None,viewportSubPixelBits=None,minMemoryMapAlignment=None,minTexelBufferOffsetAlignment=None,minUniformBufferOffsetAlignment=None,minStorageBufferOffsetAlignment=None,minTexelOffset=None,maxTexelOffset=None,minTexelGatherOffset=None,maxTexelGatherOffset=None,minInterpolationOffset=None,maxInterpolationOffset=None,subPixelInterpolationOffsetBits=None,maxFramebufferWidth=None,maxFramebufferHeight=None,maxFramebufferLayers=None,framebufferColorSampleCounts=None,framebufferDepthSampleCounts=None,framebufferStencilSampleCounts=None,framebufferNoAttachmentsSampleCounts=None,maxColorAttachments=None,sampledImageColorSampleCounts=None,sampledImageIntegerSampleCounts=None,sampledImageDepthSampleCounts=None,sampledImageStencilSampleCounts=None,storageImageSampleCounts=None,maxSampleMaskWords=None,timestampComputeAndGraphics=None,timestampPeriod=None,maxClipDistances=None,maxCullDistances=None,maxCombinedClipAndCullDistances=None,discreteQueuePriorities=None,pointSizeRange=None,lineWidthRange=None,pointSizeGranularity=None,lineWidthGranularity=None,strictLines=None,standardSampleLocations=None,optimalBufferCopyOffsetAlignment=None,optimalBufferCopyRowPitchAlignment=None,nonCoherentAtomSize=None,):
    return _new('VkPhysicalDeviceLimits', maxImageDimension1D=maxImageDimension1D,maxImageDimension2D=maxImageDimension2D,maxImageDimension3D=maxImageDimension3D,maxImageDimensionCube=maxImageDimensionCube,maxImageArrayLayers=maxImageArrayLayers,maxTexelBufferElements=maxTexelBufferElements,maxUniformBufferRange=maxUniformBufferRange,maxStorageBufferRange=maxStorageBufferRange,maxPushConstantsSize=maxPushConstantsSize,maxMemoryAllocationCount=maxMemoryAllocationCount,maxSamplerAllocationCount=maxSamplerAllocationCount,bufferImageGranularity=bufferImageGranularity,sparseAddressSpaceSize=sparseAddressSpaceSize,maxBoundDescriptorSets=maxBoundDescriptorSets,maxPerStageDescriptorSamplers=maxPerStageDescriptorSamplers,maxPerStageDescriptorUniformBuffers=maxPerStageDescriptorUniformBuffers,maxPerStageDescriptorStorageBuffers=maxPerStageDescriptorStorageBuffers,maxPerStageDescriptorSampledImages=maxPerStageDescriptorSampledImages,maxPerStageDescriptorStorageImages=maxPerStageDescriptorStorageImages,maxPerStageDescriptorInputAttachments=maxPerStageDescriptorInputAttachments,maxPerStageResources=maxPerStageResources,maxDescriptorSetSamplers=maxDescriptorSetSamplers,maxDescriptorSetUniformBuffers=maxDescriptorSetUniformBuffers,maxDescriptorSetUniformBuffersDynamic=maxDescriptorSetUniformBuffersDynamic,maxDescriptorSetStorageBuffers=maxDescriptorSetStorageBuffers,maxDescriptorSetStorageBuffersDynamic=maxDescriptorSetStorageBuffersDynamic,maxDescriptorSetSampledImages=maxDescriptorSetSampledImages,maxDescriptorSetStorageImages=maxDescriptorSetStorageImages,maxDescriptorSetInputAttachments=maxDescriptorSetInputAttachments,maxVertexInputAttributes=maxVertexInputAttributes,maxVertexInputBindings=maxVertexInputBindings,maxVertexInputAttributeOffset=maxVertexInputAttributeOffset,maxVertexInputBindingStride=maxVertexInputBindingStride,maxVertexOutputComponents=maxVertexOutputComponents,maxTessellationGenerationLevel=maxTessellationGenerationLevel,maxTessellationPatchSize=maxTessellationPatchSize,maxTessellationControlPerVertexInputComponents=maxTessellationControlPerVertexInputComponents,maxTessellationControlPerVertexOutputComponents=maxTessellationControlPerVertexOutputComponents,maxTessellationControlPerPatchOutputComponents=maxTessellationControlPerPatchOutputComponents,maxTessellationControlTotalOutputComponents=maxTessellationControlTotalOutputComponents,maxTessellationEvaluationInputComponents=maxTessellationEvaluationInputComponents,maxTessellationEvaluationOutputComponents=maxTessellationEvaluationOutputComponents,maxGeometryShaderInvocations=maxGeometryShaderInvocations,maxGeometryInputComponents=maxGeometryInputComponents,maxGeometryOutputComponents=maxGeometryOutputComponents,maxGeometryOutputVertices=maxGeometryOutputVertices,maxGeometryTotalOutputComponents=maxGeometryTotalOutputComponents,maxFragmentInputComponents=maxFragmentInputComponents,maxFragmentOutputAttachments=maxFragmentOutputAttachments,maxFragmentDualSrcAttachments=maxFragmentDualSrcAttachments,maxFragmentCombinedOutputResources=maxFragmentCombinedOutputResources,maxComputeSharedMemorySize=maxComputeSharedMemorySize,maxComputeWorkGroupCount=maxComputeWorkGroupCount,maxComputeWorkGroupInvocations=maxComputeWorkGroupInvocations,maxComputeWorkGroupSize=maxComputeWorkGroupSize,subPixelPrecisionBits=subPixelPrecisionBits,subTexelPrecisionBits=subTexelPrecisionBits,mipmapPrecisionBits=mipmapPrecisionBits,maxDrawIndexedIndexValue=maxDrawIndexedIndexValue,maxDrawIndirectCount=maxDrawIndirectCount,maxSamplerLodBias=maxSamplerLodBias,maxSamplerAnisotropy=maxSamplerAnisotropy,maxViewports=maxViewports,maxViewportDimensions=maxViewportDimensions,viewportBoundsRange=viewportBoundsRange,viewportSubPixelBits=viewportSubPixelBits,minMemoryMapAlignment=minMemoryMapAlignment,minTexelBufferOffsetAlignment=minTexelBufferOffsetAlignment,minUniformBufferOffsetAlignment=minUniformBufferOffsetAlignment,minStorageBufferOffsetAlignment=minStorageBufferOffsetAlignment,minTexelOffset=minTexelOffset,maxTexelOffset=maxTexelOffset,minTexelGatherOffset=minTexelGatherOffset,maxTexelGatherOffset=maxTexelGatherOffset,minInterpolationOffset=minInterpolationOffset,maxInterpolationOffset=maxInterpolationOffset,subPixelInterpolationOffsetBits=subPixelInterpolationOffsetBits,maxFramebufferWidth=maxFramebufferWidth,maxFramebufferHeight=maxFramebufferHeight,maxFramebufferLayers=maxFramebufferLayers,framebufferColorSampleCounts=framebufferColorSampleCounts,framebufferDepthSampleCounts=framebufferDepthSampleCounts,framebufferStencilSampleCounts=framebufferStencilSampleCounts,framebufferNoAttachmentsSampleCounts=framebufferNoAttachmentsSampleCounts,maxColorAttachments=maxColorAttachments,sampledImageColorSampleCounts=sampledImageColorSampleCounts,sampledImageIntegerSampleCounts=sampledImageIntegerSampleCounts,sampledImageDepthSampleCounts=sampledImageDepthSampleCounts,sampledImageStencilSampleCounts=sampledImageStencilSampleCounts,storageImageSampleCounts=storageImageSampleCounts,maxSampleMaskWords=maxSampleMaskWords,timestampComputeAndGraphics=timestampComputeAndGraphics,timestampPeriod=timestampPeriod,maxClipDistances=maxClipDistances,maxCullDistances=maxCullDistances,maxCombinedClipAndCullDistances=maxCombinedClipAndCullDistances,discreteQueuePriorities=discreteQueuePriorities,pointSizeRange=pointSizeRange,lineWidthRange=lineWidthRange,pointSizeGranularity=pointSizeGranularity,lineWidthGranularity=lineWidthGranularity,strictLines=strictLines,standardSampleLocations=standardSampleLocations,optimalBufferCopyOffsetAlignment=optimalBufferCopyOffsetAlignment,optimalBufferCopyRowPitchAlignment=optimalBufferCopyRowPitchAlignment,nonCoherentAtomSize=nonCoherentAtomSize)
def VkSemaphoreCreateInfo(sType=None,pNext=None,flags=None,):
    return _new('VkSemaphoreCreateInfo', sType=sType,pNext=pNext,flags=flags)
def VkQueryPoolCreateInfo(sType=None,pNext=None,flags=None,queryType=None,queryCount=None,pipelineStatistics=None,):
    return _new('VkQueryPoolCreateInfo', sType=sType,pNext=pNext,flags=flags,queryType=queryType,queryCount=queryCount,pipelineStatistics=pipelineStatistics)
def VkFramebufferCreateInfo(sType=None,pNext=None,flags=None,renderPass=None,attachmentCount=None,pAttachments=None,width=None,height=None,layers=None,):
    return _new('VkFramebufferCreateInfo', sType=sType,pNext=pNext,flags=flags,renderPass=renderPass,attachmentCount=attachmentCount,pAttachments=pAttachments,width=width,height=height,layers=layers)
def VkDrawIndirectCommand(vertexCount=None,instanceCount=None,firstVertex=None,firstInstance=None,):
    return _new('VkDrawIndirectCommand', vertexCount=vertexCount,instanceCount=instanceCount,firstVertex=firstVertex,firstInstance=firstInstance)
def VkDrawIndexedIndirectCommand(indexCount=None,instanceCount=None,firstIndex=None,vertexOffset=None,firstInstance=None,):
    return _new('VkDrawIndexedIndirectCommand', indexCount=indexCount,instanceCount=instanceCount,firstIndex=firstIndex,vertexOffset=vertexOffset,firstInstance=firstInstance)
def VkDispatchIndirectCommand(x=None,y=None,z=None,):
    return _new('VkDispatchIndirectCommand', x=x,y=y,z=z)
def VkSubmitInfo(sType=None,pNext=None,waitSemaphoreCount=None,pWaitSemaphores=None,pWaitDstStageMask=None,commandBufferCount=None,pCommandBuffers=None,signalSemaphoreCount=None,pSignalSemaphores=None,):
    return _new('VkSubmitInfo', sType=sType,pNext=pNext,waitSemaphoreCount=waitSemaphoreCount,pWaitSemaphores=pWaitSemaphores,pWaitDstStageMask=pWaitDstStageMask,commandBufferCount=commandBufferCount,pCommandBuffers=pCommandBuffers,signalSemaphoreCount=signalSemaphoreCount,pSignalSemaphores=pSignalSemaphores)
def VkDisplayPropertiesKHR(display=None,displayName=None,physicalDimensions=None,physicalResolution=None,supportedTransforms=None,planeReorderPossible=None,persistentContent=None,):
    return _new('VkDisplayPropertiesKHR', display=display,displayName=displayName,physicalDimensions=physicalDimensions,physicalResolution=physicalResolution,supportedTransforms=supportedTransforms,planeReorderPossible=planeReorderPossible,persistentContent=persistentContent)
def VkDisplayPlanePropertiesKHR(currentDisplay=None,currentStackIndex=None,):
    return _new('VkDisplayPlanePropertiesKHR', currentDisplay=currentDisplay,currentStackIndex=currentStackIndex)
def VkDisplayModeParametersKHR(visibleRegion=None,refreshRate=None,):
    return _new('VkDisplayModeParametersKHR', visibleRegion=visibleRegion,refreshRate=refreshRate)
def VkDisplayModePropertiesKHR(displayMode=None,parameters=None,):
    return _new('VkDisplayModePropertiesKHR', displayMode=displayMode,parameters=parameters)
def VkDisplayModeCreateInfoKHR(sType=None,pNext=None,flags=None,parameters=None,):
    return _new('VkDisplayModeCreateInfoKHR', sType=sType,pNext=pNext,flags=flags,parameters=parameters)
def VkDisplayPlaneCapabilitiesKHR(supportedAlpha=None,minSrcPosition=None,maxSrcPosition=None,minSrcExtent=None,maxSrcExtent=None,minDstPosition=None,maxDstPosition=None,minDstExtent=None,maxDstExtent=None,):
    return _new('VkDisplayPlaneCapabilitiesKHR', supportedAlpha=supportedAlpha,minSrcPosition=minSrcPosition,maxSrcPosition=maxSrcPosition,minSrcExtent=minSrcExtent,maxSrcExtent=maxSrcExtent,minDstPosition=minDstPosition,maxDstPosition=maxDstPosition,minDstExtent=minDstExtent,maxDstExtent=maxDstExtent)
def VkDisplaySurfaceCreateInfoKHR(sType=None,pNext=None,flags=None,displayMode=None,planeIndex=None,planeStackIndex=None,transform=None,globalAlpha=None,alphaMode=None,imageExtent=None,):
    return _new('VkDisplaySurfaceCreateInfoKHR', sType=sType,pNext=pNext,flags=flags,displayMode=displayMode,planeIndex=planeIndex,planeStackIndex=planeStackIndex,transform=transform,globalAlpha=globalAlpha,alphaMode=alphaMode,imageExtent=imageExtent)
def VkDisplayPresentInfoKHR(sType=None,pNext=None,srcRect=None,dstRect=None,persistent=None,):
    return _new('VkDisplayPresentInfoKHR', sType=sType,pNext=pNext,srcRect=srcRect,dstRect=dstRect,persistent=persistent)
def VkSurfaceCapabilitiesKHR(minImageCount=None,maxImageCount=None,currentExtent=None,minImageExtent=None,maxImageExtent=None,maxImageArrayLayers=None,supportedTransforms=None,currentTransform=None,supportedCompositeAlpha=None,supportedUsageFlags=None,):
    return _new('VkSurfaceCapabilitiesKHR', minImageCount=minImageCount,maxImageCount=maxImageCount,currentExtent=currentExtent,minImageExtent=minImageExtent,maxImageExtent=maxImageExtent,maxImageArrayLayers=maxImageArrayLayers,supportedTransforms=supportedTransforms,currentTransform=currentTransform,supportedCompositeAlpha=supportedCompositeAlpha,supportedUsageFlags=supportedUsageFlags)
def VkAndroidSurfaceCreateInfoKHR(sType=None,pNext=None,flags=None,window=None,):
    return _new('VkAndroidSurfaceCreateInfoKHR', sType=sType,pNext=pNext,flags=flags,window=window)
def VkMirSurfaceCreateInfoKHR(sType=None,pNext=None,flags=None,connection=None,mirSurface=None,):
    return _new('VkMirSurfaceCreateInfoKHR', sType=sType,pNext=pNext,flags=flags,connection=connection,mirSurface=mirSurface)
def VkViSurfaceCreateInfoNN(sType=None,pNext=None,flags=None,window=None,):
    return _new('VkViSurfaceCreateInfoNN', sType=sType,pNext=pNext,flags=flags,window=window)
def VkWaylandSurfaceCreateInfoKHR(sType=None,pNext=None,flags=None,display=None,surface=None,):
    return _new('VkWaylandSurfaceCreateInfoKHR', sType=sType,pNext=pNext,flags=flags,display=display,surface=surface)
def VkWin32SurfaceCreateInfoKHR(sType=None,pNext=None,flags=None,hinstance=None,hwnd=None,):
    return _new('VkWin32SurfaceCreateInfoKHR', sType=sType,pNext=pNext,flags=flags,hinstance=hinstance,hwnd=hwnd)
def VkXlibSurfaceCreateInfoKHR(sType=None,pNext=None,flags=None,dpy=None,window=None,):
    return _new('VkXlibSurfaceCreateInfoKHR', sType=sType,pNext=pNext,flags=flags,dpy=dpy,window=window)
def VkXcbSurfaceCreateInfoKHR(sType=None,pNext=None,flags=None,connection=None,window=None,):
    return _new('VkXcbSurfaceCreateInfoKHR', sType=sType,pNext=pNext,flags=flags,connection=connection,window=window)
def VkSurfaceFormatKHR(format=None,colorSpace=None,):
    return _new('VkSurfaceFormatKHR', format=format,colorSpace=colorSpace)
def VkSwapchainCreateInfoKHR(sType=None,pNext=None,flags=None,surface=None,minImageCount=None,imageFormat=None,imageColorSpace=None,imageExtent=None,imageArrayLayers=None,imageUsage=None,imageSharingMode=None,queueFamilyIndexCount=None,pQueueFamilyIndices=None,preTransform=None,compositeAlpha=None,presentMode=None,clipped=None,oldSwapchain=None,):
    return _new('VkSwapchainCreateInfoKHR', sType=sType,pNext=pNext,flags=flags,surface=surface,minImageCount=minImageCount,imageFormat=imageFormat,imageColorSpace=imageColorSpace,imageExtent=imageExtent,imageArrayLayers=imageArrayLayers,imageUsage=imageUsage,imageSharingMode=imageSharingMode,queueFamilyIndexCount=queueFamilyIndexCount,pQueueFamilyIndices=pQueueFamilyIndices,preTransform=preTransform,compositeAlpha=compositeAlpha,presentMode=presentMode,clipped=clipped,oldSwapchain=oldSwapchain)
def VkPresentInfoKHR(sType=None,pNext=None,waitSemaphoreCount=None,pWaitSemaphores=None,swapchainCount=None,pSwapchains=None,pImageIndices=None,pResults=None,):
    return _new('VkPresentInfoKHR', sType=sType,pNext=pNext,waitSemaphoreCount=waitSemaphoreCount,pWaitSemaphores=pWaitSemaphores,swapchainCount=swapchainCount,pSwapchains=pSwapchains,pImageIndices=pImageIndices,pResults=pResults)
def VkDebugReportCallbackCreateInfoEXT(sType=None,pNext=None,flags=None,pfnCallback=None,pUserData=None,):
    return _new('VkDebugReportCallbackCreateInfoEXT', sType=sType,pNext=pNext,flags=flags,pfnCallback=pfnCallback,pUserData=pUserData)
def VkValidationFlagsEXT(sType=None,pNext=None,disabledValidationCheckCount=None,pDisabledValidationChecks=None,):
    return _new('VkValidationFlagsEXT', sType=sType,pNext=pNext,disabledValidationCheckCount=disabledValidationCheckCount,pDisabledValidationChecks=pDisabledValidationChecks)
def VkPipelineRasterizationStateRasterizationOrderAMD(sType=None,pNext=None,rasterizationOrder=None,):
    return _new('VkPipelineRasterizationStateRasterizationOrderAMD', sType=sType,pNext=pNext,rasterizationOrder=rasterizationOrder)
def VkDebugMarkerObjectNameInfoEXT(sType=None,pNext=None,objectType=None,object=None,pObjectName=None,):
    return _new('VkDebugMarkerObjectNameInfoEXT', sType=sType,pNext=pNext,objectType=objectType,object=object,pObjectName=pObjectName)
def VkDebugMarkerObjectTagInfoEXT(sType=None,pNext=None,objectType=None,object=None,tagName=None,tagSize=None,pTag=None,):
    return _new('VkDebugMarkerObjectTagInfoEXT', sType=sType,pNext=pNext,objectType=objectType,object=object,tagName=tagName,tagSize=tagSize,pTag=pTag)
def VkDebugMarkerMarkerInfoEXT(sType=None,pNext=None,pMarkerName=None,color=None,):
    return _new('VkDebugMarkerMarkerInfoEXT', sType=sType,pNext=pNext,pMarkerName=pMarkerName,color=color)
def VkDedicatedAllocationImageCreateInfoNV(sType=None,pNext=None,dedicatedAllocation=None,):
    return _new('VkDedicatedAllocationImageCreateInfoNV', sType=sType,pNext=pNext,dedicatedAllocation=dedicatedAllocation)
def VkDedicatedAllocationBufferCreateInfoNV(sType=None,pNext=None,dedicatedAllocation=None,):
    return _new('VkDedicatedAllocationBufferCreateInfoNV', sType=sType,pNext=pNext,dedicatedAllocation=dedicatedAllocation)
def VkDedicatedAllocationMemoryAllocateInfoNV(sType=None,pNext=None,image=None,buffer=None,):
    return _new('VkDedicatedAllocationMemoryAllocateInfoNV', sType=sType,pNext=pNext,image=image,buffer=buffer)
def VkExternalImageFormatPropertiesNV(imageFormatProperties=None,externalMemoryFeatures=None,exportFromImportedHandleTypes=None,compatibleHandleTypes=None,):
    return _new('VkExternalImageFormatPropertiesNV', imageFormatProperties=imageFormatProperties,externalMemoryFeatures=externalMemoryFeatures,exportFromImportedHandleTypes=exportFromImportedHandleTypes,compatibleHandleTypes=compatibleHandleTypes)
def VkExternalMemoryImageCreateInfoNV(sType=None,pNext=None,handleTypes=None,):
    return _new('VkExternalMemoryImageCreateInfoNV', sType=sType,pNext=pNext,handleTypes=handleTypes)
def VkExportMemoryAllocateInfoNV(sType=None,pNext=None,handleTypes=None,):
    return _new('VkExportMemoryAllocateInfoNV', sType=sType,pNext=pNext,handleTypes=handleTypes)
def VkImportMemoryWin32HandleInfoNV(sType=None,pNext=None,handleType=None,handle=None,):
    return _new('VkImportMemoryWin32HandleInfoNV', sType=sType,pNext=pNext,handleType=handleType,handle=handle)
def VkExportMemoryWin32HandleInfoNV(sType=None,pNext=None,pAttributes=None,dwAccess=None,):
    return _new('VkExportMemoryWin32HandleInfoNV', sType=sType,pNext=pNext,pAttributes=pAttributes,dwAccess=dwAccess)
def VkWin32KeyedMutexAcquireReleaseInfoNV(sType=None,pNext=None,acquireCount=None,pAcquireSyncs=None,pAcquireKeys=None,pAcquireTimeoutMilliseconds=None,releaseCount=None,pReleaseSyncs=None,pReleaseKeys=None,):
    return _new('VkWin32KeyedMutexAcquireReleaseInfoNV', sType=sType,pNext=pNext,acquireCount=acquireCount,pAcquireSyncs=pAcquireSyncs,pAcquireKeys=pAcquireKeys,pAcquireTimeoutMilliseconds=pAcquireTimeoutMilliseconds,releaseCount=releaseCount,pReleaseSyncs=pReleaseSyncs,pReleaseKeys=pReleaseKeys)
def VkDeviceGeneratedCommandsFeaturesNVX(sType=None,pNext=None,computeBindingPointSupport=None,):
    return _new('VkDeviceGeneratedCommandsFeaturesNVX', sType=sType,pNext=pNext,computeBindingPointSupport=computeBindingPointSupport)
def VkDeviceGeneratedCommandsLimitsNVX(sType=None,pNext=None,maxIndirectCommandsLayoutTokenCount=None,maxObjectEntryCounts=None,minSequenceCountBufferOffsetAlignment=None,minSequenceIndexBufferOffsetAlignment=None,minCommandsTokenBufferOffsetAlignment=None,):
    return _new('VkDeviceGeneratedCommandsLimitsNVX', sType=sType,pNext=pNext,maxIndirectCommandsLayoutTokenCount=maxIndirectCommandsLayoutTokenCount,maxObjectEntryCounts=maxObjectEntryCounts,minSequenceCountBufferOffsetAlignment=minSequenceCountBufferOffsetAlignment,minSequenceIndexBufferOffsetAlignment=minSequenceIndexBufferOffsetAlignment,minCommandsTokenBufferOffsetAlignment=minCommandsTokenBufferOffsetAlignment)
def VkIndirectCommandsTokenNVX(tokenType=None,buffer=None,offset=None,):
    return _new('VkIndirectCommandsTokenNVX', tokenType=tokenType,buffer=buffer,offset=offset)
def VkIndirectCommandsLayoutTokenNVX(tokenType=None,bindingUnit=None,dynamicCount=None,divisor=None,):
    return _new('VkIndirectCommandsLayoutTokenNVX', tokenType=tokenType,bindingUnit=bindingUnit,dynamicCount=dynamicCount,divisor=divisor)
def VkIndirectCommandsLayoutCreateInfoNVX(sType=None,pNext=None,pipelineBindPoint=None,flags=None,tokenCount=None,pTokens=None,):
    return _new('VkIndirectCommandsLayoutCreateInfoNVX', sType=sType,pNext=pNext,pipelineBindPoint=pipelineBindPoint,flags=flags,tokenCount=tokenCount,pTokens=pTokens)
def VkCmdProcessCommandsInfoNVX(sType=None,pNext=None,objectTable=None,indirectCommandsLayout=None,indirectCommandsTokenCount=None,pIndirectCommandsTokens=None,maxSequencesCount=None,targetCommandBuffer=None,sequencesCountBuffer=None,sequencesCountOffset=None,sequencesIndexBuffer=None,sequencesIndexOffset=None,):
    return _new('VkCmdProcessCommandsInfoNVX', sType=sType,pNext=pNext,objectTable=objectTable,indirectCommandsLayout=indirectCommandsLayout,indirectCommandsTokenCount=indirectCommandsTokenCount,pIndirectCommandsTokens=pIndirectCommandsTokens,maxSequencesCount=maxSequencesCount,targetCommandBuffer=targetCommandBuffer,sequencesCountBuffer=sequencesCountBuffer,sequencesCountOffset=sequencesCountOffset,sequencesIndexBuffer=sequencesIndexBuffer,sequencesIndexOffset=sequencesIndexOffset)
def VkCmdReserveSpaceForCommandsInfoNVX(sType=None,pNext=None,objectTable=None,indirectCommandsLayout=None,maxSequencesCount=None,):
    return _new('VkCmdReserveSpaceForCommandsInfoNVX', sType=sType,pNext=pNext,objectTable=objectTable,indirectCommandsLayout=indirectCommandsLayout,maxSequencesCount=maxSequencesCount)
def VkObjectTableCreateInfoNVX(sType=None,pNext=None,objectCount=None,pObjectEntryTypes=None,pObjectEntryCounts=None,pObjectEntryUsageFlags=None,maxUniformBuffersPerDescriptor=None,maxStorageBuffersPerDescriptor=None,maxStorageImagesPerDescriptor=None,maxSampledImagesPerDescriptor=None,maxPipelineLayouts=None,):
    return _new('VkObjectTableCreateInfoNVX', sType=sType,pNext=pNext,objectCount=objectCount,pObjectEntryTypes=pObjectEntryTypes,pObjectEntryCounts=pObjectEntryCounts,pObjectEntryUsageFlags=pObjectEntryUsageFlags,maxUniformBuffersPerDescriptor=maxUniformBuffersPerDescriptor,maxStorageBuffersPerDescriptor=maxStorageBuffersPerDescriptor,maxStorageImagesPerDescriptor=maxStorageImagesPerDescriptor,maxSampledImagesPerDescriptor=maxSampledImagesPerDescriptor,maxPipelineLayouts=maxPipelineLayouts)
def VkObjectTableEntryNVX(type=None,flags=None,):
    return _new('VkObjectTableEntryNVX', type=type,flags=flags)
def VkObjectTablePipelineEntryNVX(type=None,flags=None,pipeline=None,):
    return _new('VkObjectTablePipelineEntryNVX', type=type,flags=flags,pipeline=pipeline)
def VkObjectTableDescriptorSetEntryNVX(type=None,flags=None,pipelineLayout=None,descriptorSet=None,):
    return _new('VkObjectTableDescriptorSetEntryNVX', type=type,flags=flags,pipelineLayout=pipelineLayout,descriptorSet=descriptorSet)
def VkObjectTableVertexBufferEntryNVX(type=None,flags=None,buffer=None,):
    return _new('VkObjectTableVertexBufferEntryNVX', type=type,flags=flags,buffer=buffer)
def VkObjectTableIndexBufferEntryNVX(type=None,flags=None,buffer=None,indexType=None,):
    return _new('VkObjectTableIndexBufferEntryNVX', type=type,flags=flags,buffer=buffer,indexType=indexType)
def VkObjectTablePushConstantEntryNVX(type=None,flags=None,pipelineLayout=None,stageFlags=None,):
    return _new('VkObjectTablePushConstantEntryNVX', type=type,flags=flags,pipelineLayout=pipelineLayout,stageFlags=stageFlags)
def VkPhysicalDeviceFeatures2KHR(sType=None,pNext=None,features=None,):
    return _new('VkPhysicalDeviceFeatures2KHR', sType=sType,pNext=pNext,features=features)
def VkPhysicalDeviceProperties2KHR(sType=None,pNext=None,properties=None,):
    return _new('VkPhysicalDeviceProperties2KHR', sType=sType,pNext=pNext,properties=properties)
def VkFormatProperties2KHR(sType=None,pNext=None,formatProperties=None,):
    return _new('VkFormatProperties2KHR', sType=sType,pNext=pNext,formatProperties=formatProperties)
def VkImageFormatProperties2KHR(sType=None,pNext=None,imageFormatProperties=None,):
    return _new('VkImageFormatProperties2KHR', sType=sType,pNext=pNext,imageFormatProperties=imageFormatProperties)
def VkPhysicalDeviceImageFormatInfo2KHR(sType=None,pNext=None,format=None,type=None,tiling=None,usage=None,flags=None,):
    return _new('VkPhysicalDeviceImageFormatInfo2KHR', sType=sType,pNext=pNext,format=format,type=type,tiling=tiling,usage=usage,flags=flags)
def VkQueueFamilyProperties2KHR(sType=None,pNext=None,queueFamilyProperties=None,):
    return _new('VkQueueFamilyProperties2KHR', sType=sType,pNext=pNext,queueFamilyProperties=queueFamilyProperties)
def VkPhysicalDeviceMemoryProperties2KHR(sType=None,pNext=None,memoryProperties=None,):
    return _new('VkPhysicalDeviceMemoryProperties2KHR', sType=sType,pNext=pNext,memoryProperties=memoryProperties)
def VkSparseImageFormatProperties2KHR(sType=None,pNext=None,properties=None,):
    return _new('VkSparseImageFormatProperties2KHR', sType=sType,pNext=pNext,properties=properties)
def VkPhysicalDeviceSparseImageFormatInfo2KHR(sType=None,pNext=None,format=None,type=None,samples=None,usage=None,tiling=None,):
    return _new('VkPhysicalDeviceSparseImageFormatInfo2KHR', sType=sType,pNext=pNext,format=format,type=type,samples=samples,usage=usage,tiling=tiling)
def VkPhysicalDevicePushDescriptorPropertiesKHR(sType=None,pNext=None,maxPushDescriptors=None,):
    return _new('VkPhysicalDevicePushDescriptorPropertiesKHR', sType=sType,pNext=pNext,maxPushDescriptors=maxPushDescriptors)
def VkPresentRegionsKHR(sType=None,pNext=None,swapchainCount=None,pRegions=None,):
    return _new('VkPresentRegionsKHR', sType=sType,pNext=pNext,swapchainCount=swapchainCount,pRegions=pRegions)
def VkPresentRegionKHR(rectangleCount=None,pRectangles=None,):
    return _new('VkPresentRegionKHR', rectangleCount=rectangleCount,pRectangles=pRectangles)
def VkRectLayerKHR(offset=None,extent=None,layer=None,):
    return _new('VkRectLayerKHR', offset=offset,extent=extent,layer=layer)
def VkExternalMemoryPropertiesKHX(externalMemoryFeatures=None,exportFromImportedHandleTypes=None,compatibleHandleTypes=None,):
    return _new('VkExternalMemoryPropertiesKHX', externalMemoryFeatures=externalMemoryFeatures,exportFromImportedHandleTypes=exportFromImportedHandleTypes,compatibleHandleTypes=compatibleHandleTypes)
def VkPhysicalDeviceExternalImageFormatInfoKHX(sType=None,pNext=None,handleType=None,):
    return _new('VkPhysicalDeviceExternalImageFormatInfoKHX', sType=sType,pNext=pNext,handleType=handleType)
def VkExternalImageFormatPropertiesKHX(sType=None,pNext=None,externalMemoryProperties=None,):
    return _new('VkExternalImageFormatPropertiesKHX', sType=sType,pNext=pNext,externalMemoryProperties=externalMemoryProperties)
def VkPhysicalDeviceExternalBufferInfoKHX(sType=None,pNext=None,flags=None,usage=None,handleType=None,):
    return _new('VkPhysicalDeviceExternalBufferInfoKHX', sType=sType,pNext=pNext,flags=flags,usage=usage,handleType=handleType)
def VkExternalBufferPropertiesKHX(sType=None,pNext=None,externalMemoryProperties=None,):
    return _new('VkExternalBufferPropertiesKHX', sType=sType,pNext=pNext,externalMemoryProperties=externalMemoryProperties)
def VkPhysicalDeviceIDPropertiesKHX(sType=None,pNext=None,deviceUUID=None,driverUUID=None,deviceLUID=None,deviceLUIDValid=None,):
    return _new('VkPhysicalDeviceIDPropertiesKHX', sType=sType,pNext=pNext,deviceUUID=deviceUUID,driverUUID=driverUUID,deviceLUID=deviceLUID,deviceLUIDValid=deviceLUIDValid)
def VkExternalMemoryImageCreateInfoKHX(sType=None,pNext=None,handleTypes=None,):
    return _new('VkExternalMemoryImageCreateInfoKHX', sType=sType,pNext=pNext,handleTypes=handleTypes)
def VkExternalMemoryBufferCreateInfoKHX(sType=None,pNext=None,handleTypes=None,):
    return _new('VkExternalMemoryBufferCreateInfoKHX', sType=sType,pNext=pNext,handleTypes=handleTypes)
def VkExportMemoryAllocateInfoKHX(sType=None,pNext=None,handleTypes=None,):
    return _new('VkExportMemoryAllocateInfoKHX', sType=sType,pNext=pNext,handleTypes=handleTypes)
def VkImportMemoryWin32HandleInfoKHX(sType=None,pNext=None,handleType=None,handle=None,):
    return _new('VkImportMemoryWin32HandleInfoKHX', sType=sType,pNext=pNext,handleType=handleType,handle=handle)
def VkExportMemoryWin32HandleInfoKHX(sType=None,pNext=None,pAttributes=None,dwAccess=None,name=None,):
    return _new('VkExportMemoryWin32HandleInfoKHX', sType=sType,pNext=pNext,pAttributes=pAttributes,dwAccess=dwAccess,name=name)
def VkMemoryWin32HandlePropertiesKHX(sType=None,pNext=None,memoryTypeBits=None,):
    return _new('VkMemoryWin32HandlePropertiesKHX', sType=sType,pNext=pNext,memoryTypeBits=memoryTypeBits)
def VkImportMemoryFdInfoKHX(sType=None,pNext=None,handleType=None,fd=None,):
    return _new('VkImportMemoryFdInfoKHX', sType=sType,pNext=pNext,handleType=handleType,fd=fd)
def VkMemoryFdPropertiesKHX(sType=None,pNext=None,memoryTypeBits=None,):
    return _new('VkMemoryFdPropertiesKHX', sType=sType,pNext=pNext,memoryTypeBits=memoryTypeBits)
def VkWin32KeyedMutexAcquireReleaseInfoKHX(sType=None,pNext=None,acquireCount=None,pAcquireSyncs=None,pAcquireKeys=None,pAcquireTimeouts=None,releaseCount=None,pReleaseSyncs=None,pReleaseKeys=None,):
    return _new('VkWin32KeyedMutexAcquireReleaseInfoKHX', sType=sType,pNext=pNext,acquireCount=acquireCount,pAcquireSyncs=pAcquireSyncs,pAcquireKeys=pAcquireKeys,pAcquireTimeouts=pAcquireTimeouts,releaseCount=releaseCount,pReleaseSyncs=pReleaseSyncs,pReleaseKeys=pReleaseKeys)
def VkPhysicalDeviceExternalSemaphoreInfoKHX(sType=None,pNext=None,handleType=None,):
    return _new('VkPhysicalDeviceExternalSemaphoreInfoKHX', sType=sType,pNext=pNext,handleType=handleType)
def VkExternalSemaphorePropertiesKHX(sType=None,pNext=None,exportFromImportedHandleTypes=None,compatibleHandleTypes=None,externalSemaphoreFeatures=None,):
    return _new('VkExternalSemaphorePropertiesKHX', sType=sType,pNext=pNext,exportFromImportedHandleTypes=exportFromImportedHandleTypes,compatibleHandleTypes=compatibleHandleTypes,externalSemaphoreFeatures=externalSemaphoreFeatures)
def VkExportSemaphoreCreateInfoKHX(sType=None,pNext=None,handleTypes=None,):
    return _new('VkExportSemaphoreCreateInfoKHX', sType=sType,pNext=pNext,handleTypes=handleTypes)
def VkImportSemaphoreWin32HandleInfoKHX(sType=None,pNext=None,semaphore=None,handleType=None,handle=None,):
    return _new('VkImportSemaphoreWin32HandleInfoKHX', sType=sType,pNext=pNext,semaphore=semaphore,handleType=handleType,handle=handle)
def VkExportSemaphoreWin32HandleInfoKHX(sType=None,pNext=None,pAttributes=None,dwAccess=None,name=None,):
    return _new('VkExportSemaphoreWin32HandleInfoKHX', sType=sType,pNext=pNext,pAttributes=pAttributes,dwAccess=dwAccess,name=name)
def VkD3D12FenceSubmitInfoKHX(sType=None,pNext=None,waitSemaphoreValuesCount=None,pWaitSemaphoreValues=None,signalSemaphoreValuesCount=None,pSignalSemaphoreValues=None,):
    return _new('VkD3D12FenceSubmitInfoKHX', sType=sType,pNext=pNext,waitSemaphoreValuesCount=waitSemaphoreValuesCount,pWaitSemaphoreValues=pWaitSemaphoreValues,signalSemaphoreValuesCount=signalSemaphoreValuesCount,pSignalSemaphoreValues=pSignalSemaphoreValues)
def VkImportSemaphoreFdInfoKHX(sType=None,pNext=None,semaphore=None,handleType=None,fd=None,):
    return _new('VkImportSemaphoreFdInfoKHX', sType=sType,pNext=pNext,semaphore=semaphore,handleType=handleType,fd=fd)
def VkPhysicalDeviceMultiviewFeaturesKHX(sType=None,pNext=None,multiview=None,multiviewGeometryShader=None,multiviewTessellationShader=None,):
    return _new('VkPhysicalDeviceMultiviewFeaturesKHX', sType=sType,pNext=pNext,multiview=multiview,multiviewGeometryShader=multiviewGeometryShader,multiviewTessellationShader=multiviewTessellationShader)
def VkPhysicalDeviceMultiviewPropertiesKHX(sType=None,pNext=None,maxMultiviewViewCount=None,maxMultiviewInstanceIndex=None,):
    return _new('VkPhysicalDeviceMultiviewPropertiesKHX', sType=sType,pNext=pNext,maxMultiviewViewCount=maxMultiviewViewCount,maxMultiviewInstanceIndex=maxMultiviewInstanceIndex)
def VkRenderPassMultiviewCreateInfoKHX(sType=None,pNext=None,subpassCount=None,pViewMasks=None,dependencyCount=None,pViewOffsets=None,correlationMaskCount=None,pCorrelationMasks=None,):
    return _new('VkRenderPassMultiviewCreateInfoKHX', sType=sType,pNext=pNext,subpassCount=subpassCount,pViewMasks=pViewMasks,dependencyCount=dependencyCount,pViewOffsets=pViewOffsets,correlationMaskCount=correlationMaskCount,pCorrelationMasks=pCorrelationMasks)
def VkSurfaceCapabilities2EXT(sType=None,pNext=None,minImageCount=None,maxImageCount=None,currentExtent=None,minImageExtent=None,maxImageExtent=None,maxImageArrayLayers=None,supportedTransforms=None,currentTransform=None,supportedCompositeAlpha=None,supportedUsageFlags=None,supportedSurfaceCounters=None,):
    return _new('VkSurfaceCapabilities2EXT', sType=sType,pNext=pNext,minImageCount=minImageCount,maxImageCount=maxImageCount,currentExtent=currentExtent,minImageExtent=minImageExtent,maxImageExtent=maxImageExtent,maxImageArrayLayers=maxImageArrayLayers,supportedTransforms=supportedTransforms,currentTransform=currentTransform,supportedCompositeAlpha=supportedCompositeAlpha,supportedUsageFlags=supportedUsageFlags,supportedSurfaceCounters=supportedSurfaceCounters)
def VkDisplayPowerInfoEXT(sType=None,pNext=None,powerState=None,):
    return _new('VkDisplayPowerInfoEXT', sType=sType,pNext=pNext,powerState=powerState)
def VkDeviceEventInfoEXT(sType=None,pNext=None,deviceEvent=None,):
    return _new('VkDeviceEventInfoEXT', sType=sType,pNext=pNext,deviceEvent=deviceEvent)
def VkDisplayEventInfoEXT(sType=None,pNext=None,displayEvent=None,):
    return _new('VkDisplayEventInfoEXT', sType=sType,pNext=pNext,displayEvent=displayEvent)
def VkSwapchainCounterCreateInfoEXT(sType=None,pNext=None,surfaceCounters=None,):
    return _new('VkSwapchainCounterCreateInfoEXT', sType=sType,pNext=pNext,surfaceCounters=surfaceCounters)
def VkPhysicalDeviceGroupPropertiesKHX(sType=None,pNext=None,physicalDeviceCount=None,physicalDevices=None,subsetAllocation=None,):
    return _new('VkPhysicalDeviceGroupPropertiesKHX', sType=sType,pNext=pNext,physicalDeviceCount=physicalDeviceCount,physicalDevices=physicalDevices,subsetAllocation=subsetAllocation)
def VkMemoryAllocateFlagsInfoKHX(sType=None,pNext=None,flags=None,deviceMask=None,):
    return _new('VkMemoryAllocateFlagsInfoKHX', sType=sType,pNext=pNext,flags=flags,deviceMask=deviceMask)
def VkBindBufferMemoryInfoKHX(sType=None,pNext=None,buffer=None,memory=None,memoryOffset=None,deviceIndexCount=None,pDeviceIndices=None,):
    return _new('VkBindBufferMemoryInfoKHX', sType=sType,pNext=pNext,buffer=buffer,memory=memory,memoryOffset=memoryOffset,deviceIndexCount=deviceIndexCount,pDeviceIndices=pDeviceIndices)
def VkBindImageMemoryInfoKHX(sType=None,pNext=None,image=None,memory=None,memoryOffset=None,deviceIndexCount=None,pDeviceIndices=None,SFRRectCount=None,pSFRRects=None,):
    return _new('VkBindImageMemoryInfoKHX', sType=sType,pNext=pNext,image=image,memory=memory,memoryOffset=memoryOffset,deviceIndexCount=deviceIndexCount,pDeviceIndices=pDeviceIndices,SFRRectCount=SFRRectCount,pSFRRects=pSFRRects)
def VkDeviceGroupRenderPassBeginInfoKHX(sType=None,pNext=None,deviceMask=None,deviceRenderAreaCount=None,pDeviceRenderAreas=None,):
    return _new('VkDeviceGroupRenderPassBeginInfoKHX', sType=sType,pNext=pNext,deviceMask=deviceMask,deviceRenderAreaCount=deviceRenderAreaCount,pDeviceRenderAreas=pDeviceRenderAreas)
def VkDeviceGroupCommandBufferBeginInfoKHX(sType=None,pNext=None,deviceMask=None,):
    return _new('VkDeviceGroupCommandBufferBeginInfoKHX', sType=sType,pNext=pNext,deviceMask=deviceMask)
def VkDeviceGroupSubmitInfoKHX(sType=None,pNext=None,waitSemaphoreCount=None,pWaitSemaphoreDeviceIndices=None,commandBufferCount=None,pCommandBufferDeviceMasks=None,signalSemaphoreCount=None,pSignalSemaphoreDeviceIndices=None,):
    return _new('VkDeviceGroupSubmitInfoKHX', sType=sType,pNext=pNext,waitSemaphoreCount=waitSemaphoreCount,pWaitSemaphoreDeviceIndices=pWaitSemaphoreDeviceIndices,commandBufferCount=commandBufferCount,pCommandBufferDeviceMasks=pCommandBufferDeviceMasks,signalSemaphoreCount=signalSemaphoreCount,pSignalSemaphoreDeviceIndices=pSignalSemaphoreDeviceIndices)
def VkDeviceGroupBindSparseInfoKHX(sType=None,pNext=None,resourceDeviceIndex=None,memoryDeviceIndex=None,):
    return _new('VkDeviceGroupBindSparseInfoKHX', sType=sType,pNext=pNext,resourceDeviceIndex=resourceDeviceIndex,memoryDeviceIndex=memoryDeviceIndex)
def VkDeviceGroupPresentCapabilitiesKHX(sType=None,pNext=None,presentMask=None,modes=None,):
    return _new('VkDeviceGroupPresentCapabilitiesKHX', sType=sType,pNext=pNext,presentMask=presentMask,modes=modes)
def VkImageSwapchainCreateInfoKHX(sType=None,pNext=None,swapchain=None,):
    return _new('VkImageSwapchainCreateInfoKHX', sType=sType,pNext=pNext,swapchain=swapchain)
def VkBindImageMemorySwapchainInfoKHX(sType=None,pNext=None,swapchain=None,imageIndex=None,):
    return _new('VkBindImageMemorySwapchainInfoKHX', sType=sType,pNext=pNext,swapchain=swapchain,imageIndex=imageIndex)
def VkAcquireNextImageInfoKHX(sType=None,pNext=None,swapchain=None,timeout=None,semaphore=None,fence=None,deviceMask=None,):
    return _new('VkAcquireNextImageInfoKHX', sType=sType,pNext=pNext,swapchain=swapchain,timeout=timeout,semaphore=semaphore,fence=fence,deviceMask=deviceMask)
def VkDeviceGroupPresentInfoKHX(sType=None,pNext=None,swapchainCount=None,pDeviceMasks=None,mode=None,):
    return _new('VkDeviceGroupPresentInfoKHX', sType=sType,pNext=pNext,swapchainCount=swapchainCount,pDeviceMasks=pDeviceMasks,mode=mode)
def VkDeviceGroupDeviceCreateInfoKHX(sType=None,pNext=None,physicalDeviceCount=None,pPhysicalDevices=None,):
    return _new('VkDeviceGroupDeviceCreateInfoKHX', sType=sType,pNext=pNext,physicalDeviceCount=physicalDeviceCount,pPhysicalDevices=pPhysicalDevices)
def VkDeviceGroupSwapchainCreateInfoKHX(sType=None,pNext=None,modes=None,):
    return _new('VkDeviceGroupSwapchainCreateInfoKHX', sType=sType,pNext=pNext,modes=modes)
def VkDescriptorUpdateTemplateEntryKHR(dstBinding=None,dstArrayElement=None,descriptorCount=None,descriptorType=None,offset=None,stride=None,):
    return _new('VkDescriptorUpdateTemplateEntryKHR', dstBinding=dstBinding,dstArrayElement=dstArrayElement,descriptorCount=descriptorCount,descriptorType=descriptorType,offset=offset,stride=stride)
def VkDescriptorUpdateTemplateCreateInfoKHR(sType=None,pNext=None,flags=None,descriptorUpdateEntryCount=None,pDescriptorUpdateEntries=None,templateType=None,descriptorSetLayout=None,pipelineBindPoint=None,pipelineLayout=None,set=None,):
    return _new('VkDescriptorUpdateTemplateCreateInfoKHR', sType=sType,pNext=pNext,flags=flags,descriptorUpdateEntryCount=descriptorUpdateEntryCount,pDescriptorUpdateEntries=pDescriptorUpdateEntries,templateType=templateType,descriptorSetLayout=descriptorSetLayout,pipelineBindPoint=pipelineBindPoint,pipelineLayout=pipelineLayout,set=set)
def VkXYColorEXT(x=None,y=None,):
    return _new('VkXYColorEXT', x=x,y=y)
def VkHdrMetadataEXT(sType=None,pNext=None,displayPrimaryRed=None,displayPrimaryGreen=None,displayPrimaryBlue=None,whitePoint=None,maxLuminance=None,minLuminance=None,maxContentLightLevel=None,maxFrameAverageLightLevel=None,):
    return _new('VkHdrMetadataEXT', sType=sType,pNext=pNext,displayPrimaryRed=displayPrimaryRed,displayPrimaryGreen=displayPrimaryGreen,displayPrimaryBlue=displayPrimaryBlue,whitePoint=whitePoint,maxLuminance=maxLuminance,minLuminance=minLuminance,maxContentLightLevel=maxContentLightLevel,maxFrameAverageLightLevel=maxFrameAverageLightLevel)
def VkRefreshCycleDurationGOOGLE(refreshDuration=None,):
    return _new('VkRefreshCycleDurationGOOGLE', refreshDuration=refreshDuration)
def VkPastPresentationTimingGOOGLE(presentID=None,desiredPresentTime=None,actualPresentTime=None,earliestPresentTime=None,presentMargin=None,):
    return _new('VkPastPresentationTimingGOOGLE', presentID=presentID,desiredPresentTime=desiredPresentTime,actualPresentTime=actualPresentTime,earliestPresentTime=earliestPresentTime,presentMargin=presentMargin)
def VkPresentTimesInfoGOOGLE(sType=None,pNext=None,swapchainCount=None,pTimes=None,):
    return _new('VkPresentTimesInfoGOOGLE', sType=sType,pNext=pNext,swapchainCount=swapchainCount,pTimes=pTimes)
def VkPresentTimeGOOGLE(presentID=None,desiredPresentTime=None,):
    return _new('VkPresentTimeGOOGLE', presentID=presentID,desiredPresentTime=desiredPresentTime)
def VkIOSSurfaceCreateInfoMVK(sType=None,pNext=None,flags=None,pView=None,):
    return _new('VkIOSSurfaceCreateInfoMVK', sType=sType,pNext=pNext,flags=flags,pView=pView)
def VkMacOSSurfaceCreateInfoMVK(sType=None,pNext=None,flags=None,pView=None,):
    return _new('VkMacOSSurfaceCreateInfoMVK', sType=sType,pNext=pNext,flags=flags,pView=pView)
def VkViewportWScalingNV(xcoeff=None,ycoeff=None,):
    return _new('VkViewportWScalingNV', xcoeff=xcoeff,ycoeff=ycoeff)
def VkPipelineViewportWScalingStateCreateInfoNV(sType=None,pNext=None,viewportWScalingEnable=None,viewportCount=None,pViewportWScalings=None,):
    return _new('VkPipelineViewportWScalingStateCreateInfoNV', sType=sType,pNext=pNext,viewportWScalingEnable=viewportWScalingEnable,viewportCount=viewportCount,pViewportWScalings=pViewportWScalings)
def VkViewportSwizzleNV(x=None,y=None,z=None,w=None,):
    return _new('VkViewportSwizzleNV', x=x,y=y,z=z,w=w)
def VkPipelineViewportSwizzleStateCreateInfoNV(sType=None,pNext=None,flags=None,viewportCount=None,pViewportSwizzles=None,):
    return _new('VkPipelineViewportSwizzleStateCreateInfoNV', sType=sType,pNext=pNext,flags=flags,viewportCount=viewportCount,pViewportSwizzles=pViewportSwizzles)
def VkPhysicalDeviceDiscardRectanglePropertiesEXT(sType=None,pNext=None,maxDiscardRectangles=None,):
    return _new('VkPhysicalDeviceDiscardRectanglePropertiesEXT', sType=sType,pNext=pNext,maxDiscardRectangles=maxDiscardRectangles)
def VkPipelineDiscardRectangleStateCreateInfoEXT(sType=None,pNext=None,flags=None,discardRectangleMode=None,discardRectangleCount=None,pDiscardRectangles=None,):
    return _new('VkPipelineDiscardRectangleStateCreateInfoEXT', sType=sType,pNext=pNext,flags=flags,discardRectangleMode=discardRectangleMode,discardRectangleCount=discardRectangleCount,pDiscardRectangles=pDiscardRectangles)
def VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(sType=None,pNext=None,perViewPositionAllComponents=None,):
    return _new('VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX', sType=sType,pNext=pNext,perViewPositionAllComponents=perViewPositionAllComponents)
def VkPhysicalDeviceSurfaceInfo2KHR(sType=None,pNext=None,surface=None,):
    return _new('VkPhysicalDeviceSurfaceInfo2KHR', sType=sType,pNext=pNext,surface=surface)
def VkSurfaceCapabilities2KHR(sType=None,pNext=None,surfaceCapabilities=None,):
    return _new('VkSurfaceCapabilities2KHR', sType=sType,pNext=pNext,surfaceCapabilities=surfaceCapabilities)
def VkSurfaceFormat2KHR(sType=None,pNext=None,surfaceFormat=None,):
    return _new('VkSurfaceFormat2KHR', sType=sType,pNext=pNext,surfaceFormat=surfaceFormat)
def VkSharedPresentSurfaceCapabilitiesKHR(sType=None,pNext=None,sharedPresentSupportedUsageFlags=None,):
    return _new('VkSharedPresentSurfaceCapabilitiesKHR', sType=sType,pNext=pNext,sharedPresentSupportedUsageFlags=sharedPresentSupportedUsageFlags)

def _(x, _type):
    if x is None:
        return ffi.NULL
    if _type.kind == 'pointer':
        ptr, _ = _cast_ptr(x, _type)
        return ptr
    return x
    
def _callApi(fn, *args):
    fn_args = [_(i, j) for i, j in zip(args, ffi.typeof(fn).args)]
    return fn(*fn_args)






def vkCreateInstance(pCreateInfo
        ,pAllocator
        ,):

    pInstance = ffi.new('VkInstance*')

    result = _callApi(_lib.vkCreateInstance, pCreateInfo,pAllocator,pInstance)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pInstance[0]



def vkDestroyInstance(instance
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyInstance, instance,pAllocator)


def vkEnumeratePhysicalDevices(instance
        ,):

    pPhysicalDeviceCount = ffi.new('uint32_t*')
    pPhysicalDevices = ffi.NULL

    result = _callApi(_lib.vkEnumeratePhysicalDevices, instance,pPhysicalDeviceCount,pPhysicalDevices)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    pPhysicalDevices = ffi.new('VkPhysicalDevice[]', pPhysicalDeviceCount[0])
    result = _callApi(_lib.vkEnumeratePhysicalDevices, instance,pPhysicalDeviceCount,pPhysicalDevices)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pPhysicalDevices


def vkGetPhysicalDeviceProperties(physicalDevice
        ,):

    pProperties = ffi.new('VkPhysicalDeviceProperties*')

    result = _callApi(_lib.vkGetPhysicalDeviceProperties, physicalDevice,pProperties)

    return _StrWrap(pProperties[0])



def vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice
        ,):

    pQueueFamilyPropertyCount = ffi.new('uint32_t*')
    pQueueFamilyProperties = ffi.NULL

    result = _callApi(_lib.vkGetPhysicalDeviceQueueFamilyProperties, physicalDevice,pQueueFamilyPropertyCount,pQueueFamilyProperties)

    pQueueFamilyProperties = ffi.new('VkQueueFamilyProperties[]', pQueueFamilyPropertyCount[0])
    result = _callApi(_lib.vkGetPhysicalDeviceQueueFamilyProperties, physicalDevice,pQueueFamilyPropertyCount,pQueueFamilyProperties)

    return pQueueFamilyProperties


def vkGetPhysicalDeviceMemoryProperties(physicalDevice
        ,):

    pMemoryProperties = ffi.new('VkPhysicalDeviceMemoryProperties*')

    result = _callApi(_lib.vkGetPhysicalDeviceMemoryProperties, physicalDevice,pMemoryProperties)

    return pMemoryProperties[0]



def vkGetPhysicalDeviceFeatures(physicalDevice
        ,):

    pFeatures = ffi.new('VkPhysicalDeviceFeatures*')

    result = _callApi(_lib.vkGetPhysicalDeviceFeatures, physicalDevice,pFeatures)

    return pFeatures[0]



def vkGetPhysicalDeviceFormatProperties(physicalDevice
        ,format
        ,):

    pFormatProperties = ffi.new('VkFormatProperties*')

    result = _callApi(_lib.vkGetPhysicalDeviceFormatProperties, physicalDevice,format,pFormatProperties)

    return pFormatProperties[0]



def vkGetPhysicalDeviceImageFormatProperties(physicalDevice
        ,format
        ,type
        ,tiling
        ,usage
        ,flags
        ,):

    pImageFormatProperties = ffi.new('VkImageFormatProperties*')

    result = _callApi(_lib.vkGetPhysicalDeviceImageFormatProperties, physicalDevice,format,type,tiling,usage,flags,pImageFormatProperties)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pImageFormatProperties[0]



def vkCreateDevice(physicalDevice
        ,pCreateInfo
        ,pAllocator
        ,):

    pDevice = ffi.new('VkDevice*')

    result = _callApi(_lib.vkCreateDevice, physicalDevice,pCreateInfo,pAllocator,pDevice)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pDevice[0]



def vkDestroyDevice(device
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyDevice, device,pAllocator)


def vkEnumerateInstanceLayerProperties():

    pPropertyCount = ffi.new('uint32_t*')
    pProperties = ffi.NULL

    result = _callApi(_lib.vkEnumerateInstanceLayerProperties, pPropertyCount,pProperties)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    pProperties = ffi.new('VkLayerProperties[]', pPropertyCount[0])
    result = _callApi(_lib.vkEnumerateInstanceLayerProperties, pPropertyCount,pProperties)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    result = (_StrWrap(x) for x in pProperties)
    _weakkey_dict[result] = pProperties
    return result


def vkEnumerateInstanceExtensionProperties(pLayerName
        ,):

    pPropertyCount = ffi.new('uint32_t*')
    pProperties = ffi.NULL

    result = _callApi(_lib.vkEnumerateInstanceExtensionProperties, pLayerName,pPropertyCount,pProperties)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    pProperties = ffi.new('VkExtensionProperties[]', pPropertyCount[0])
    result = _callApi(_lib.vkEnumerateInstanceExtensionProperties, pLayerName,pPropertyCount,pProperties)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    result = (_StrWrap(x) for x in pProperties)
    _weakkey_dict[result] = pProperties
    return result


def vkEnumerateDeviceLayerProperties(physicalDevice
        ,):

    pPropertyCount = ffi.new('uint32_t*')
    pProperties = ffi.NULL

    result = _callApi(_lib.vkEnumerateDeviceLayerProperties, physicalDevice,pPropertyCount,pProperties)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    pProperties = ffi.new('VkLayerProperties[]', pPropertyCount[0])
    result = _callApi(_lib.vkEnumerateDeviceLayerProperties, physicalDevice,pPropertyCount,pProperties)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    result = (_StrWrap(x) for x in pProperties)
    _weakkey_dict[result] = pProperties
    return result


def vkEnumerateDeviceExtensionProperties(physicalDevice
        ,pLayerName
        ,):

    pPropertyCount = ffi.new('uint32_t*')
    pProperties = ffi.NULL

    result = _callApi(_lib.vkEnumerateDeviceExtensionProperties, physicalDevice,pLayerName,pPropertyCount,pProperties)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    pProperties = ffi.new('VkExtensionProperties[]', pPropertyCount[0])
    result = _callApi(_lib.vkEnumerateDeviceExtensionProperties, physicalDevice,pLayerName,pPropertyCount,pProperties)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    result = (_StrWrap(x) for x in pProperties)
    _weakkey_dict[result] = pProperties
    return result


def vkGetDeviceQueue(device
        ,queueFamilyIndex
        ,queueIndex
        ,):

    pQueue = ffi.new('VkQueue*')

    result = _callApi(_lib.vkGetDeviceQueue, device,queueFamilyIndex,queueIndex,pQueue)

    return pQueue[0]



def vkQueueSubmit(queue
        ,submitCount
        ,pSubmits
        ,fence
        ,):
    result = _callApi(_lib.vkQueueSubmit, queue,submitCount,pSubmits,fence)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkQueueWaitIdle(queue
        ,):
    result = _callApi(_lib.vkQueueWaitIdle, queue)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkDeviceWaitIdle(device
        ,):
    result = _callApi(_lib.vkDeviceWaitIdle, device)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkAllocateMemory(device
        ,pAllocateInfo
        ,pAllocator
        ,):

    pMemory = ffi.new('VkDeviceMemory*')

    result = _callApi(_lib.vkAllocateMemory, device,pAllocateInfo,pAllocator,pMemory)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pMemory[0]



def vkFreeMemory(device
        ,memory
        ,pAllocator
        ,):
    result = _callApi(_lib.vkFreeMemory, device,memory,pAllocator)


def vkUnmapMemory(device
        ,memory
        ,):
    result = _callApi(_lib.vkUnmapMemory, device,memory)


def vkFlushMappedMemoryRanges(device
        ,memoryRangeCount
        ,pMemoryRanges
        ,):
    result = _callApi(_lib.vkFlushMappedMemoryRanges, device,memoryRangeCount,pMemoryRanges)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkInvalidateMappedMemoryRanges(device
        ,memoryRangeCount
        ,pMemoryRanges
        ,):
    result = _callApi(_lib.vkInvalidateMappedMemoryRanges, device,memoryRangeCount,pMemoryRanges)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkGetDeviceMemoryCommitment(device
        ,memory
        ,):

    pCommittedMemoryInBytes = ffi.new('VkDeviceSize*')

    result = _callApi(_lib.vkGetDeviceMemoryCommitment, device,memory,pCommittedMemoryInBytes)

    return pCommittedMemoryInBytes[0]



def vkGetBufferMemoryRequirements(device
        ,buffer
        ,):

    pMemoryRequirements = ffi.new('VkMemoryRequirements*')

    result = _callApi(_lib.vkGetBufferMemoryRequirements, device,buffer,pMemoryRequirements)

    return pMemoryRequirements[0]



def vkBindBufferMemory(device
        ,buffer
        ,memory
        ,memoryOffset
        ,):
    result = _callApi(_lib.vkBindBufferMemory, device,buffer,memory,memoryOffset)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkGetImageMemoryRequirements(device
        ,image
        ,):

    pMemoryRequirements = ffi.new('VkMemoryRequirements*')

    result = _callApi(_lib.vkGetImageMemoryRequirements, device,image,pMemoryRequirements)

    return pMemoryRequirements[0]



def vkBindImageMemory(device
        ,image
        ,memory
        ,memoryOffset
        ,):
    result = _callApi(_lib.vkBindImageMemory, device,image,memory,memoryOffset)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkGetImageSparseMemoryRequirements(device
        ,image
        ,):

    pSparseMemoryRequirementCount = ffi.new('uint32_t*')
    pSparseMemoryRequirements = ffi.NULL

    result = _callApi(_lib.vkGetImageSparseMemoryRequirements, device,image,pSparseMemoryRequirementCount,pSparseMemoryRequirements)

    pSparseMemoryRequirements = ffi.new('VkSparseImageMemoryRequirements[]', pSparseMemoryRequirementCount[0])
    result = _callApi(_lib.vkGetImageSparseMemoryRequirements, device,image,pSparseMemoryRequirementCount,pSparseMemoryRequirements)

    return pSparseMemoryRequirements


def vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice
        ,format
        ,type
        ,samples
        ,usage
        ,tiling
        ,):

    pPropertyCount = ffi.new('uint32_t*')
    pProperties = ffi.NULL

    result = _callApi(_lib.vkGetPhysicalDeviceSparseImageFormatProperties, physicalDevice,format,type,samples,usage,tiling,pPropertyCount,pProperties)

    pProperties = ffi.new('VkSparseImageFormatProperties[]', pPropertyCount[0])
    result = _callApi(_lib.vkGetPhysicalDeviceSparseImageFormatProperties, physicalDevice,format,type,samples,usage,tiling,pPropertyCount,pProperties)

    return pProperties


def vkQueueBindSparse(queue
        ,bindInfoCount
        ,pBindInfo
        ,fence
        ,):
    result = _callApi(_lib.vkQueueBindSparse, queue,bindInfoCount,pBindInfo,fence)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkCreateFence(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pFence = ffi.new('VkFence*')

    result = _callApi(_lib.vkCreateFence, device,pCreateInfo,pAllocator,pFence)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pFence[0]



def vkDestroyFence(device
        ,fence
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyFence, device,fence,pAllocator)


def vkResetFences(device
        ,fenceCount
        ,pFences
        ,):
    result = _callApi(_lib.vkResetFences, device,fenceCount,pFences)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkGetFenceStatus(device
        ,fence
        ,):
    result = _callApi(_lib.vkGetFenceStatus, device,fence)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkWaitForFences(device
        ,fenceCount
        ,pFences
        ,waitAll
        ,timeout
        ,):
    result = _callApi(_lib.vkWaitForFences, device,fenceCount,pFences,waitAll,timeout)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkCreateSemaphore(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pSemaphore = ffi.new('VkSemaphore*')

    result = _callApi(_lib.vkCreateSemaphore, device,pCreateInfo,pAllocator,pSemaphore)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pSemaphore[0]



def vkDestroySemaphore(device
        ,semaphore
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroySemaphore, device,semaphore,pAllocator)


def vkCreateEvent(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pEvent = ffi.new('VkEvent*')

    result = _callApi(_lib.vkCreateEvent, device,pCreateInfo,pAllocator,pEvent)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pEvent[0]



def vkDestroyEvent(device
        ,event
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyEvent, device,event,pAllocator)


def vkGetEventStatus(device
        ,event
        ,):
    result = _callApi(_lib.vkGetEventStatus, device,event)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkSetEvent(device
        ,event
        ,):
    result = _callApi(_lib.vkSetEvent, device,event)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkResetEvent(device
        ,event
        ,):
    result = _callApi(_lib.vkResetEvent, device,event)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkCreateQueryPool(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pQueryPool = ffi.new('VkQueryPool*')

    result = _callApi(_lib.vkCreateQueryPool, device,pCreateInfo,pAllocator,pQueryPool)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pQueryPool[0]



def vkDestroyQueryPool(device
        ,queryPool
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyQueryPool, device,queryPool,pAllocator)


def vkGetQueryPoolResults(device
        ,queryPool
        ,firstQuery
        ,queryCount
        ,dataSize
        ,pData
        ,stride
        ,flags
        ,):
    result = _callApi(_lib.vkGetQueryPoolResults, device,queryPool,firstQuery,queryCount,dataSize,pData,stride,flags)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkCreateBuffer(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pBuffer = ffi.new('VkBuffer*')

    result = _callApi(_lib.vkCreateBuffer, device,pCreateInfo,pAllocator,pBuffer)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pBuffer[0]



def vkDestroyBuffer(device
        ,buffer
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyBuffer, device,buffer,pAllocator)


def vkCreateBufferView(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pView = ffi.new('VkBufferView*')

    result = _callApi(_lib.vkCreateBufferView, device,pCreateInfo,pAllocator,pView)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pView[0]



def vkDestroyBufferView(device
        ,bufferView
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyBufferView, device,bufferView,pAllocator)


def vkCreateImage(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pImage = ffi.new('VkImage*')

    result = _callApi(_lib.vkCreateImage, device,pCreateInfo,pAllocator,pImage)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pImage[0]



def vkDestroyImage(device
        ,image
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyImage, device,image,pAllocator)


def vkGetImageSubresourceLayout(device
        ,image
        ,pSubresource
        ,):

    pLayout = ffi.new('VkSubresourceLayout*')

    result = _callApi(_lib.vkGetImageSubresourceLayout, device,image,pSubresource,pLayout)

    return pLayout[0]



def vkCreateImageView(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pView = ffi.new('VkImageView*')

    result = _callApi(_lib.vkCreateImageView, device,pCreateInfo,pAllocator,pView)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pView[0]



def vkDestroyImageView(device
        ,imageView
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyImageView, device,imageView,pAllocator)


def vkCreateShaderModule(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pShaderModule = ffi.new('VkShaderModule*')

    result = _callApi(_lib.vkCreateShaderModule, device,pCreateInfo,pAllocator,pShaderModule)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pShaderModule[0]



def vkDestroyShaderModule(device
        ,shaderModule
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyShaderModule, device,shaderModule,pAllocator)


def vkCreatePipelineCache(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pPipelineCache = ffi.new('VkPipelineCache*')

    result = _callApi(_lib.vkCreatePipelineCache, device,pCreateInfo,pAllocator,pPipelineCache)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pPipelineCache[0]



def vkDestroyPipelineCache(device
        ,pipelineCache
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyPipelineCache, device,pipelineCache,pAllocator)


def vkMergePipelineCaches(device
        ,dstCache
        ,srcCacheCount
        ,pSrcCaches
        ,):
    result = _callApi(_lib.vkMergePipelineCaches, device,dstCache,srcCacheCount,pSrcCaches)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkCreateGraphicsPipelines(device
        ,pipelineCache
        ,createInfoCount
        ,pCreateInfos
        ,pAllocator
        ,):

    pPipelines = ffi.new('VkPipeline*')

    result = _callApi(_lib.vkCreateGraphicsPipelines, device,pipelineCache,createInfoCount,pCreateInfos,pAllocator,pPipelines)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pPipelines[0]



def vkCreateComputePipelines(device
        ,pipelineCache
        ,createInfoCount
        ,pCreateInfos
        ,pAllocator
        ,):

    pPipelines = ffi.new('VkPipeline*')

    result = _callApi(_lib.vkCreateComputePipelines, device,pipelineCache,createInfoCount,pCreateInfos,pAllocator,pPipelines)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pPipelines[0]



def vkDestroyPipeline(device
        ,pipeline
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyPipeline, device,pipeline,pAllocator)


def vkCreatePipelineLayout(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pPipelineLayout = ffi.new('VkPipelineLayout*')

    result = _callApi(_lib.vkCreatePipelineLayout, device,pCreateInfo,pAllocator,pPipelineLayout)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pPipelineLayout[0]



def vkDestroyPipelineLayout(device
        ,pipelineLayout
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyPipelineLayout, device,pipelineLayout,pAllocator)


def vkCreateSampler(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pSampler = ffi.new('VkSampler*')

    result = _callApi(_lib.vkCreateSampler, device,pCreateInfo,pAllocator,pSampler)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pSampler[0]



def vkDestroySampler(device
        ,sampler
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroySampler, device,sampler,pAllocator)


def vkCreateDescriptorSetLayout(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pSetLayout = ffi.new('VkDescriptorSetLayout*')

    result = _callApi(_lib.vkCreateDescriptorSetLayout, device,pCreateInfo,pAllocator,pSetLayout)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pSetLayout[0]



def vkDestroyDescriptorSetLayout(device
        ,descriptorSetLayout
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyDescriptorSetLayout, device,descriptorSetLayout,pAllocator)


def vkCreateDescriptorPool(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pDescriptorPool = ffi.new('VkDescriptorPool*')

    result = _callApi(_lib.vkCreateDescriptorPool, device,pCreateInfo,pAllocator,pDescriptorPool)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pDescriptorPool[0]



def vkDestroyDescriptorPool(device
        ,descriptorPool
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyDescriptorPool, device,descriptorPool,pAllocator)


def vkResetDescriptorPool(device
        ,descriptorPool
        ,flags
        ,):
    result = _callApi(_lib.vkResetDescriptorPool, device,descriptorPool,flags)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkAllocateDescriptorSets(device
        ,pAllocateInfo
        ,):

    pDescriptorSets = ffi.new('VkDescriptorSet[%d]' % pAllocateInfo.descriptorSetCount)

    result = _callApi(_lib.vkAllocateDescriptorSets, device,pAllocateInfo,pDescriptorSets)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pDescriptorSets



def vkFreeDescriptorSets(device
        ,descriptorPool
        ,descriptorSetCount
        ,pDescriptorSets
        ,):
    result = _callApi(_lib.vkFreeDescriptorSets, device,descriptorPool,descriptorSetCount,pDescriptorSets)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkUpdateDescriptorSets(device
        ,descriptorWriteCount
        ,pDescriptorWrites
        ,descriptorCopyCount
        ,pDescriptorCopies
        ,):
    result = _callApi(_lib.vkUpdateDescriptorSets, device,descriptorWriteCount,pDescriptorWrites,descriptorCopyCount,pDescriptorCopies)


def vkCreateFramebuffer(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pFramebuffer = ffi.new('VkFramebuffer*')

    result = _callApi(_lib.vkCreateFramebuffer, device,pCreateInfo,pAllocator,pFramebuffer)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pFramebuffer[0]



def vkDestroyFramebuffer(device
        ,framebuffer
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyFramebuffer, device,framebuffer,pAllocator)


def vkCreateRenderPass(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pRenderPass = ffi.new('VkRenderPass*')

    result = _callApi(_lib.vkCreateRenderPass, device,pCreateInfo,pAllocator,pRenderPass)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pRenderPass[0]



def vkDestroyRenderPass(device
        ,renderPass
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyRenderPass, device,renderPass,pAllocator)


def vkGetRenderAreaGranularity(device
        ,renderPass
        ,):

    pGranularity = ffi.new('VkExtent2D*')

    result = _callApi(_lib.vkGetRenderAreaGranularity, device,renderPass,pGranularity)

    return pGranularity[0]



def vkCreateCommandPool(device
        ,pCreateInfo
        ,pAllocator
        ,):

    pCommandPool = ffi.new('VkCommandPool*')

    result = _callApi(_lib.vkCreateCommandPool, device,pCreateInfo,pAllocator,pCommandPool)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pCommandPool[0]



def vkDestroyCommandPool(device
        ,commandPool
        ,pAllocator
        ,):
    result = _callApi(_lib.vkDestroyCommandPool, device,commandPool,pAllocator)


def vkResetCommandPool(device
        ,commandPool
        ,flags
        ,):
    result = _callApi(_lib.vkResetCommandPool, device,commandPool,flags)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkAllocateCommandBuffers(device
        ,pAllocateInfo
        ,):

    pCommandBuffers = ffi.new('VkCommandBuffer[%d]' % pAllocateInfo.commandBufferCount)

    result = _callApi(_lib.vkAllocateCommandBuffers, device,pAllocateInfo,pCommandBuffers)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return pCommandBuffers



def vkFreeCommandBuffers(device
        ,commandPool
        ,commandBufferCount
        ,pCommandBuffers
        ,):
    result = _callApi(_lib.vkFreeCommandBuffers, device,commandPool,commandBufferCount,pCommandBuffers)


def vkBeginCommandBuffer(commandBuffer
        ,pBeginInfo
        ,):
    result = _callApi(_lib.vkBeginCommandBuffer, commandBuffer,pBeginInfo)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkEndCommandBuffer(commandBuffer
        ,):
    result = _callApi(_lib.vkEndCommandBuffer, commandBuffer)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkResetCommandBuffer(commandBuffer
        ,flags
        ,):
    result = _callApi(_lib.vkResetCommandBuffer, commandBuffer,flags)
    if result != VK_SUCCESS:
        raise _exception_codes[result]


def vkCmdBindPipeline(commandBuffer
        ,pipelineBindPoint
        ,pipeline
        ,):
    result = _callApi(_lib.vkCmdBindPipeline, commandBuffer,pipelineBindPoint,pipeline)


def vkCmdSetViewport(commandBuffer
        ,firstViewport
        ,viewportCount
        ,pViewports
        ,):
    result = _callApi(_lib.vkCmdSetViewport, commandBuffer,firstViewport,viewportCount,pViewports)


def vkCmdSetScissor(commandBuffer
        ,firstScissor
        ,scissorCount
        ,pScissors
        ,):
    result = _callApi(_lib.vkCmdSetScissor, commandBuffer,firstScissor,scissorCount,pScissors)


def vkCmdSetLineWidth(commandBuffer
        ,lineWidth
        ,):
    result = _callApi(_lib.vkCmdSetLineWidth, commandBuffer,lineWidth)


def vkCmdSetDepthBias(commandBuffer
        ,depthBiasConstantFactor
        ,depthBiasClamp
        ,depthBiasSlopeFactor
        ,):
    result = _callApi(_lib.vkCmdSetDepthBias, commandBuffer,depthBiasConstantFactor,depthBiasClamp,depthBiasSlopeFactor)


def vkCmdSetBlendConstants(commandBuffer
        ,blendConstants
        ,):
    result = _callApi(_lib.vkCmdSetBlendConstants, commandBuffer,blendConstants)


def vkCmdSetDepthBounds(commandBuffer
        ,minDepthBounds
        ,maxDepthBounds
        ,):
    result = _callApi(_lib.vkCmdSetDepthBounds, commandBuffer,minDepthBounds,maxDepthBounds)


def vkCmdSetStencilCompareMask(commandBuffer
        ,faceMask
        ,compareMask
        ,):
    result = _callApi(_lib.vkCmdSetStencilCompareMask, commandBuffer,faceMask,compareMask)


def vkCmdSetStencilWriteMask(commandBuffer
        ,faceMask
        ,writeMask
        ,):
    result = _callApi(_lib.vkCmdSetStencilWriteMask, commandBuffer,faceMask,writeMask)


def vkCmdSetStencilReference(commandBuffer
        ,faceMask
        ,reference
        ,):
    result = _callApi(_lib.vkCmdSetStencilReference, commandBuffer,faceMask,reference)


def vkCmdBindDescriptorSets(commandBuffer
        ,pipelineBindPoint
        ,layout
        ,firstSet
        ,descriptorSetCount
        ,pDescriptorSets
        ,dynamicOffsetCount
        ,pDynamicOffsets
        ,):
    result = _callApi(_lib.vkCmdBindDescriptorSets, commandBuffer,pipelineBindPoint,layout,firstSet,descriptorSetCount,pDescriptorSets,dynamicOffsetCount,pDynamicOffsets)


def vkCmdBindIndexBuffer(commandBuffer
        ,buffer
        ,offset
        ,indexType
        ,):
    result = _callApi(_lib.vkCmdBindIndexBuffer, commandBuffer,buffer,offset,indexType)


def vkCmdBindVertexBuffers(commandBuffer
        ,firstBinding
        ,bindingCount
        ,pBuffers
        ,pOffsets
        ,):
    result = _callApi(_lib.vkCmdBindVertexBuffers, commandBuffer,firstBinding,bindingCount,pBuffers,pOffsets)


def vkCmdDraw(commandBuffer
        ,vertexCount
        ,instanceCount
        ,firstVertex
        ,firstInstance
        ,):
    result = _callApi(_lib.vkCmdDraw, commandBuffer,vertexCount,instanceCount,firstVertex,firstInstance)


def vkCmdDrawIndexed(commandBuffer
        ,indexCount
        ,instanceCount
        ,firstIndex
        ,vertexOffset
        ,firstInstance
        ,):
    result = _callApi(_lib.vkCmdDrawIndexed, commandBuffer,indexCount,instanceCount,firstIndex,vertexOffset,firstInstance)


def vkCmdDrawIndirect(commandBuffer
        ,buffer
        ,offset
        ,drawCount
        ,stride
        ,):
    result = _callApi(_lib.vkCmdDrawIndirect, commandBuffer,buffer,offset,drawCount,stride)


def vkCmdDrawIndexedIndirect(commandBuffer
        ,buffer
        ,offset
        ,drawCount
        ,stride
        ,):
    result = _callApi(_lib.vkCmdDrawIndexedIndirect, commandBuffer,buffer,offset,drawCount,stride)


def vkCmdDispatch(commandBuffer
        ,groupCountX
        ,groupCountY
        ,groupCountZ
        ,):
    result = _callApi(_lib.vkCmdDispatch, commandBuffer,groupCountX,groupCountY,groupCountZ)


def vkCmdDispatchIndirect(commandBuffer
        ,buffer
        ,offset
        ,):
    result = _callApi(_lib.vkCmdDispatchIndirect, commandBuffer,buffer,offset)


def vkCmdCopyBuffer(commandBuffer
        ,srcBuffer
        ,dstBuffer
        ,regionCount
        ,pRegions
        ,):
    result = _callApi(_lib.vkCmdCopyBuffer, commandBuffer,srcBuffer,dstBuffer,regionCount,pRegions)


def vkCmdCopyImage(commandBuffer
        ,srcImage
        ,srcImageLayout
        ,dstImage
        ,dstImageLayout
        ,regionCount
        ,pRegions
        ,):
    result = _callApi(_lib.vkCmdCopyImage, commandBuffer,srcImage,srcImageLayout,dstImage,dstImageLayout,regionCount,pRegions)


def vkCmdBlitImage(commandBuffer
        ,srcImage
        ,srcImageLayout
        ,dstImage
        ,dstImageLayout
        ,regionCount
        ,pRegions
        ,filter
        ,):
    result = _callApi(_lib.vkCmdBlitImage, commandBuffer,srcImage,srcImageLayout,dstImage,dstImageLayout,regionCount,pRegions,filter)


def vkCmdCopyBufferToImage(commandBuffer
        ,srcBuffer
        ,dstImage
        ,dstImageLayout
        ,regionCount
        ,pRegions
        ,):
    result = _callApi(_lib.vkCmdCopyBufferToImage, commandBuffer,srcBuffer,dstImage,dstImageLayout,regionCount,pRegions)


def vkCmdCopyImageToBuffer(commandBuffer
        ,srcImage
        ,srcImageLayout
        ,dstBuffer
        ,regionCount
        ,pRegions
        ,):
    result = _callApi(_lib.vkCmdCopyImageToBuffer, commandBuffer,srcImage,srcImageLayout,dstBuffer,regionCount,pRegions)


def vkCmdUpdateBuffer(commandBuffer
        ,dstBuffer
        ,dstOffset
        ,dataSize
        ,pData
        ,):
    result = _callApi(_lib.vkCmdUpdateBuffer, commandBuffer,dstBuffer,dstOffset,dataSize,pData)


def vkCmdFillBuffer(commandBuffer
        ,dstBuffer
        ,dstOffset
        ,size
        ,data
        ,):
    result = _callApi(_lib.vkCmdFillBuffer, commandBuffer,dstBuffer,dstOffset,size,data)


def vkCmdClearColorImage(commandBuffer
        ,image
        ,imageLayout
        ,pColor
        ,rangeCount
        ,pRanges
        ,):
    result = _callApi(_lib.vkCmdClearColorImage, commandBuffer,image,imageLayout,pColor,rangeCount,pRanges)


def vkCmdClearDepthStencilImage(commandBuffer
        ,image
        ,imageLayout
        ,pDepthStencil
        ,rangeCount
        ,pRanges
        ,):
    result = _callApi(_lib.vkCmdClearDepthStencilImage, commandBuffer,image,imageLayout,pDepthStencil,rangeCount,pRanges)


def vkCmdClearAttachments(commandBuffer
        ,attachmentCount
        ,pAttachments
        ,rectCount
        ,pRects
        ,):
    result = _callApi(_lib.vkCmdClearAttachments, commandBuffer,attachmentCount,pAttachments,rectCount,pRects)


def vkCmdResolveImage(commandBuffer
        ,srcImage
        ,srcImageLayout
        ,dstImage
        ,dstImageLayout
        ,regionCount
        ,pRegions
        ,):
    result = _callApi(_lib.vkCmdResolveImage, commandBuffer,srcImage,srcImageLayout,dstImage,dstImageLayout,regionCount,pRegions)


def vkCmdSetEvent(commandBuffer
        ,event
        ,stageMask
        ,):
    result = _callApi(_lib.vkCmdSetEvent, commandBuffer,event,stageMask)


def vkCmdResetEvent(commandBuffer
        ,event
        ,stageMask
        ,):
    result = _callApi(_lib.vkCmdResetEvent, commandBuffer,event,stageMask)


def vkCmdWaitEvents(commandBuffer
        ,eventCount
        ,pEvents
        ,srcStageMask
        ,dstStageMask
        ,memoryBarrierCount
        ,pMemoryBarriers
        ,bufferMemoryBarrierCount
        ,pBufferMemoryBarriers
        ,imageMemoryBarrierCount
        ,pImageMemoryBarriers
        ,):
    result = _callApi(_lib.vkCmdWaitEvents, commandBuffer,eventCount,pEvents,srcStageMask,dstStageMask,memoryBarrierCount,pMemoryBarriers,bufferMemoryBarrierCount,pBufferMemoryBarriers,imageMemoryBarrierCount,pImageMemoryBarriers)


def vkCmdPipelineBarrier(commandBuffer
        ,srcStageMask
        ,dstStageMask
        ,dependencyFlags
        ,memoryBarrierCount
        ,pMemoryBarriers
        ,bufferMemoryBarrierCount
        ,pBufferMemoryBarriers
        ,imageMemoryBarrierCount
        ,pImageMemoryBarriers
        ,):
    result = _callApi(_lib.vkCmdPipelineBarrier, commandBuffer,srcStageMask,dstStageMask,dependencyFlags,memoryBarrierCount,pMemoryBarriers,bufferMemoryBarrierCount,pBufferMemoryBarriers,imageMemoryBarrierCount,pImageMemoryBarriers)


def vkCmdBeginQuery(commandBuffer
        ,queryPool
        ,query
        ,flags
        ,):
    result = _callApi(_lib.vkCmdBeginQuery, commandBuffer,queryPool,query,flags)


def vkCmdEndQuery(commandBuffer
        ,queryPool
        ,query
        ,):
    result = _callApi(_lib.vkCmdEndQuery, commandBuffer,queryPool,query)


def vkCmdResetQueryPool(commandBuffer
        ,queryPool
        ,firstQuery
        ,queryCount
        ,):
    result = _callApi(_lib.vkCmdResetQueryPool, commandBuffer,queryPool,firstQuery,queryCount)


def vkCmdWriteTimestamp(commandBuffer
        ,pipelineStage
        ,queryPool
        ,query
        ,):
    result = _callApi(_lib.vkCmdWriteTimestamp, commandBuffer,pipelineStage,queryPool,query)


def vkCmdCopyQueryPoolResults(commandBuffer
        ,queryPool
        ,firstQuery
        ,queryCount
        ,dstBuffer
        ,dstOffset
        ,stride
        ,flags
        ,):
    result = _callApi(_lib.vkCmdCopyQueryPoolResults, commandBuffer,queryPool,firstQuery,queryCount,dstBuffer,dstOffset,stride,flags)


def vkCmdPushConstants(commandBuffer
        ,layout
        ,stageFlags
        ,offset
        ,size
        ,pValues
        ,):
    result = _callApi(_lib.vkCmdPushConstants, commandBuffer,layout,stageFlags,offset,size,pValues)


def vkCmdBeginRenderPass(commandBuffer
        ,pRenderPassBegin
        ,contents
        ,):
    result = _callApi(_lib.vkCmdBeginRenderPass, commandBuffer,pRenderPassBegin,contents)


def vkCmdNextSubpass(commandBuffer
        ,contents
        ,):
    result = _callApi(_lib.vkCmdNextSubpass, commandBuffer,contents)


def vkCmdEndRenderPass(commandBuffer
        ,):
    result = _callApi(_lib.vkCmdEndRenderPass, commandBuffer)


def vkCmdExecuteCommands(commandBuffer
        ,commandBufferCount
        ,pCommandBuffers
        ,):
    result = _callApi(_lib.vkCmdExecuteCommands, commandBuffer,commandBufferCount,pCommandBuffers)


def _wrap_vkCreateAndroidSurfaceKHR(fn):
    def vkCreateAndroidSurfaceKHR(instance
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pSurface = ffi.new('VkSurfaceKHR*')
    
        result = _callApi(fn, instance,pCreateInfo,pAllocator,pSurface)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurface[0]
    
    
    return vkCreateAndroidSurfaceKHR
def _wrap_vkGetPhysicalDeviceDisplayPropertiesKHR(fn):
    def vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice
            ,):
    
        pPropertyCount = ffi.new('uint32_t*')
        pProperties = ffi.NULL
    
        result = _callApi(fn, physicalDevice,pPropertyCount,pProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        pProperties = ffi.new('VkDisplayPropertiesKHR[]', pPropertyCount[0])
        result = _callApi(fn, physicalDevice,pPropertyCount,pProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        result = (_StrWrap(x) for x in pProperties)
        _weakkey_dict[result] = pProperties
        return result
    
    return vkGetPhysicalDeviceDisplayPropertiesKHR
def _wrap_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(fn):
    def vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice
            ,):
    
        pPropertyCount = ffi.new('uint32_t*')
        pProperties = ffi.NULL
    
        result = _callApi(fn, physicalDevice,pPropertyCount,pProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        pProperties = ffi.new('VkDisplayPlanePropertiesKHR[]', pPropertyCount[0])
        result = _callApi(fn, physicalDevice,pPropertyCount,pProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pProperties
    
    return vkGetPhysicalDeviceDisplayPlanePropertiesKHR
def _wrap_vkGetDisplayPlaneSupportedDisplaysKHR(fn):
    def vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice
            ,planeIndex
            ,):
    
        pDisplayCount = ffi.new('uint32_t*')
        pDisplays = ffi.NULL
    
        result = _callApi(fn, physicalDevice,planeIndex,pDisplayCount,pDisplays)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        pDisplays = ffi.new('VkDisplayKHR[]', pDisplayCount[0])
        result = _callApi(fn, physicalDevice,planeIndex,pDisplayCount,pDisplays)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pDisplays
    
    return vkGetDisplayPlaneSupportedDisplaysKHR
def _wrap_vkGetDisplayModePropertiesKHR(fn):
    def vkGetDisplayModePropertiesKHR(physicalDevice
            ,display
            ,):
    
        pPropertyCount = ffi.new('uint32_t*')
        pProperties = ffi.NULL
    
        result = _callApi(fn, physicalDevice,display,pPropertyCount,pProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        pProperties = ffi.new('VkDisplayModePropertiesKHR[]', pPropertyCount[0])
        result = _callApi(fn, physicalDevice,display,pPropertyCount,pProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pProperties
    
    return vkGetDisplayModePropertiesKHR
def _wrap_vkCreateDisplayModeKHR(fn):
    def vkCreateDisplayModeKHR(physicalDevice
            ,display
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pMode = ffi.new('VkDisplayModeKHR*')
    
        result = _callApi(fn, physicalDevice,display,pCreateInfo,pAllocator,pMode)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pMode[0]
    
    
    return vkCreateDisplayModeKHR
def _wrap_vkGetDisplayPlaneCapabilitiesKHR(fn):
    def vkGetDisplayPlaneCapabilitiesKHR(physicalDevice
            ,mode
            ,planeIndex
            ,):
    
        pCapabilities = ffi.new('VkDisplayPlaneCapabilitiesKHR*')
    
        result = _callApi(fn, physicalDevice,mode,planeIndex,pCapabilities)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pCapabilities[0]
    
    
    return vkGetDisplayPlaneCapabilitiesKHR
def _wrap_vkCreateDisplayPlaneSurfaceKHR(fn):
    def vkCreateDisplayPlaneSurfaceKHR(instance
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pSurface = ffi.new('VkSurfaceKHR*')
    
        result = _callApi(fn, instance,pCreateInfo,pAllocator,pSurface)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurface[0]
    
    
    return vkCreateDisplayPlaneSurfaceKHR
def _wrap_vkCreateSharedSwapchainsKHR(fn):
    def vkCreateSharedSwapchainsKHR(device
            ,swapchainCount
            ,pCreateInfos
            ,pAllocator
            ,):
    
        pSwapchains = ffi.new('VkSwapchainKHR*')
    
        result = _callApi(fn, device,swapchainCount,pCreateInfos,pAllocator,pSwapchains)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSwapchains[0]
    
    
    return vkCreateSharedSwapchainsKHR
def _wrap_vkCreateMirSurfaceKHR(fn):
    def vkCreateMirSurfaceKHR(instance
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pSurface = ffi.new('VkSurfaceKHR*')
    
        result = _callApi(fn, instance,pCreateInfo,pAllocator,pSurface)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurface[0]
    
    
    return vkCreateMirSurfaceKHR
def _wrap_vkGetPhysicalDeviceMirPresentationSupportKHR(fn):
    def vkGetPhysicalDeviceMirPresentationSupportKHR(physicalDevice
            ,queueFamilyIndex
            ,connection
            ,):
        result = _callApi(fn, physicalDevice,queueFamilyIndex,connection)
    
    return vkGetPhysicalDeviceMirPresentationSupportKHR
def _wrap_vkDestroySurfaceKHR(fn):
    def vkDestroySurfaceKHR(instance
            ,surface
            ,pAllocator
            ,):
        result = _callApi(fn, instance,surface,pAllocator)
    
    return vkDestroySurfaceKHR
def _wrap_vkGetPhysicalDeviceSurfaceSupportKHR(fn):
    def vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice
            ,queueFamilyIndex
            ,surface
            ,):
    
        pSupported = ffi.new('VkBool32*')
    
        result = _callApi(fn, physicalDevice,queueFamilyIndex,surface,pSupported)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSupported[0]
    
    
    return vkGetPhysicalDeviceSurfaceSupportKHR
def _wrap_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(fn):
    def vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice
            ,surface
            ,):
    
        pSurfaceCapabilities = ffi.new('VkSurfaceCapabilitiesKHR*')
    
        result = _callApi(fn, physicalDevice,surface,pSurfaceCapabilities)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurfaceCapabilities[0]
    
    
    return vkGetPhysicalDeviceSurfaceCapabilitiesKHR
def _wrap_vkGetPhysicalDeviceSurfaceFormatsKHR(fn):
    def vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice
            ,surface
            ,):
    
        pSurfaceFormatCount = ffi.new('uint32_t*')
        pSurfaceFormats = ffi.NULL
    
        result = _callApi(fn, physicalDevice,surface,pSurfaceFormatCount,pSurfaceFormats)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        pSurfaceFormats = ffi.new('VkSurfaceFormatKHR[]', pSurfaceFormatCount[0])
        result = _callApi(fn, physicalDevice,surface,pSurfaceFormatCount,pSurfaceFormats)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurfaceFormats
    
    return vkGetPhysicalDeviceSurfaceFormatsKHR
def _wrap_vkGetPhysicalDeviceSurfacePresentModesKHR(fn):
    def vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice
            ,surface
            ,):
    
        pPresentModeCount = ffi.new('uint32_t*')
        pPresentModes = ffi.NULL
    
        result = _callApi(fn, physicalDevice,surface,pPresentModeCount,pPresentModes)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        pPresentModes = ffi.new('VkPresentModeKHR[]', pPresentModeCount[0])
        result = _callApi(fn, physicalDevice,surface,pPresentModeCount,pPresentModes)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pPresentModes
    
    return vkGetPhysicalDeviceSurfacePresentModesKHR
def _wrap_vkCreateSwapchainKHR(fn):
    def vkCreateSwapchainKHR(device
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pSwapchain = ffi.new('VkSwapchainKHR*')
    
        result = _callApi(fn, device,pCreateInfo,pAllocator,pSwapchain)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSwapchain[0]
    
    
    return vkCreateSwapchainKHR
def _wrap_vkDestroySwapchainKHR(fn):
    def vkDestroySwapchainKHR(device
            ,swapchain
            ,pAllocator
            ,):
        result = _callApi(fn, device,swapchain,pAllocator)
    
    return vkDestroySwapchainKHR
def _wrap_vkGetSwapchainImagesKHR(fn):
    def vkGetSwapchainImagesKHR(device
            ,swapchain
            ,):
    
        pSwapchainImageCount = ffi.new('uint32_t*')
        pSwapchainImages = ffi.NULL
    
        result = _callApi(fn, device,swapchain,pSwapchainImageCount,pSwapchainImages)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        pSwapchainImages = ffi.new('VkImage[]', pSwapchainImageCount[0])
        result = _callApi(fn, device,swapchain,pSwapchainImageCount,pSwapchainImages)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSwapchainImages
    
    return vkGetSwapchainImagesKHR
def _wrap_vkAcquireNextImageKHR(fn):
    def vkAcquireNextImageKHR(device
            ,swapchain
            ,timeout
            ,semaphore
            ,fence
            ,):
    
        pImageIndex = ffi.new('uint32_t*')
    
        result = _callApi(fn, device,swapchain,timeout,semaphore,fence,pImageIndex)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pImageIndex[0]
    
    
    return vkAcquireNextImageKHR
def _wrap_vkQueuePresentKHR(fn):
    def vkQueuePresentKHR(queue
            ,pPresentInfo
            ,):
        result = _callApi(fn, queue,pPresentInfo)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkQueuePresentKHR
def _wrap_vkCreateViSurfaceNN(fn):
    def vkCreateViSurfaceNN(instance
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pSurface = ffi.new('VkSurfaceKHR*')
    
        result = _callApi(fn, instance,pCreateInfo,pAllocator,pSurface)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurface[0]
    
    
    return vkCreateViSurfaceNN
def _wrap_vkCreateWaylandSurfaceKHR(fn):
    def vkCreateWaylandSurfaceKHR(instance
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pSurface = ffi.new('VkSurfaceKHR*')
    
        result = _callApi(fn, instance,pCreateInfo,pAllocator,pSurface)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurface[0]
    
    
    return vkCreateWaylandSurfaceKHR
def _wrap_vkGetPhysicalDeviceWaylandPresentationSupportKHR(fn):
    def vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice
            ,queueFamilyIndex
            ,display
            ,):
        result = _callApi(fn, physicalDevice,queueFamilyIndex,display)
    
    return vkGetPhysicalDeviceWaylandPresentationSupportKHR
def _wrap_vkCreateWin32SurfaceKHR(fn):
    def vkCreateWin32SurfaceKHR(instance
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pSurface = ffi.new('VkSurfaceKHR*')
    
        result = _callApi(fn, instance,pCreateInfo,pAllocator,pSurface)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurface[0]
    
    
    return vkCreateWin32SurfaceKHR
def _wrap_vkGetPhysicalDeviceWin32PresentationSupportKHR(fn):
    def vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice
            ,queueFamilyIndex
            ,):
        result = _callApi(fn, physicalDevice,queueFamilyIndex)
    
    return vkGetPhysicalDeviceWin32PresentationSupportKHR
def _wrap_vkCreateXlibSurfaceKHR(fn):
    def vkCreateXlibSurfaceKHR(instance
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pSurface = ffi.new('VkSurfaceKHR*')
    
        result = _callApi(fn, instance,pCreateInfo,pAllocator,pSurface)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurface[0]
    
    
    return vkCreateXlibSurfaceKHR
def _wrap_vkGetPhysicalDeviceXlibPresentationSupportKHR(fn):
    def vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice
            ,queueFamilyIndex
            ,dpy
            ,visualID
            ,):
        result = _callApi(fn, physicalDevice,queueFamilyIndex,dpy,visualID)
    
    return vkGetPhysicalDeviceXlibPresentationSupportKHR
def _wrap_vkCreateXcbSurfaceKHR(fn):
    def vkCreateXcbSurfaceKHR(instance
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pSurface = ffi.new('VkSurfaceKHR*')
    
        result = _callApi(fn, instance,pCreateInfo,pAllocator,pSurface)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurface[0]
    
    
    return vkCreateXcbSurfaceKHR
def _wrap_vkGetPhysicalDeviceXcbPresentationSupportKHR(fn):
    def vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice
            ,queueFamilyIndex
            ,connection
            ,visual_id
            ,):
        result = _callApi(fn, physicalDevice,queueFamilyIndex,connection,visual_id)
    
    return vkGetPhysicalDeviceXcbPresentationSupportKHR
def _wrap_vkCreateDebugReportCallbackEXT(fn):
    def vkCreateDebugReportCallbackEXT(instance
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pCallback = ffi.new('VkDebugReportCallbackEXT*')
    
        result = _callApi(fn, instance,pCreateInfo,pAllocator,pCallback)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pCallback[0]
    
    
    return vkCreateDebugReportCallbackEXT
def _wrap_vkDestroyDebugReportCallbackEXT(fn):
    def vkDestroyDebugReportCallbackEXT(instance
            ,callback
            ,pAllocator
            ,):
        result = _callApi(fn, instance,callback,pAllocator)
    
    return vkDestroyDebugReportCallbackEXT
def _wrap_vkDebugReportMessageEXT(fn):
    def vkDebugReportMessageEXT(instance
            ,flags
            ,objectType
            ,object
            ,location
            ,messageCode
            ,pLayerPrefix
            ,pMessage
            ,):
        result = _callApi(fn, instance,flags,objectType,object,location,messageCode,pLayerPrefix,pMessage)
    
    return vkDebugReportMessageEXT
def _wrap_vkDebugMarkerSetObjectNameEXT(fn):
    def vkDebugMarkerSetObjectNameEXT(device
            ,pNameInfo
            ,):
        result = _callApi(fn, device,pNameInfo)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkDebugMarkerSetObjectNameEXT
def _wrap_vkDebugMarkerSetObjectTagEXT(fn):
    def vkDebugMarkerSetObjectTagEXT(device
            ,pTagInfo
            ,):
        result = _callApi(fn, device,pTagInfo)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkDebugMarkerSetObjectTagEXT
def _wrap_vkCmdDebugMarkerBeginEXT(fn):
    def vkCmdDebugMarkerBeginEXT(commandBuffer
            ,pMarkerInfo
            ,):
        result = _callApi(fn, commandBuffer,pMarkerInfo)
    
    return vkCmdDebugMarkerBeginEXT
def _wrap_vkCmdDebugMarkerEndEXT(fn):
    def vkCmdDebugMarkerEndEXT(commandBuffer
            ,):
        result = _callApi(fn, commandBuffer)
    
    return vkCmdDebugMarkerEndEXT
def _wrap_vkCmdDebugMarkerInsertEXT(fn):
    def vkCmdDebugMarkerInsertEXT(commandBuffer
            ,pMarkerInfo
            ,):
        result = _callApi(fn, commandBuffer,pMarkerInfo)
    
    return vkCmdDebugMarkerInsertEXT
def _wrap_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(fn):
    def vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice
            ,format
            ,type
            ,tiling
            ,usage
            ,flags
            ,externalHandleType
            ,):
    
        pExternalImageFormatProperties = ffi.new('VkExternalImageFormatPropertiesNV*')
    
        result = _callApi(fn, physicalDevice,format,type,tiling,usage,flags,externalHandleType,pExternalImageFormatProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pExternalImageFormatProperties[0]
    
    
    return vkGetPhysicalDeviceExternalImageFormatPropertiesNV
def _wrap_vkGetMemoryWin32HandleNV(fn):
    def vkGetMemoryWin32HandleNV(device
            ,memory
            ,handleType
            ,):
    
        pHandle = ffi.new('HANDLE*')
    
        result = _callApi(fn, device,memory,handleType,pHandle)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pHandle[0]
    
    
    return vkGetMemoryWin32HandleNV
def _wrap_vkCmdDrawIndirectCountAMD(fn):
    def vkCmdDrawIndirectCountAMD(commandBuffer
            ,buffer
            ,offset
            ,countBuffer
            ,countBufferOffset
            ,maxDrawCount
            ,stride
            ,):
        result = _callApi(fn, commandBuffer,buffer,offset,countBuffer,countBufferOffset,maxDrawCount,stride)
    
    return vkCmdDrawIndirectCountAMD
def _wrap_vkCmdDrawIndexedIndirectCountAMD(fn):
    def vkCmdDrawIndexedIndirectCountAMD(commandBuffer
            ,buffer
            ,offset
            ,countBuffer
            ,countBufferOffset
            ,maxDrawCount
            ,stride
            ,):
        result = _callApi(fn, commandBuffer,buffer,offset,countBuffer,countBufferOffset,maxDrawCount,stride)
    
    return vkCmdDrawIndexedIndirectCountAMD
def _wrap_vkCmdProcessCommandsNVX(fn):
    def vkCmdProcessCommandsNVX(commandBuffer
            ,pProcessCommandsInfo
            ,):
        result = _callApi(fn, commandBuffer,pProcessCommandsInfo)
    
    return vkCmdProcessCommandsNVX
def _wrap_vkCmdReserveSpaceForCommandsNVX(fn):
    def vkCmdReserveSpaceForCommandsNVX(commandBuffer
            ,pReserveSpaceInfo
            ,):
        result = _callApi(fn, commandBuffer,pReserveSpaceInfo)
    
    return vkCmdReserveSpaceForCommandsNVX
def _wrap_vkCreateIndirectCommandsLayoutNVX(fn):
    def vkCreateIndirectCommandsLayoutNVX(device
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pIndirectCommandsLayout = ffi.new('VkIndirectCommandsLayoutNVX*')
    
        result = _callApi(fn, device,pCreateInfo,pAllocator,pIndirectCommandsLayout)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pIndirectCommandsLayout[0]
    
    
    return vkCreateIndirectCommandsLayoutNVX
def _wrap_vkDestroyIndirectCommandsLayoutNVX(fn):
    def vkDestroyIndirectCommandsLayoutNVX(device
            ,indirectCommandsLayout
            ,pAllocator
            ,):
        result = _callApi(fn, device,indirectCommandsLayout,pAllocator)
    
    return vkDestroyIndirectCommandsLayoutNVX
def _wrap_vkCreateObjectTableNVX(fn):
    def vkCreateObjectTableNVX(device
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pObjectTable = ffi.new('VkObjectTableNVX*')
    
        result = _callApi(fn, device,pCreateInfo,pAllocator,pObjectTable)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pObjectTable[0]
    
    
    return vkCreateObjectTableNVX
def _wrap_vkDestroyObjectTableNVX(fn):
    def vkDestroyObjectTableNVX(device
            ,objectTable
            ,pAllocator
            ,):
        result = _callApi(fn, device,objectTable,pAllocator)
    
    return vkDestroyObjectTableNVX
def _wrap_vkRegisterObjectsNVX(fn):
    def vkRegisterObjectsNVX(device
            ,objectTable
            ,objectCount
            ,ppObjectTableEntries
            ,pObjectIndices
            ,):
        result = _callApi(fn, device,objectTable,objectCount,ppObjectTableEntries,pObjectIndices)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkRegisterObjectsNVX
def _wrap_vkUnregisterObjectsNVX(fn):
    def vkUnregisterObjectsNVX(device
            ,objectTable
            ,objectCount
            ,pObjectEntryTypes
            ,pObjectIndices
            ,):
        result = _callApi(fn, device,objectTable,objectCount,pObjectEntryTypes,pObjectIndices)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkUnregisterObjectsNVX
def _wrap_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(fn):
    def vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(physicalDevice
            ,pFeatures
            ,):
    
        pLimits = ffi.new('VkDeviceGeneratedCommandsLimitsNVX*')
    
        result = _callApi(fn, physicalDevice,pFeatures,pLimits)
    
        return pLimits[0]
    
    
    return vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX
def _wrap_vkGetPhysicalDeviceFeatures2KHR(fn):
    def vkGetPhysicalDeviceFeatures2KHR(physicalDevice
            ,):
    
        pFeatures = ffi.new('VkPhysicalDeviceFeatures2KHR*')
    
        result = _callApi(fn, physicalDevice,pFeatures)
    
        return pFeatures[0]
    
    
    return vkGetPhysicalDeviceFeatures2KHR
def _wrap_vkGetPhysicalDeviceProperties2KHR(fn):
    def vkGetPhysicalDeviceProperties2KHR(physicalDevice
            ,):
    
        pProperties = ffi.new('VkPhysicalDeviceProperties2KHR*')
    
        result = _callApi(fn, physicalDevice,pProperties)
    
        return pProperties[0]
    
    
    return vkGetPhysicalDeviceProperties2KHR
def _wrap_vkGetPhysicalDeviceFormatProperties2KHR(fn):
    def vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice
            ,format
            ,):
    
        pFormatProperties = ffi.new('VkFormatProperties2KHR*')
    
        result = _callApi(fn, physicalDevice,format,pFormatProperties)
    
        return pFormatProperties[0]
    
    
    return vkGetPhysicalDeviceFormatProperties2KHR
def _wrap_vkGetPhysicalDeviceImageFormatProperties2KHR(fn):
    def vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice
            ,pImageFormatInfo
            ,):
    
        pImageFormatProperties = ffi.new('VkImageFormatProperties2KHR*')
    
        result = _callApi(fn, physicalDevice,pImageFormatInfo,pImageFormatProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pImageFormatProperties[0]
    
    
    return vkGetPhysicalDeviceImageFormatProperties2KHR
def _wrap_vkGetPhysicalDeviceQueueFamilyProperties2KHR(fn):
    def vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice
            ,):
    
        pQueueFamilyPropertyCount = ffi.new('uint32_t*')
        pQueueFamilyProperties = ffi.NULL
    
        result = _callApi(fn, physicalDevice,pQueueFamilyPropertyCount,pQueueFamilyProperties)
    
        pQueueFamilyProperties = ffi.new('VkQueueFamilyProperties2KHR[]', pQueueFamilyPropertyCount[0])
        result = _callApi(fn, physicalDevice,pQueueFamilyPropertyCount,pQueueFamilyProperties)
    
        return pQueueFamilyProperties
    
    return vkGetPhysicalDeviceQueueFamilyProperties2KHR
def _wrap_vkGetPhysicalDeviceMemoryProperties2KHR(fn):
    def vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice
            ,):
    
        pMemoryProperties = ffi.new('VkPhysicalDeviceMemoryProperties2KHR*')
    
        result = _callApi(fn, physicalDevice,pMemoryProperties)
    
        return pMemoryProperties[0]
    
    
    return vkGetPhysicalDeviceMemoryProperties2KHR
def _wrap_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(fn):
    def vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice
            ,pFormatInfo
            ,):
    
        pPropertyCount = ffi.new('uint32_t*')
        pProperties = ffi.NULL
    
        result = _callApi(fn, physicalDevice,pFormatInfo,pPropertyCount,pProperties)
    
        pProperties = ffi.new('VkSparseImageFormatProperties2KHR[]', pPropertyCount[0])
        result = _callApi(fn, physicalDevice,pFormatInfo,pPropertyCount,pProperties)
    
        return pProperties
    
    return vkGetPhysicalDeviceSparseImageFormatProperties2KHR
def _wrap_vkCmdPushDescriptorSetKHR(fn):
    def vkCmdPushDescriptorSetKHR(commandBuffer
            ,pipelineBindPoint
            ,layout
            ,set
            ,descriptorWriteCount
            ,pDescriptorWrites
            ,):
        result = _callApi(fn, commandBuffer,pipelineBindPoint,layout,set,descriptorWriteCount,pDescriptorWrites)
    
    return vkCmdPushDescriptorSetKHR
def _wrap_vkTrimCommandPoolKHR(fn):
    def vkTrimCommandPoolKHR(device
            ,commandPool
            ,flags
            ,):
        result = _callApi(fn, device,commandPool,flags)
    
    return vkTrimCommandPoolKHR
def _wrap_vkGetPhysicalDeviceExternalBufferPropertiesKHX(fn):
    def vkGetPhysicalDeviceExternalBufferPropertiesKHX(physicalDevice
            ,pExternalBufferInfo
            ,):
    
        pExternalBufferProperties = ffi.new('VkExternalBufferPropertiesKHX*')
    
        result = _callApi(fn, physicalDevice,pExternalBufferInfo,pExternalBufferProperties)
    
        return pExternalBufferProperties[0]
    
    
    return vkGetPhysicalDeviceExternalBufferPropertiesKHX
def _wrap_vkGetMemoryWin32HandleKHX(fn):
    def vkGetMemoryWin32HandleKHX(device
            ,memory
            ,handleType
            ,):
    
        pHandle = ffi.new('HANDLE*')
    
        result = _callApi(fn, device,memory,handleType,pHandle)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pHandle[0]
    
    
    return vkGetMemoryWin32HandleKHX
def _wrap_vkGetMemoryWin32HandlePropertiesKHX(fn):
    def vkGetMemoryWin32HandlePropertiesKHX(device
            ,handleType
            ,handle
            ,):
    
        pMemoryWin32HandleProperties = ffi.new('VkMemoryWin32HandlePropertiesKHX*')
    
        result = _callApi(fn, device,handleType,handle,pMemoryWin32HandleProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pMemoryWin32HandleProperties[0]
    
    
    return vkGetMemoryWin32HandlePropertiesKHX
def _wrap_vkGetMemoryFdKHX(fn):
    def vkGetMemoryFdKHX(device
            ,memory
            ,handleType
            ,):
    
        pFd = ffi.new('int*')
    
        result = _callApi(fn, device,memory,handleType,pFd)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pFd[0]
    
    
    return vkGetMemoryFdKHX
def _wrap_vkGetMemoryFdPropertiesKHX(fn):
    def vkGetMemoryFdPropertiesKHX(device
            ,handleType
            ,fd
            ,):
    
        pMemoryFdProperties = ffi.new('VkMemoryFdPropertiesKHX*')
    
        result = _callApi(fn, device,handleType,fd,pMemoryFdProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pMemoryFdProperties[0]
    
    
    return vkGetMemoryFdPropertiesKHX
def _wrap_vkGetPhysicalDeviceExternalSemaphorePropertiesKHX(fn):
    def vkGetPhysicalDeviceExternalSemaphorePropertiesKHX(physicalDevice
            ,pExternalSemaphoreInfo
            ,):
    
        pExternalSemaphoreProperties = ffi.new('VkExternalSemaphorePropertiesKHX*')
    
        result = _callApi(fn, physicalDevice,pExternalSemaphoreInfo,pExternalSemaphoreProperties)
    
        return pExternalSemaphoreProperties[0]
    
    
    return vkGetPhysicalDeviceExternalSemaphorePropertiesKHX
def _wrap_vkGetSemaphoreWin32HandleKHX(fn):
    def vkGetSemaphoreWin32HandleKHX(device
            ,semaphore
            ,handleType
            ,):
    
        pHandle = ffi.new('HANDLE*')
    
        result = _callApi(fn, device,semaphore,handleType,pHandle)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pHandle[0]
    
    
    return vkGetSemaphoreWin32HandleKHX
def _wrap_vkImportSemaphoreWin32HandleKHX(fn):
    def vkImportSemaphoreWin32HandleKHX(device
            ,pImportSemaphoreWin32HandleInfo
            ,):
        result = _callApi(fn, device,pImportSemaphoreWin32HandleInfo)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkImportSemaphoreWin32HandleKHX
def _wrap_vkGetSemaphoreFdKHX(fn):
    def vkGetSemaphoreFdKHX(device
            ,semaphore
            ,handleType
            ,):
    
        pFd = ffi.new('int*')
    
        result = _callApi(fn, device,semaphore,handleType,pFd)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pFd[0]
    
    
    return vkGetSemaphoreFdKHX
def _wrap_vkImportSemaphoreFdKHX(fn):
    def vkImportSemaphoreFdKHX(device
            ,pImportSemaphoreFdInfo
            ,):
        result = _callApi(fn, device,pImportSemaphoreFdInfo)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkImportSemaphoreFdKHX
def _wrap_vkReleaseDisplayEXT(fn):
    def vkReleaseDisplayEXT(physicalDevice
            ,display
            ,):
        result = _callApi(fn, physicalDevice,display)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkReleaseDisplayEXT
def _wrap_vkAcquireXlibDisplayEXT(fn):
    def vkAcquireXlibDisplayEXT(physicalDevice
            ,dpy
            ,):
    
        display = ffi.new('VkDisplayKHR*')
    
        result = _callApi(fn, physicalDevice,dpy,display)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return display[0]
    
    
    return vkAcquireXlibDisplayEXT
def _wrap_vkGetRandROutputDisplayEXT(fn):
    def vkGetRandROutputDisplayEXT(physicalDevice
            ,dpy
            ,rrOutput
            ,):
    
        pDisplay = ffi.new('VkDisplayKHR*')
    
        result = _callApi(fn, physicalDevice,dpy,rrOutput,pDisplay)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pDisplay[0]
    
    
    return vkGetRandROutputDisplayEXT
def _wrap_vkDisplayPowerControlEXT(fn):
    def vkDisplayPowerControlEXT(device
            ,display
            ,pDisplayPowerInfo
            ,):
        result = _callApi(fn, device,display,pDisplayPowerInfo)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkDisplayPowerControlEXT
def _wrap_vkRegisterDeviceEventEXT(fn):
    def vkRegisterDeviceEventEXT(device
            ,pDeviceEventInfo
            ,pAllocator
            ,pFence
            ,):
        result = _callApi(fn, device,pDeviceEventInfo,pAllocator,pFence)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkRegisterDeviceEventEXT
def _wrap_vkRegisterDisplayEventEXT(fn):
    def vkRegisterDisplayEventEXT(device
            ,display
            ,pDisplayEventInfo
            ,pAllocator
            ,pFence
            ,):
        result = _callApi(fn, device,display,pDisplayEventInfo,pAllocator,pFence)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkRegisterDisplayEventEXT
def _wrap_vkGetSwapchainCounterEXT(fn):
    def vkGetSwapchainCounterEXT(device
            ,swapchain
            ,counter
            ,):
    
        pCounterValue = ffi.new('uint64_t*')
    
        result = _callApi(fn, device,swapchain,counter,pCounterValue)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pCounterValue[0]
    
    
    return vkGetSwapchainCounterEXT
def _wrap_vkGetPhysicalDeviceSurfaceCapabilities2EXT(fn):
    def vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice
            ,surface
            ,):
    
        pSurfaceCapabilities = ffi.new('VkSurfaceCapabilities2EXT*')
    
        result = _callApi(fn, physicalDevice,surface,pSurfaceCapabilities)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurfaceCapabilities[0]
    
    
    return vkGetPhysicalDeviceSurfaceCapabilities2EXT
def _wrap_vkEnumeratePhysicalDeviceGroupsKHX(fn):
    def vkEnumeratePhysicalDeviceGroupsKHX(instance
            ,):
    
        pPhysicalDeviceGroupCount = ffi.new('uint32_t*')
        pPhysicalDeviceGroupProperties = ffi.NULL
    
        result = _callApi(fn, instance,pPhysicalDeviceGroupCount,pPhysicalDeviceGroupProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        pPhysicalDeviceGroupProperties = ffi.new('VkPhysicalDeviceGroupPropertiesKHX[]', pPhysicalDeviceGroupCount[0])
        result = _callApi(fn, instance,pPhysicalDeviceGroupCount,pPhysicalDeviceGroupProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pPhysicalDeviceGroupProperties
    
    return vkEnumeratePhysicalDeviceGroupsKHX
def _wrap_vkGetDeviceGroupPeerMemoryFeaturesKHX(fn):
    def vkGetDeviceGroupPeerMemoryFeaturesKHX(device
            ,heapIndex
            ,localDeviceIndex
            ,remoteDeviceIndex
            ,):
    
        pPeerMemoryFeatures = ffi.new('VkPeerMemoryFeatureFlagsKHX*')
    
        result = _callApi(fn, device,heapIndex,localDeviceIndex,remoteDeviceIndex,pPeerMemoryFeatures)
    
        return pPeerMemoryFeatures[0]
    
    
    return vkGetDeviceGroupPeerMemoryFeaturesKHX
def _wrap_vkBindBufferMemory2KHX(fn):
    def vkBindBufferMemory2KHX(device
            ,bindInfoCount
            ,pBindInfos
            ,):
        result = _callApi(fn, device,bindInfoCount,pBindInfos)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkBindBufferMemory2KHX
def _wrap_vkBindImageMemory2KHX(fn):
    def vkBindImageMemory2KHX(device
            ,bindInfoCount
            ,pBindInfos
            ,):
        result = _callApi(fn, device,bindInfoCount,pBindInfos)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
    return vkBindImageMemory2KHX
def _wrap_vkCmdSetDeviceMaskKHX(fn):
    def vkCmdSetDeviceMaskKHX(commandBuffer
            ,deviceMask
            ,):
        result = _callApi(fn, commandBuffer,deviceMask)
    
    return vkCmdSetDeviceMaskKHX
def _wrap_vkGetDeviceGroupPresentCapabilitiesKHX(fn):
    def vkGetDeviceGroupPresentCapabilitiesKHX(device
            ,):
    
        pDeviceGroupPresentCapabilities = ffi.new('VkDeviceGroupPresentCapabilitiesKHX*')
    
        result = _callApi(fn, device,pDeviceGroupPresentCapabilities)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pDeviceGroupPresentCapabilities[0]
    
    
    return vkGetDeviceGroupPresentCapabilitiesKHX
def _wrap_vkGetDeviceGroupSurfacePresentModesKHX(fn):
    def vkGetDeviceGroupSurfacePresentModesKHX(device
            ,surface
            ,):
    
        pModes = ffi.new('VkDeviceGroupPresentModeFlagsKHX*')
    
        result = _callApi(fn, device,surface,pModes)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pModes[0]
    
    
    return vkGetDeviceGroupSurfacePresentModesKHX
def _wrap_vkAcquireNextImage2KHX(fn):
    def vkAcquireNextImage2KHX(device
            ,):
    
        pAcquireInfo = ffi.new('VkAcquireNextImageInfoKHX*')
        pImageIndex = ffi.NULL
    
        result = _callApi(fn, device,pAcquireInfo,pImageIndex)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        pImageIndex = ffi.new('uint32_t[]', pAcquireInfo[0])
        result = _callApi(fn, device,pAcquireInfo,pImageIndex)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pImageIndex
    
    return vkAcquireNextImage2KHX
def _wrap_vkCmdDispatchBaseKHX(fn):
    def vkCmdDispatchBaseKHX(commandBuffer
            ,baseGroupX
            ,baseGroupY
            ,baseGroupZ
            ,groupCountX
            ,groupCountY
            ,groupCountZ
            ,):
        result = _callApi(fn, commandBuffer,baseGroupX,baseGroupY,baseGroupZ,groupCountX,groupCountY,groupCountZ)
    
    return vkCmdDispatchBaseKHX
def _wrap_vkGetPhysicalDevicePresentRectanglesKHX(fn):
    def vkGetPhysicalDevicePresentRectanglesKHX(physicalDevice
            ,surface
            ,):
    
        pRectCount = ffi.new('uint32_t*')
        pRects = ffi.NULL
    
        result = _callApi(fn, physicalDevice,surface,pRectCount,pRects)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        pRects = ffi.new('VkRect2D[]', pRectCount[0])
        result = _callApi(fn, physicalDevice,surface,pRectCount,pRects)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pRects
    
    return vkGetPhysicalDevicePresentRectanglesKHX
def _wrap_vkCreateDescriptorUpdateTemplateKHR(fn):
    def vkCreateDescriptorUpdateTemplateKHR(device
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pDescriptorUpdateTemplate = ffi.new('VkDescriptorUpdateTemplateKHR*')
    
        result = _callApi(fn, device,pCreateInfo,pAllocator,pDescriptorUpdateTemplate)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pDescriptorUpdateTemplate[0]
    
    
    return vkCreateDescriptorUpdateTemplateKHR
def _wrap_vkDestroyDescriptorUpdateTemplateKHR(fn):
    def vkDestroyDescriptorUpdateTemplateKHR(device
            ,descriptorUpdateTemplate
            ,pAllocator
            ,):
        result = _callApi(fn, device,descriptorUpdateTemplate,pAllocator)
    
    return vkDestroyDescriptorUpdateTemplateKHR
def _wrap_vkUpdateDescriptorSetWithTemplateKHR(fn):
    def vkUpdateDescriptorSetWithTemplateKHR(device
            ,descriptorSet
            ,descriptorUpdateTemplate
            ,pData
            ,):
        result = _callApi(fn, device,descriptorSet,descriptorUpdateTemplate,pData)
    
    return vkUpdateDescriptorSetWithTemplateKHR
def _wrap_vkCmdPushDescriptorSetWithTemplateKHR(fn):
    def vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer
            ,descriptorUpdateTemplate
            ,layout
            ,set
            ,pData
            ,):
        result = _callApi(fn, commandBuffer,descriptorUpdateTemplate,layout,set,pData)
    
    return vkCmdPushDescriptorSetWithTemplateKHR
def _wrap_vkSetHdrMetadataEXT(fn):
    def vkSetHdrMetadataEXT(device
            ,swapchainCount
            ,pSwapchains
            ,pMetadata
            ,):
        result = _callApi(fn, device,swapchainCount,pSwapchains,pMetadata)
    
    return vkSetHdrMetadataEXT
def _wrap_vkGetSwapchainStatusKHR(fn):
    def vkGetSwapchainStatusKHR(device
            ,):
    
        swapchain = ffi.new('VkSwapchainKHR*')
    
        result = _callApi(fn, device,swapchain)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return swapchain[0]
    
    
    return vkGetSwapchainStatusKHR
def _wrap_vkGetRefreshCycleDurationGOOGLE(fn):
    def vkGetRefreshCycleDurationGOOGLE(device
            ,swapchain
            ,):
    
        pDisplayTimingProperties = ffi.new('VkRefreshCycleDurationGOOGLE*')
    
        result = _callApi(fn, device,swapchain,pDisplayTimingProperties)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pDisplayTimingProperties[0]
    
    
    return vkGetRefreshCycleDurationGOOGLE
def _wrap_vkGetPastPresentationTimingGOOGLE(fn):
    def vkGetPastPresentationTimingGOOGLE(device
            ,swapchain
            ,):
    
        pPresentationTimingCount = ffi.new('uint32_t*')
        pPresentationTimings = ffi.NULL
    
        result = _callApi(fn, device,swapchain,pPresentationTimingCount,pPresentationTimings)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        pPresentationTimings = ffi.new('VkPastPresentationTimingGOOGLE[]', pPresentationTimingCount[0])
        result = _callApi(fn, device,swapchain,pPresentationTimingCount,pPresentationTimings)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pPresentationTimings
    
    return vkGetPastPresentationTimingGOOGLE
def _wrap_vkCreateIOSSurfaceMVK(fn):
    def vkCreateIOSSurfaceMVK(instance
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pSurface = ffi.new('VkSurfaceKHR*')
    
        result = _callApi(fn, instance,pCreateInfo,pAllocator,pSurface)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurface[0]
    
    
    return vkCreateIOSSurfaceMVK
def _wrap_vkCreateMacOSSurfaceMVK(fn):
    def vkCreateMacOSSurfaceMVK(instance
            ,pCreateInfo
            ,pAllocator
            ,):
    
        pSurface = ffi.new('VkSurfaceKHR*')
    
        result = _callApi(fn, instance,pCreateInfo,pAllocator,pSurface)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurface[0]
    
    
    return vkCreateMacOSSurfaceMVK
def _wrap_vkCmdSetViewportWScalingNV(fn):
    def vkCmdSetViewportWScalingNV(commandBuffer
            ,firstViewport
            ,viewportCount
            ,pViewportWScalings
            ,):
        result = _callApi(fn, commandBuffer,firstViewport,viewportCount,pViewportWScalings)
    
    return vkCmdSetViewportWScalingNV
def _wrap_vkCmdSetDiscardRectangleEXT(fn):
    def vkCmdSetDiscardRectangleEXT(commandBuffer
            ,firstDiscardRectangle
            ,discardRectangleCount
            ,pDiscardRectangles
            ,):
        result = _callApi(fn, commandBuffer,firstDiscardRectangle,discardRectangleCount,pDiscardRectangles)
    
    return vkCmdSetDiscardRectangleEXT
def _wrap_vkGetPhysicalDeviceSurfaceCapabilities2KHR(fn):
    def vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice
            ,pSurfaceInfo
            ,):
    
        pSurfaceCapabilities = ffi.new('VkSurfaceCapabilities2KHR*')
    
        result = _callApi(fn, physicalDevice,pSurfaceInfo,pSurfaceCapabilities)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurfaceCapabilities[0]
    
    
    return vkGetPhysicalDeviceSurfaceCapabilities2KHR
def _wrap_vkGetPhysicalDeviceSurfaceFormats2KHR(fn):
    def vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice
            ,pSurfaceInfo
            ,):
    
        pSurfaceFormatCount = ffi.new('uint32_t*')
        pSurfaceFormats = ffi.NULL
    
        result = _callApi(fn, physicalDevice,pSurfaceInfo,pSurfaceFormatCount,pSurfaceFormats)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        pSurfaceFormats = ffi.new('VkSurfaceFormat2KHR[]', pSurfaceFormatCount[0])
        result = _callApi(fn, physicalDevice,pSurfaceInfo,pSurfaceFormatCount,pSurfaceFormats)
        if result != VK_SUCCESS:
            raise _exception_codes[result]
    
        return pSurfaceFormats
    
    return vkGetPhysicalDeviceSurfaceFormats2KHR

_instance_ext_funcs = {
    'vkCreateAndroidSurfaceKHR':_wrap_vkCreateAndroidSurfaceKHR,
    'vkGetPhysicalDeviceDisplayPropertiesKHR':_wrap_vkGetPhysicalDeviceDisplayPropertiesKHR,
    'vkGetPhysicalDeviceExternalBufferPropertiesKHX':_wrap_vkGetPhysicalDeviceExternalBufferPropertiesKHX,
    'vkGetPhysicalDeviceXlibPresentationSupportKHR':_wrap_vkGetPhysicalDeviceXlibPresentationSupportKHR,
    'vkCreateIOSSurfaceMVK':_wrap_vkCreateIOSSurfaceMVK,
    'vkGetPhysicalDeviceSurfaceCapabilities2KHR':_wrap_vkGetPhysicalDeviceSurfaceCapabilities2KHR,
    'vkGetPhysicalDeviceSurfaceCapabilitiesKHR':_wrap_vkGetPhysicalDeviceSurfaceCapabilitiesKHR,
    'vkGetPhysicalDeviceFormatProperties2KHR':_wrap_vkGetPhysicalDeviceFormatProperties2KHR,
    'vkCreateViSurfaceNN':_wrap_vkCreateViSurfaceNN,
    'vkGetPhysicalDeviceXcbPresentationSupportKHR':_wrap_vkGetPhysicalDeviceXcbPresentationSupportKHR,
    'vkGetPhysicalDeviceSurfaceFormats2KHR':_wrap_vkGetPhysicalDeviceSurfaceFormats2KHR,
    'vkGetPhysicalDeviceQueueFamilyProperties2KHR':_wrap_vkGetPhysicalDeviceQueueFamilyProperties2KHR,
    'vkGetPhysicalDeviceDisplayPlanePropertiesKHR':_wrap_vkGetPhysicalDeviceDisplayPlanePropertiesKHR,
    'vkGetPhysicalDeviceExternalSemaphorePropertiesKHX':_wrap_vkGetPhysicalDeviceExternalSemaphorePropertiesKHX,
    'vkCreateDisplayModeKHR':_wrap_vkCreateDisplayModeKHR,
    'vkGetDisplayPlaneSupportedDisplaysKHR':_wrap_vkGetDisplayPlaneSupportedDisplaysKHR,
    'vkGetRandROutputDisplayEXT':_wrap_vkGetRandROutputDisplayEXT,
    'vkCreateXlibSurfaceKHR':_wrap_vkCreateXlibSurfaceKHR,
    'vkDestroySurfaceKHR':_wrap_vkDestroySurfaceKHR,
    'vkCreateDebugReportCallbackEXT':_wrap_vkCreateDebugReportCallbackEXT,
    'vkGetPhysicalDeviceSparseImageFormatProperties2KHR':_wrap_vkGetPhysicalDeviceSparseImageFormatProperties2KHR,
    'vkGetPhysicalDeviceSurfacePresentModesKHR':_wrap_vkGetPhysicalDeviceSurfacePresentModesKHR,
    'vkAcquireXlibDisplayEXT':_wrap_vkAcquireXlibDisplayEXT,
    'vkGetPhysicalDeviceFeatures2KHR':_wrap_vkGetPhysicalDeviceFeatures2KHR,
    'vkGetPhysicalDeviceSurfaceCapabilities2EXT':_wrap_vkGetPhysicalDeviceSurfaceCapabilities2EXT,
    'vkGetPhysicalDeviceMirPresentationSupportKHR':_wrap_vkGetPhysicalDeviceMirPresentationSupportKHR,
    'vkCreateDisplayPlaneSurfaceKHR':_wrap_vkCreateDisplayPlaneSurfaceKHR,
    'vkCreateMacOSSurfaceMVK':_wrap_vkCreateMacOSSurfaceMVK,
    'vkDebugReportMessageEXT':_wrap_vkDebugReportMessageEXT,
    'vkGetPhysicalDeviceSurfaceFormatsKHR':_wrap_vkGetPhysicalDeviceSurfaceFormatsKHR,
    'vkGetPhysicalDeviceExternalImageFormatPropertiesNV':_wrap_vkGetPhysicalDeviceExternalImageFormatPropertiesNV,
    'vkGetPhysicalDeviceSurfaceSupportKHR':_wrap_vkGetPhysicalDeviceSurfaceSupportKHR,
    'vkGetPhysicalDeviceImageFormatProperties2KHR':_wrap_vkGetPhysicalDeviceImageFormatProperties2KHR,
    'vkReleaseDisplayEXT':_wrap_vkReleaseDisplayEXT,
    'vkGetPhysicalDeviceWin32PresentationSupportKHR':_wrap_vkGetPhysicalDeviceWin32PresentationSupportKHR,
    'vkEnumeratePhysicalDeviceGroupsKHX':_wrap_vkEnumeratePhysicalDeviceGroupsKHX,
    'vkGetPhysicalDeviceProperties2KHR':_wrap_vkGetPhysicalDeviceProperties2KHR,
    'vkDestroyDebugReportCallbackEXT':_wrap_vkDestroyDebugReportCallbackEXT,
    'vkCreateWaylandSurfaceKHR':_wrap_vkCreateWaylandSurfaceKHR,
    'vkCreateXcbSurfaceKHR':_wrap_vkCreateXcbSurfaceKHR,
    'vkGetDisplayModePropertiesKHR':_wrap_vkGetDisplayModePropertiesKHR,
    'vkGetPhysicalDeviceMemoryProperties2KHR':_wrap_vkGetPhysicalDeviceMemoryProperties2KHR,
    'vkCreateMirSurfaceKHR':_wrap_vkCreateMirSurfaceKHR,
    'vkCreateWin32SurfaceKHR':_wrap_vkCreateWin32SurfaceKHR,
    'vkGetDisplayPlaneCapabilitiesKHR':_wrap_vkGetDisplayPlaneCapabilitiesKHR,
    'vkGetPhysicalDeviceWaylandPresentationSupportKHR':_wrap_vkGetPhysicalDeviceWaylandPresentationSupportKHR,
    'vkGetDeviceGroupPresentCapabilitiesKHX':_wrap_vkGetDeviceGroupPresentCapabilitiesKHX,
    'vkImportSemaphoreWin32HandleKHX':_wrap_vkImportSemaphoreWin32HandleKHX,
    'vkBindImageMemory2KHX':_wrap_vkBindImageMemory2KHX,
    'vkGetRefreshCycleDurationGOOGLE':_wrap_vkGetRefreshCycleDurationGOOGLE,
    'vkAcquireNextImageKHR':_wrap_vkAcquireNextImageKHR,
    'vkImportSemaphoreFdKHX':_wrap_vkImportSemaphoreFdKHX,
    'vkCmdPushDescriptorSetWithTemplateKHR':_wrap_vkCmdPushDescriptorSetWithTemplateKHR,
    'vkRegisterDisplayEventEXT':_wrap_vkRegisterDisplayEventEXT,
    'vkGetDeviceGroupPeerMemoryFeaturesKHX':_wrap_vkGetDeviceGroupPeerMemoryFeaturesKHX,
    'vkDestroyIndirectCommandsLayoutNVX':_wrap_vkDestroyIndirectCommandsLayoutNVX,
    'vkDebugMarkerSetObjectNameEXT':_wrap_vkDebugMarkerSetObjectNameEXT,
    'vkAcquireNextImage2KHX':_wrap_vkAcquireNextImage2KHX,
    'vkDisplayPowerControlEXT':_wrap_vkDisplayPowerControlEXT,
    'vkRegisterDeviceEventEXT':_wrap_vkRegisterDeviceEventEXT,
    'vkRegisterObjectsNVX':_wrap_vkRegisterObjectsNVX,
    'vkGetSwapchainStatusKHR':_wrap_vkGetSwapchainStatusKHR,
    'vkGetMemoryWin32HandleNV':_wrap_vkGetMemoryWin32HandleNV,
    'vkGetMemoryFdKHX':_wrap_vkGetMemoryFdKHX,
    'vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX':_wrap_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX,
    'vkCmdDebugMarkerInsertEXT':_wrap_vkCmdDebugMarkerInsertEXT,
    'vkCmdReserveSpaceForCommandsNVX':_wrap_vkCmdReserveSpaceForCommandsNVX,
    'vkDestroyObjectTableNVX':_wrap_vkDestroyObjectTableNVX,
    'vkSetHdrMetadataEXT':_wrap_vkSetHdrMetadataEXT,
    'vkCmdDrawIndexedIndirectCountAMD':_wrap_vkCmdDrawIndexedIndirectCountAMD,
    'vkDestroySwapchainKHR':_wrap_vkDestroySwapchainKHR,
    'vkUpdateDescriptorSetWithTemplateKHR':_wrap_vkUpdateDescriptorSetWithTemplateKHR,
    'vkDestroyDescriptorUpdateTemplateKHR':_wrap_vkDestroyDescriptorUpdateTemplateKHR,
    'vkDebugMarkerSetObjectTagEXT':_wrap_vkDebugMarkerSetObjectTagEXT,
    'vkTrimCommandPoolKHR':_wrap_vkTrimCommandPoolKHR,
    'vkCmdSetDiscardRectangleEXT':_wrap_vkCmdSetDiscardRectangleEXT,
    'vkGetSwapchainImagesKHR':_wrap_vkGetSwapchainImagesKHR,
    'vkCmdSetDeviceMaskKHX':_wrap_vkCmdSetDeviceMaskKHX,
    'vkCreateSharedSwapchainsKHR':_wrap_vkCreateSharedSwapchainsKHR,
    'vkGetMemoryWin32HandlePropertiesKHX':_wrap_vkGetMemoryWin32HandlePropertiesKHX,
    'vkCreateIndirectCommandsLayoutNVX':_wrap_vkCreateIndirectCommandsLayoutNVX,
    'vkCmdProcessCommandsNVX':_wrap_vkCmdProcessCommandsNVX,
    'vkCreateSwapchainKHR':_wrap_vkCreateSwapchainKHR,
    'vkCmdDebugMarkerBeginEXT':_wrap_vkCmdDebugMarkerBeginEXT,
    'vkGetSemaphoreFdKHX':_wrap_vkGetSemaphoreFdKHX,
    'vkUnregisterObjectsNVX':_wrap_vkUnregisterObjectsNVX,
    'vkCmdDebugMarkerEndEXT':_wrap_vkCmdDebugMarkerEndEXT,
    'vkGetSwapchainCounterEXT':_wrap_vkGetSwapchainCounterEXT,
    'vkGetPastPresentationTimingGOOGLE':_wrap_vkGetPastPresentationTimingGOOGLE,
    'vkGetMemoryWin32HandleKHX':_wrap_vkGetMemoryWin32HandleKHX,
    'vkQueuePresentKHR':_wrap_vkQueuePresentKHR,
    'vkGetDeviceGroupSurfacePresentModesKHX':_wrap_vkGetDeviceGroupSurfacePresentModesKHX,
    'vkBindBufferMemory2KHX':_wrap_vkBindBufferMemory2KHX,
    'vkCreateDescriptorUpdateTemplateKHR':_wrap_vkCreateDescriptorUpdateTemplateKHR,
    'vkGetMemoryFdPropertiesKHX':_wrap_vkGetMemoryFdPropertiesKHX,
    'vkCmdSetViewportWScalingNV':_wrap_vkCmdSetViewportWScalingNV,
    'vkGetPhysicalDevicePresentRectanglesKHX':_wrap_vkGetPhysicalDevicePresentRectanglesKHX,
    'vkCmdDispatchBaseKHX':_wrap_vkCmdDispatchBaseKHX,
    'vkCmdPushDescriptorSetKHR':_wrap_vkCmdPushDescriptorSetKHR,
    'vkCmdDrawIndirectCountAMD':_wrap_vkCmdDrawIndirectCountAMD,
    'vkGetSemaphoreWin32HandleKHX':_wrap_vkGetSemaphoreWin32HandleKHX,
    'vkCreateObjectTableNVX':_wrap_vkCreateObjectTableNVX,
}


_device_ext_funcs = {
    'vkGetDeviceGroupPresentCapabilitiesKHX':_wrap_vkGetDeviceGroupPresentCapabilitiesKHX,
    'vkImportSemaphoreWin32HandleKHX':_wrap_vkImportSemaphoreWin32HandleKHX,
    'vkBindImageMemory2KHX':_wrap_vkBindImageMemory2KHX,
    'vkGetRefreshCycleDurationGOOGLE':_wrap_vkGetRefreshCycleDurationGOOGLE,
    'vkAcquireNextImageKHR':_wrap_vkAcquireNextImageKHR,
    'vkImportSemaphoreFdKHX':_wrap_vkImportSemaphoreFdKHX,
    'vkCmdPushDescriptorSetWithTemplateKHR':_wrap_vkCmdPushDescriptorSetWithTemplateKHR,
    'vkRegisterDisplayEventEXT':_wrap_vkRegisterDisplayEventEXT,
    'vkGetDeviceGroupPeerMemoryFeaturesKHX':_wrap_vkGetDeviceGroupPeerMemoryFeaturesKHX,
    'vkDestroyIndirectCommandsLayoutNVX':_wrap_vkDestroyIndirectCommandsLayoutNVX,
    'vkDebugMarkerSetObjectNameEXT':_wrap_vkDebugMarkerSetObjectNameEXT,
    'vkAcquireNextImage2KHX':_wrap_vkAcquireNextImage2KHX,
    'vkDisplayPowerControlEXT':_wrap_vkDisplayPowerControlEXT,
    'vkRegisterDeviceEventEXT':_wrap_vkRegisterDeviceEventEXT,
    'vkRegisterObjectsNVX':_wrap_vkRegisterObjectsNVX,
    'vkGetSwapchainStatusKHR':_wrap_vkGetSwapchainStatusKHR,
    'vkGetMemoryWin32HandleNV':_wrap_vkGetMemoryWin32HandleNV,
    'vkGetMemoryFdKHX':_wrap_vkGetMemoryFdKHX,
    'vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX':_wrap_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX,
    'vkCmdDebugMarkerInsertEXT':_wrap_vkCmdDebugMarkerInsertEXT,
    'vkCmdReserveSpaceForCommandsNVX':_wrap_vkCmdReserveSpaceForCommandsNVX,
    'vkDestroyObjectTableNVX':_wrap_vkDestroyObjectTableNVX,
    'vkSetHdrMetadataEXT':_wrap_vkSetHdrMetadataEXT,
    'vkCmdDrawIndexedIndirectCountAMD':_wrap_vkCmdDrawIndexedIndirectCountAMD,
    'vkDestroySwapchainKHR':_wrap_vkDestroySwapchainKHR,
    'vkUpdateDescriptorSetWithTemplateKHR':_wrap_vkUpdateDescriptorSetWithTemplateKHR,
    'vkDestroyDescriptorUpdateTemplateKHR':_wrap_vkDestroyDescriptorUpdateTemplateKHR,
    'vkDebugMarkerSetObjectTagEXT':_wrap_vkDebugMarkerSetObjectTagEXT,
    'vkTrimCommandPoolKHR':_wrap_vkTrimCommandPoolKHR,
    'vkCmdSetDiscardRectangleEXT':_wrap_vkCmdSetDiscardRectangleEXT,
    'vkGetSwapchainImagesKHR':_wrap_vkGetSwapchainImagesKHR,
    'vkCmdSetDeviceMaskKHX':_wrap_vkCmdSetDeviceMaskKHX,
    'vkCreateSharedSwapchainsKHR':_wrap_vkCreateSharedSwapchainsKHR,
    'vkGetMemoryWin32HandlePropertiesKHX':_wrap_vkGetMemoryWin32HandlePropertiesKHX,
    'vkCreateIndirectCommandsLayoutNVX':_wrap_vkCreateIndirectCommandsLayoutNVX,
    'vkCmdProcessCommandsNVX':_wrap_vkCmdProcessCommandsNVX,
    'vkCreateSwapchainKHR':_wrap_vkCreateSwapchainKHR,
    'vkCmdDebugMarkerBeginEXT':_wrap_vkCmdDebugMarkerBeginEXT,
    'vkGetSemaphoreFdKHX':_wrap_vkGetSemaphoreFdKHX,
    'vkUnregisterObjectsNVX':_wrap_vkUnregisterObjectsNVX,
    'vkCmdDebugMarkerEndEXT':_wrap_vkCmdDebugMarkerEndEXT,
    'vkGetSwapchainCounterEXT':_wrap_vkGetSwapchainCounterEXT,
    'vkGetPastPresentationTimingGOOGLE':_wrap_vkGetPastPresentationTimingGOOGLE,
    'vkGetMemoryWin32HandleKHX':_wrap_vkGetMemoryWin32HandleKHX,
    'vkQueuePresentKHR':_wrap_vkQueuePresentKHR,
    'vkGetDeviceGroupSurfacePresentModesKHX':_wrap_vkGetDeviceGroupSurfacePresentModesKHX,
    'vkBindBufferMemory2KHX':_wrap_vkBindBufferMemory2KHX,
    'vkCreateDescriptorUpdateTemplateKHR':_wrap_vkCreateDescriptorUpdateTemplateKHR,
    'vkGetMemoryFdPropertiesKHX':_wrap_vkGetMemoryFdPropertiesKHX,
    'vkCmdSetViewportWScalingNV':_wrap_vkCmdSetViewportWScalingNV,
    'vkGetPhysicalDevicePresentRectanglesKHX':_wrap_vkGetPhysicalDevicePresentRectanglesKHX,
    'vkCmdDispatchBaseKHX':_wrap_vkCmdDispatchBaseKHX,
    'vkCmdPushDescriptorSetKHR':_wrap_vkCmdPushDescriptorSetKHR,
    'vkCmdDrawIndirectCountAMD':_wrap_vkCmdDrawIndirectCountAMD,
    'vkGetSemaphoreWin32HandleKHX':_wrap_vkGetSemaphoreWin32HandleKHX,
    'vkCreateObjectTableNVX':_wrap_vkCreateObjectTableNVX,
}


def vkGetInstanceProcAddr(instance, pName):
    fn = _callApi(_lib.vkGetInstanceProcAddr, instance, pName)
    if fn == ffi.NULL:
        raise ProcedureNotFoundError()
    if not pName in _instance_ext_funcs:
        raise ExtensionNotSupportedError()
    fn = ffi.cast('PFN_' + pName, fn)
    return _instance_ext_funcs[pName](fn)


def vkGetDeviceProcAddr(device, pName):
    fn = _callApi(_lib.vkGetDeviceProcAddr, device, pName)
    if fn == ffi.NULL:
        raise ProcedureNotFoundError()
    if not pName in _device_ext_funcs:
        raise ExtensionNotSupportedError()
    fn = ffi.cast('PFN_'+pName, fn)
    return _device_ext_funcs[pName](fn)


def vkMapMemory(device, memory, offset, size, flags):
    ppData = ffi.new('void**')

    result = _callApi(_lib.vkMapMemory, device,memory,offset,size,flags,ppData)
    if result != VK_SUCCESS:
        raise _exception_codes[result]

    return ffi.buffer(ppData[0], size)
